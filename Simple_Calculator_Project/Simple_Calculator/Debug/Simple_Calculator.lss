
Simple_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00004190  00004224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800192  00800192  00004356  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  00004358  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa3  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007f23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  000080e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  000082f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000a97c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000be4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d0f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000d5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dfdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__vector_3>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__ltsf2+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e0 e9       	ldi	r30, 0x90	; 144
     162:	f1 e4       	ldi	r31, 0x41	; 65
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a2 39       	cpi	r26, 0x92	; 146
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a2 e9       	ldi	r26, 0x92	; 146
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ac 3b       	cpi	r26, 0xBC	; 188
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 a4 08 	call	0x1148	; 0x1148 <main>
     184:	0c 94 c6 20 	jmp	0x418c	; 0x418c <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	aa e8       	ldi	r26, 0x8A	; 138
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 ef 1d 	jmp	0x3bde	; 0x3bde <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8a e8       	ldi	r24, 0x8A	; 138
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 f7 1d 	jmp	0x3bee	; 0x3bee <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6a e8       	ldi	r22, 0x8A	; 138
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 13 1e 	jmp	0x3c26	; 0x3c26 <__epilogue_restores__+0x10>

00000884 <__eqsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__eqsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__eqsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__eqsf2+0x58>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

000008e4 <__gtsf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gtsf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gtsf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gtsf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

00000944 <__gesf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__gesf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__gesf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__gesf2+0x58>
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

000009a4 <__ltsf2>:
     9a4:	a8 e1       	ldi	r26, 0x18	; 24
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <__prologue_saves__+0x18>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	2d 83       	std	Y+5, r18	; 0x05
     9ba:	3e 83       	std	Y+6, r19	; 0x06
     9bc:	4f 83       	std	Y+7, r20	; 0x07
     9be:	58 87       	std	Y+8, r21	; 0x08
     9c0:	89 e0       	ldi	r24, 0x09	; 9
     9c2:	e8 2e       	mov	r14, r24
     9c4:	f1 2c       	mov	r15, r1
     9c6:	ec 0e       	add	r14, r28
     9c8:	fd 1e       	adc	r15, r29
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	b7 01       	movw	r22, r14
     9d0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9d4:	8e 01       	movw	r16, r28
     9d6:	0f 5e       	subi	r16, 0xEF	; 239
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	ce 01       	movw	r24, r28
     9dc:	05 96       	adiw	r24, 0x05	; 5
     9de:	b8 01       	movw	r22, r16
     9e0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	40 f0       	brcs	.+16     	; 0x9fa <__ltsf2+0x56>
     9ea:	89 89       	ldd	r24, Y+17	; 0x11
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	28 f0       	brcs	.+10     	; 0x9fa <__ltsf2+0x56>
     9f0:	c7 01       	movw	r24, r14
     9f2:	b8 01       	movw	r22, r16
     9f4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__ltsf2+0x58>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	68 96       	adiw	r28, 0x18	; 24
     9fe:	e6 e0       	ldi	r30, 0x06	; 6
     a00:	0c 94 17 1e 	jmp	0x3c2e	; 0x3c2e <__epilogue_restores__+0x18>

00000a04 <__floatsisf>:
     a04:	a8 e0       	ldi	r26, 0x08	; 8
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e8 e0       	ldi	r30, 0x08	; 8
     a0a:	f5 e0       	ldi	r31, 0x05	; 5
     a0c:	0c 94 f8 1d 	jmp	0x3bf0	; 0x3bf0 <__prologue_saves__+0x12>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	da 01       	movw	r26, r20
     a1a:	c9 01       	movw	r24, r18
     a1c:	88 27       	eor	r24, r24
     a1e:	b7 fd       	sbrc	r27, 7
     a20:	83 95       	inc	r24
     a22:	99 27       	eor	r25, r25
     a24:	aa 27       	eor	r26, r26
     a26:	bb 27       	eor	r27, r27
     a28:	b8 2e       	mov	r11, r24
     a2a:	21 15       	cp	r18, r1
     a2c:	31 05       	cpc	r19, r1
     a2e:	41 05       	cpc	r20, r1
     a30:	51 05       	cpc	r21, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__floatsisf+0x36>
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	3a c0       	rjmp	.+116    	; 0xaae <__floatsisf+0xaa>
     a3a:	88 23       	and	r24, r24
     a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x64>
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	38 07       	cpc	r19, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	48 07       	cpc	r20, r24
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	58 07       	cpc	r21, r24
     a4c:	29 f4       	brne	.+10     	; 0xa58 <__floatsisf+0x54>
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	9f ec       	ldi	r25, 0xCF	; 207
     a56:	30 c0       	rjmp	.+96     	; 0xab8 <__floatsisf+0xb4>
     a58:	ee 24       	eor	r14, r14
     a5a:	ff 24       	eor	r15, r15
     a5c:	87 01       	movw	r16, r14
     a5e:	e2 1a       	sub	r14, r18
     a60:	f3 0a       	sbc	r15, r19
     a62:	04 0b       	sbc	r16, r20
     a64:	15 0b       	sbc	r17, r21
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <__floatsisf+0x68>
     a68:	79 01       	movw	r14, r18
     a6a:	8a 01       	movw	r16, r20
     a6c:	8e e1       	ldi	r24, 0x1E	; 30
     a6e:	c8 2e       	mov	r12, r24
     a70:	d1 2c       	mov	r13, r1
     a72:	dc 82       	std	Y+4, r13	; 0x04
     a74:	cb 82       	std	Y+3, r12	; 0x03
     a76:	ed 82       	std	Y+5, r14	; 0x05
     a78:	fe 82       	std	Y+6, r15	; 0x06
     a7a:	0f 83       	std	Y+7, r16	; 0x07
     a7c:	18 87       	std	Y+8, r17	; 0x08
     a7e:	c8 01       	movw	r24, r16
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 b4 05 	call	0xb68	; 0xb68 <__clzsi2>
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	18 16       	cp	r1, r24
     a8a:	19 06       	cpc	r1, r25
     a8c:	84 f4       	brge	.+32     	; 0xaae <__floatsisf+0xaa>
     a8e:	08 2e       	mov	r0, r24
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__floatsisf+0x96>
     a92:	ee 0c       	add	r14, r14
     a94:	ff 1c       	adc	r15, r15
     a96:	00 1f       	adc	r16, r16
     a98:	11 1f       	adc	r17, r17
     a9a:	0a 94       	dec	r0
     a9c:	d2 f7       	brpl	.-12     	; 0xa92 <__floatsisf+0x8e>
     a9e:	ed 82       	std	Y+5, r14	; 0x05
     aa0:	fe 82       	std	Y+6, r15	; 0x06
     aa2:	0f 83       	std	Y+7, r16	; 0x07
     aa4:	18 87       	std	Y+8, r17	; 0x08
     aa6:	c8 1a       	sub	r12, r24
     aa8:	d9 0a       	sbc	r13, r25
     aaa:	dc 82       	std	Y+4, r13	; 0x04
     aac:	cb 82       	std	Y+3, r12	; 0x03
     aae:	ba 82       	std	Y+2, r11	; 0x02
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	e9 e0       	ldi	r30, 0x09	; 9
     abc:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__epilogue_restores__+0x12>

00000ac0 <__fixsfsi>:
     ac0:	ac e0       	ldi	r26, 0x0C	; 12
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e6 e6       	ldi	r30, 0x66	; 102
     ac6:	f5 e0       	ldi	r31, 0x05	; 5
     ac8:	0c 94 ff 1d 	jmp	0x3bfe	; 0x3bfe <__prologue_saves__+0x20>
     acc:	69 83       	std	Y+1, r22	; 0x01
     ace:	7a 83       	std	Y+2, r23	; 0x02
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	be 01       	movw	r22, r28
     ada:	6b 5f       	subi	r22, 0xFB	; 251
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	61 f1       	breq	.+88     	; 0xb40 <__fixsfsi+0x80>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	50 f1       	brcs	.+84     	; 0xb40 <__fixsfsi+0x80>
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	21 f4       	brne	.+8      	; 0xaf8 <__fixsfsi+0x38>
     af0:	8e 81       	ldd	r24, Y+6	; 0x06
     af2:	88 23       	and	r24, r24
     af4:	51 f1       	breq	.+84     	; 0xb4a <__fixsfsi+0x8a>
     af6:	2e c0       	rjmp	.+92     	; 0xb54 <__fixsfsi+0x94>
     af8:	2f 81       	ldd	r18, Y+7	; 0x07
     afa:	38 85       	ldd	r19, Y+8	; 0x08
     afc:	37 fd       	sbrc	r19, 7
     afe:	20 c0       	rjmp	.+64     	; 0xb40 <__fixsfsi+0x80>
     b00:	6e 81       	ldd	r22, Y+6	; 0x06
     b02:	2f 31       	cpi	r18, 0x1F	; 31
     b04:	31 05       	cpc	r19, r1
     b06:	1c f0       	brlt	.+6      	; 0xb0e <__fixsfsi+0x4e>
     b08:	66 23       	and	r22, r22
     b0a:	f9 f0       	breq	.+62     	; 0xb4a <__fixsfsi+0x8a>
     b0c:	23 c0       	rjmp	.+70     	; 0xb54 <__fixsfsi+0x94>
     b0e:	8e e1       	ldi	r24, 0x1E	; 30
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 1b       	sub	r24, r18
     b14:	93 0b       	sbc	r25, r19
     b16:	29 85       	ldd	r18, Y+9	; 0x09
     b18:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b1c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fixsfsi+0x68>
     b20:	56 95       	lsr	r21
     b22:	47 95       	ror	r20
     b24:	37 95       	ror	r19
     b26:	27 95       	ror	r18
     b28:	8a 95       	dec	r24
     b2a:	d2 f7       	brpl	.-12     	; 0xb20 <__fixsfsi+0x60>
     b2c:	66 23       	and	r22, r22
     b2e:	b1 f0       	breq	.+44     	; 0xb5c <__fixsfsi+0x9c>
     b30:	50 95       	com	r21
     b32:	40 95       	com	r20
     b34:	30 95       	com	r19
     b36:	21 95       	neg	r18
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	4f 4f       	sbci	r20, 0xFF	; 255
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <__fixsfsi+0x9c>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <__fixsfsi+0x9c>
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
     b4e:	4f ef       	ldi	r20, 0xFF	; 255
     b50:	5f e7       	ldi	r21, 0x7F	; 127
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__fixsfsi+0x9c>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e8       	ldi	r21, 0x80	; 128
     b5c:	b9 01       	movw	r22, r18
     b5e:	ca 01       	movw	r24, r20
     b60:	2c 96       	adiw	r28, 0x0c	; 12
     b62:	e2 e0       	ldi	r30, 0x02	; 2
     b64:	0c 94 1b 1e 	jmp	0x3c36	; 0x3c36 <__epilogue_restores__+0x20>

00000b68 <__clzsi2>:
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	7b 01       	movw	r14, r22
     b72:	8c 01       	movw	r16, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	e8 16       	cp	r14, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	f8 06       	cpc	r15, r24
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	08 07       	cpc	r16, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	18 07       	cpc	r17, r24
     b84:	88 f4       	brcc	.+34     	; 0xba8 <__clzsi2+0x40>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	e8 16       	cp	r14, r24
     b8a:	f1 04       	cpc	r15, r1
     b8c:	01 05       	cpc	r16, r1
     b8e:	11 05       	cpc	r17, r1
     b90:	31 f0       	breq	.+12     	; 0xb9e <__clzsi2+0x36>
     b92:	28 f0       	brcs	.+10     	; 0xb9e <__clzsi2+0x36>
     b94:	88 e0       	ldi	r24, 0x08	; 8
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	17 c0       	rjmp	.+46     	; 0xbcc <__clzsi2+0x64>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <__clzsi2+0x64>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	e8 16       	cp	r14, r24
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	f8 06       	cpc	r15, r24
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 07       	cpc	r16, r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	18 07       	cpc	r17, r24
     bb8:	28 f0       	brcs	.+10     	; 0xbc4 <__clzsi2+0x5c>
     bba:	88 e1       	ldi	r24, 0x18	; 24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__clzsi2+0x64>
     bc4:	80 e1       	ldi	r24, 0x10	; 16
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	20 e2       	ldi	r18, 0x20	; 32
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	28 1b       	sub	r18, r24
     bd6:	39 0b       	sbc	r19, r25
     bd8:	4a 0b       	sbc	r20, r26
     bda:	5b 0b       	sbc	r21, r27
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__clzsi2+0x7e>
     bde:	16 95       	lsr	r17
     be0:	07 95       	ror	r16
     be2:	f7 94       	ror	r15
     be4:	e7 94       	ror	r14
     be6:	8a 95       	dec	r24
     be8:	d2 f7       	brpl	.-12     	; 0xbde <__clzsi2+0x76>
     bea:	f7 01       	movw	r30, r14
     bec:	ee 56       	subi	r30, 0x6E	; 110
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	80 81       	ld	r24, Z
     bf2:	28 1b       	sub	r18, r24
     bf4:	31 09       	sbc	r19, r1
     bf6:	41 09       	sbc	r20, r1
     bf8:	51 09       	sbc	r21, r1
     bfa:	c9 01       	movw	r24, r18
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	08 95       	ret

00000c06 <__pack_f>:
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	fc 01       	movw	r30, r24
     c12:	e4 80       	ldd	r14, Z+4	; 0x04
     c14:	f5 80       	ldd	r15, Z+5	; 0x05
     c16:	06 81       	ldd	r16, Z+6	; 0x06
     c18:	17 81       	ldd	r17, Z+7	; 0x07
     c1a:	d1 80       	ldd	r13, Z+1	; 0x01
     c1c:	80 81       	ld	r24, Z
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	48 f4       	brcc	.+18     	; 0xc34 <__pack_f+0x2e>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e1       	ldi	r26, 0x10	; 16
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 2a       	or	r14, r24
     c2c:	f9 2a       	or	r15, r25
     c2e:	0a 2b       	or	r16, r26
     c30:	1b 2b       	or	r17, r27
     c32:	a5 c0       	rjmp	.+330    	; 0xd7e <__pack_f+0x178>
     c34:	84 30       	cpi	r24, 0x04	; 4
     c36:	09 f4       	brne	.+2      	; 0xc3a <__pack_f+0x34>
     c38:	9f c0       	rjmp	.+318    	; 0xd78 <__pack_f+0x172>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	21 f4       	brne	.+8      	; 0xc46 <__pack_f+0x40>
     c3e:	ee 24       	eor	r14, r14
     c40:	ff 24       	eor	r15, r15
     c42:	87 01       	movw	r16, r14
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <__pack_f+0x4a>
     c46:	e1 14       	cp	r14, r1
     c48:	f1 04       	cpc	r15, r1
     c4a:	01 05       	cpc	r16, r1
     c4c:	11 05       	cpc	r17, r1
     c4e:	19 f4       	brne	.+6      	; 0xc56 <__pack_f+0x50>
     c50:	e0 e0       	ldi	r30, 0x00	; 0
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	96 c0       	rjmp	.+300    	; 0xd82 <__pack_f+0x17c>
     c56:	62 81       	ldd	r22, Z+2	; 0x02
     c58:	73 81       	ldd	r23, Z+3	; 0x03
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	62 38       	cpi	r22, 0x82	; 130
     c5e:	79 07       	cpc	r23, r25
     c60:	0c f0       	brlt	.+2      	; 0xc64 <__pack_f+0x5e>
     c62:	5b c0       	rjmp	.+182    	; 0xd1a <__pack_f+0x114>
     c64:	22 e8       	ldi	r18, 0x82	; 130
     c66:	3f ef       	ldi	r19, 0xFF	; 255
     c68:	26 1b       	sub	r18, r22
     c6a:	37 0b       	sbc	r19, r23
     c6c:	2a 31       	cpi	r18, 0x1A	; 26
     c6e:	31 05       	cpc	r19, r1
     c70:	2c f0       	brlt	.+10     	; 0xc7c <__pack_f+0x76>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	2a c0       	rjmp	.+84     	; 0xcd0 <__pack_f+0xca>
     c7c:	b8 01       	movw	r22, r16
     c7e:	a7 01       	movw	r20, r14
     c80:	02 2e       	mov	r0, r18
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__pack_f+0x86>
     c84:	76 95       	lsr	r23
     c86:	67 95       	ror	r22
     c88:	57 95       	ror	r21
     c8a:	47 95       	ror	r20
     c8c:	0a 94       	dec	r0
     c8e:	d2 f7       	brpl	.-12     	; 0xc84 <__pack_f+0x7e>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <__pack_f+0x9c>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	aa 1f       	adc	r26, r26
     ca0:	bb 1f       	adc	r27, r27
     ca2:	2a 95       	dec	r18
     ca4:	d2 f7       	brpl	.-12     	; 0xc9a <__pack_f+0x94>
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	a1 09       	sbc	r26, r1
     caa:	b1 09       	sbc	r27, r1
     cac:	8e 21       	and	r24, r14
     cae:	9f 21       	and	r25, r15
     cb0:	a0 23       	and	r26, r16
     cb2:	b1 23       	and	r27, r17
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	21 f0       	breq	.+8      	; 0xcc4 <__pack_f+0xbe>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	9a 01       	movw	r18, r20
     cc6:	ab 01       	movw	r20, r22
     cc8:	28 2b       	or	r18, r24
     cca:	39 2b       	or	r19, r25
     ccc:	4a 2b       	or	r20, r26
     cce:	5b 2b       	or	r21, r27
     cd0:	da 01       	movw	r26, r20
     cd2:	c9 01       	movw	r24, r18
     cd4:	8f 77       	andi	r24, 0x7F	; 127
     cd6:	90 70       	andi	r25, 0x00	; 0
     cd8:	a0 70       	andi	r26, 0x00	; 0
     cda:	b0 70       	andi	r27, 0x00	; 0
     cdc:	80 34       	cpi	r24, 0x40	; 64
     cde:	91 05       	cpc	r25, r1
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <__pack_f+0xee>
     ce6:	27 ff       	sbrs	r18, 7
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <__pack_f+0xf6>
     cea:	20 5c       	subi	r18, 0xC0	; 192
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	4f 4f       	sbci	r20, 0xFF	; 255
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__pack_f+0xf6>
     cf4:	21 5c       	subi	r18, 0xC1	; 193
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	4f 4f       	sbci	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	20 30       	cpi	r18, 0x00	; 0
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	3a 07       	cpc	r19, r26
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	4a 07       	cpc	r20, r26
     d0a:	a0 e4       	ldi	r26, 0x40	; 64
     d0c:	5a 07       	cpc	r21, r26
     d0e:	10 f0       	brcs	.+4      	; 0xd14 <__pack_f+0x10e>
     d10:	e1 e0       	ldi	r30, 0x01	; 1
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	79 01       	movw	r14, r18
     d16:	8a 01       	movw	r16, r20
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <__pack_f+0x162>
     d1a:	60 38       	cpi	r22, 0x80	; 128
     d1c:	71 05       	cpc	r23, r1
     d1e:	64 f5       	brge	.+88     	; 0xd78 <__pack_f+0x172>
     d20:	fb 01       	movw	r30, r22
     d22:	e1 58       	subi	r30, 0x81	; 129
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	d8 01       	movw	r26, r16
     d28:	c7 01       	movw	r24, r14
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	a0 70       	andi	r26, 0x00	; 0
     d30:	b0 70       	andi	r27, 0x00	; 0
     d32:	80 34       	cpi	r24, 0x40	; 64
     d34:	91 05       	cpc	r25, r1
     d36:	a1 05       	cpc	r26, r1
     d38:	b1 05       	cpc	r27, r1
     d3a:	39 f4       	brne	.+14     	; 0xd4a <__pack_f+0x144>
     d3c:	e7 fe       	sbrs	r14, 7
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <__pack_f+0x154>
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <__pack_f+0x14c>
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e8 0e       	add	r14, r24
     d54:	f9 1e       	adc	r15, r25
     d56:	0a 1f       	adc	r16, r26
     d58:	1b 1f       	adc	r17, r27
     d5a:	17 ff       	sbrs	r17, 7
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__pack_f+0x162>
     d5e:	16 95       	lsr	r17
     d60:	07 95       	ror	r16
     d62:	f7 94       	ror	r15
     d64:	e7 94       	ror	r14
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	87 e0       	ldi	r24, 0x07	; 7
     d6a:	16 95       	lsr	r17
     d6c:	07 95       	ror	r16
     d6e:	f7 94       	ror	r15
     d70:	e7 94       	ror	r14
     d72:	8a 95       	dec	r24
     d74:	d1 f7       	brne	.-12     	; 0xd6a <__pack_f+0x164>
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <__pack_f+0x17c>
     d78:	ee 24       	eor	r14, r14
     d7a:	ff 24       	eor	r15, r15
     d7c:	87 01       	movw	r16, r14
     d7e:	ef ef       	ldi	r30, 0xFF	; 255
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	6e 2f       	mov	r22, r30
     d84:	67 95       	ror	r22
     d86:	66 27       	eor	r22, r22
     d88:	67 95       	ror	r22
     d8a:	90 2f       	mov	r25, r16
     d8c:	9f 77       	andi	r25, 0x7F	; 127
     d8e:	d7 94       	ror	r13
     d90:	dd 24       	eor	r13, r13
     d92:	d7 94       	ror	r13
     d94:	8e 2f       	mov	r24, r30
     d96:	86 95       	lsr	r24
     d98:	49 2f       	mov	r20, r25
     d9a:	46 2b       	or	r20, r22
     d9c:	58 2f       	mov	r21, r24
     d9e:	5d 29       	or	r21, r13
     da0:	b7 01       	movw	r22, r14
     da2:	ca 01       	movw	r24, r20
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	08 95       	ret

00000db0 <__unpack_f>:
     db0:	fc 01       	movw	r30, r24
     db2:	db 01       	movw	r26, r22
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	22 81       	ldd	r18, Z+2	; 0x02
     dba:	62 2f       	mov	r22, r18
     dbc:	6f 77       	andi	r22, 0x7F	; 127
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	22 1f       	adc	r18, r18
     dc2:	22 27       	eor	r18, r18
     dc4:	22 1f       	adc	r18, r18
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	89 2f       	mov	r24, r25
     dca:	88 0f       	add	r24, r24
     dcc:	82 2b       	or	r24, r18
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	99 1f       	adc	r25, r25
     dd4:	99 27       	eor	r25, r25
     dd6:	99 1f       	adc	r25, r25
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	9c 93       	st	X, r25
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	a9 f5       	brne	.+106    	; 0xe4e <__unpack_f+0x9e>
     de4:	41 15       	cp	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	61 05       	cpc	r22, r1
     dea:	71 05       	cpc	r23, r1
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__unpack_f+0x42>
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	37 c0       	rjmp	.+110    	; 0xe60 <__unpack_f+0xb0>
     df2:	82 e8       	ldi	r24, 0x82	; 130
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	9c 93       	st	X, r25
     dfa:	8e 93       	st	-X, r24
     dfc:	12 97       	sbiw	r26, 0x02	; 2
     dfe:	9a 01       	movw	r18, r20
     e00:	ab 01       	movw	r20, r22
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	22 0f       	add	r18, r18
     e06:	33 1f       	adc	r19, r19
     e08:	44 1f       	adc	r20, r20
     e0a:	55 1f       	adc	r21, r21
     e0c:	6a 95       	dec	r22
     e0e:	d1 f7       	brne	.-12     	; 0xe04 <__unpack_f+0x54>
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	8c 93       	st	X, r24
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <__unpack_f+0x80>
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	44 1f       	adc	r20, r20
     e1c:	55 1f       	adc	r21, r21
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	8d 91       	ld	r24, X+
     e22:	9c 91       	ld	r25, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	13 96       	adiw	r26, 0x03	; 3
     e2a:	9c 93       	st	X, r25
     e2c:	8e 93       	st	-X, r24
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	20 30       	cpi	r18, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	38 07       	cpc	r19, r24
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	48 07       	cpc	r20, r24
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	58 07       	cpc	r21, r24
     e3e:	58 f3       	brcs	.-42     	; 0xe16 <__unpack_f+0x66>
     e40:	14 96       	adiw	r26, 0x04	; 4
     e42:	2d 93       	st	X+, r18
     e44:	3d 93       	st	X+, r19
     e46:	4d 93       	st	X+, r20
     e48:	5c 93       	st	X, r21
     e4a:	17 97       	sbiw	r26, 0x07	; 7
     e4c:	08 95       	ret
     e4e:	2f 3f       	cpi	r18, 0xFF	; 255
     e50:	31 05       	cpc	r19, r1
     e52:	79 f4       	brne	.+30     	; 0xe72 <__unpack_f+0xc2>
     e54:	41 15       	cp	r20, r1
     e56:	51 05       	cpc	r21, r1
     e58:	61 05       	cpc	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	19 f4       	brne	.+6      	; 0xe64 <__unpack_f+0xb4>
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	8c 93       	st	X, r24
     e62:	08 95       	ret
     e64:	64 ff       	sbrs	r22, 4
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <__unpack_f+0xbe>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	8c 93       	st	X, r24
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <__unpack_f+0xe2>
     e6e:	1c 92       	st	X, r1
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <__unpack_f+0xe2>
     e72:	2f 57       	subi	r18, 0x7F	; 127
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	13 96       	adiw	r26, 0x03	; 3
     e78:	3c 93       	st	X, r19
     e7a:	2e 93       	st	-X, r18
     e7c:	12 97       	sbiw	r26, 0x02	; 2
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	8c 93       	st	X, r24
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	44 0f       	add	r20, r20
     e86:	55 1f       	adc	r21, r21
     e88:	66 1f       	adc	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	8a 95       	dec	r24
     e8e:	d1 f7       	brne	.-12     	; 0xe84 <__unpack_f+0xd4>
     e90:	70 64       	ori	r23, 0x40	; 64
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	4d 93       	st	X+, r20
     e96:	5d 93       	st	X+, r21
     e98:	6d 93       	st	X+, r22
     e9a:	7c 93       	st	X, r23
     e9c:	17 97       	sbiw	r26, 0x07	; 7
     e9e:	08 95       	ret

00000ea0 <__fpcmp_parts_f>:
     ea0:	1f 93       	push	r17
     ea2:	dc 01       	movw	r26, r24
     ea4:	fb 01       	movw	r30, r22
     ea6:	9c 91       	ld	r25, X
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0xe>
     eac:	47 c0       	rjmp	.+142    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eae:	80 81       	ld	r24, Z
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <__fpcmp_parts_f+0x16>
     eb4:	43 c0       	rjmp	.+134    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eb6:	94 30       	cpi	r25, 0x04	; 4
     eb8:	51 f4       	brne	.+20     	; 0xece <__fpcmp_parts_f+0x2e>
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	1c 91       	ld	r17, X
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	99 f5       	brne	.+102    	; 0xf28 <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	68 2f       	mov	r22, r24
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	61 1b       	sub	r22, r17
     eca:	71 09       	sbc	r23, r1
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <__fpcmp_parts_f+0xac>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	21 f0       	breq	.+8      	; 0xeda <__fpcmp_parts_f+0x3a>
     ed2:	92 30       	cpi	r25, 0x02	; 2
     ed4:	31 f4       	brne	.+12     	; 0xee2 <__fpcmp_parts_f+0x42>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	b9 f1       	breq	.+110    	; 0xf48 <__fpcmp_parts_f+0xa8>
     eda:	81 81       	ldd	r24, Z+1	; 0x01
     edc:	88 23       	and	r24, r24
     ede:	89 f1       	breq	.+98     	; 0xf42 <__fpcmp_parts_f+0xa2>
     ee0:	2d c0       	rjmp	.+90     	; 0xf3c <__fpcmp_parts_f+0x9c>
     ee2:	11 96       	adiw	r26, 0x01	; 1
     ee4:	1c 91       	ld	r17, X
     ee6:	11 97       	sbiw	r26, 0x01	; 1
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	f1 f0       	breq	.+60     	; 0xf28 <__fpcmp_parts_f+0x88>
     eec:	81 81       	ldd	r24, Z+1	; 0x01
     eee:	18 17       	cp	r17, r24
     ef0:	d9 f4       	brne	.+54     	; 0xf28 <__fpcmp_parts_f+0x88>
     ef2:	12 96       	adiw	r26, 0x02	; 2
     ef4:	2d 91       	ld	r18, X+
     ef6:	3c 91       	ld	r19, X
     ef8:	13 97       	sbiw	r26, 0x03	; 3
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	82 17       	cp	r24, r18
     f00:	93 07       	cpc	r25, r19
     f02:	94 f0       	brlt	.+36     	; 0xf28 <__fpcmp_parts_f+0x88>
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	bc f0       	brlt	.+46     	; 0xf38 <__fpcmp_parts_f+0x98>
     f0a:	14 96       	adiw	r26, 0x04	; 4
     f0c:	8d 91       	ld	r24, X+
     f0e:	9d 91       	ld	r25, X+
     f10:	0d 90       	ld	r0, X+
     f12:	bc 91       	ld	r27, X
     f14:	a0 2d       	mov	r26, r0
     f16:	24 81       	ldd	r18, Z+4	; 0x04
     f18:	35 81       	ldd	r19, Z+5	; 0x05
     f1a:	46 81       	ldd	r20, Z+6	; 0x06
     f1c:	57 81       	ldd	r21, Z+7	; 0x07
     f1e:	28 17       	cp	r18, r24
     f20:	39 07       	cpc	r19, r25
     f22:	4a 07       	cpc	r20, r26
     f24:	5b 07       	cpc	r21, r27
     f26:	18 f4       	brcc	.+6      	; 0xf2e <__fpcmp_parts_f+0x8e>
     f28:	11 23       	and	r17, r17
     f2a:	41 f0       	breq	.+16     	; 0xf3c <__fpcmp_parts_f+0x9c>
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <__fpcmp_parts_f+0xa2>
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	a4 07       	cpc	r26, r20
     f34:	b5 07       	cpc	r27, r21
     f36:	40 f4       	brcc	.+16     	; 0xf48 <__fpcmp_parts_f+0xa8>
     f38:	11 23       	and	r17, r17
     f3a:	19 f0       	breq	.+6      	; 0xf42 <__fpcmp_parts_f+0xa2>
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <__fpcmp_parts_f+0xac>
     f42:	6f ef       	ldi	r22, 0xFF	; 255
     f44:	7f ef       	ldi	r23, 0xFF	; 255
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <__fpcmp_parts_f+0xac>
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	cb 01       	movw	r24, r22
     f4e:	1f 91       	pop	r17
     f50:	08 95       	ret

00000f52 <Initialize_Calculator>:
 static sint32 Multiplay_Function(void);
 static float Division_Function(void);


static void Initialize_Calculator(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0,0,"Num1=");
     f5a:	20 e6       	ldi	r18, 0x60	; 96
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	a9 01       	movw	r20, r18
     f64:	0e 94 4f 1c 	call	0x389e	; 0x389e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Num2=");
     f68:	26 e6       	ldi	r18, 0x66	; 102
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	a9 01       	movw	r20, r18
     f72:	0e 94 4f 1c 	call	0x389e	; 0x389e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2,0,"Operation=");
     f76:	2c e6       	ldi	r18, 0x6C	; 108
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	a9 01       	movw	r20, r18
     f80:	0e 94 4f 1c 	call	0x389e	; 0x389e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(3,0,"Result=");
     f84:	27 e7       	ldi	r18, 0x77	; 119
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	a9 01       	movw	r20, r18
     f8e:	0e 94 4f 1c 	call	0x389e	; 0x389e <LCD_displayStringRowColumn>
	Move_Cursor(0,6);
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	66 e0       	ldi	r22, 0x06	; 6
     f96:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
}
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <Reset_Calculator>:
static void Reset_Calculator(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	2e 97       	sbiw	r28, 0x0e	; 14
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
	    LCD_ClearScreen();
     fb4:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <LCD_ClearScreen>
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	a8 e4       	ldi	r26, 0x48	; 72
     fbe:	b2 e4       	ldi	r27, 0x42	; 66
     fc0:	8b 87       	std	Y+11, r24	; 0x0b
     fc2:	9c 87       	std	Y+12, r25	; 0x0c
     fc4:	ad 87       	std	Y+13, r26	; 0x0d
     fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fca:	7c 85       	ldd	r23, Y+12	; 0x0c
     fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fce:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	4a e7       	ldi	r20, 0x7A	; 122
     fd6:	53 e4       	ldi	r21, 0x43	; 67
     fd8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	8f 83       	std	Y+7, r24	; 0x07
     fe2:	98 87       	std	Y+8, r25	; 0x08
     fe4:	a9 87       	std	Y+9, r26	; 0x09
     fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe8:	6f 81       	ldd	r22, Y+7	; 0x07
     fea:	78 85       	ldd	r23, Y+8	; 0x08
     fec:	89 85       	ldd	r24, Y+9	; 0x09
     fee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e8       	ldi	r20, 0x80	; 128
     ff6:	5f e3       	ldi	r21, 0x3F	; 63
     ff8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
     ffc:	88 23       	and	r24, r24
     ffe:	2c f4       	brge	.+10     	; 0x100a <Reset_Calculator+0x6a>
		__ticks = 1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	3f c0       	rjmp	.+126    	; 0x1088 <Reset_Calculator+0xe8>
	else if (__tmp > 65535)
    100a:	6f 81       	ldd	r22, Y+7	; 0x07
    100c:	78 85       	ldd	r23, Y+8	; 0x08
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	3f ef       	ldi	r19, 0xFF	; 255
    1016:	4f e7       	ldi	r20, 0x7F	; 127
    1018:	57 e4       	ldi	r21, 0x47	; 71
    101a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    101e:	18 16       	cp	r1, r24
    1020:	4c f5       	brge	.+82     	; 0x1074 <Reset_Calculator+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1022:	6b 85       	ldd	r22, Y+11	; 0x0b
    1024:	7c 85       	ldd	r23, Y+12	; 0x0c
    1026:	8d 85       	ldd	r24, Y+13	; 0x0d
    1028:	9e 85       	ldd	r25, Y+14	; 0x0e
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e2       	ldi	r20, 0x20	; 32
    1030:	51 e4       	ldi	r21, 0x41	; 65
    1032:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	bc 01       	movw	r22, r24
    103c:	cd 01       	movw	r24, r26
    103e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	9e 83       	std	Y+6, r25	; 0x06
    1048:	8d 83       	std	Y+5, r24	; 0x05
    104a:	0f c0       	rjmp	.+30     	; 0x106a <Reset_Calculator+0xca>
    104c:	89 e1       	ldi	r24, 0x19	; 25
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9c 83       	std	Y+4, r25	; 0x04
    1052:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	9c 81       	ldd	r25, Y+4	; 0x04
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <Reset_Calculator+0xb8>
    105c:	9c 83       	std	Y+4, r25	; 0x04
    105e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	9e 83       	std	Y+6, r25	; 0x06
    1068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	69 f7       	brne	.-38     	; 0x104c <Reset_Calculator+0xac>
    1072:	14 c0       	rjmp	.+40     	; 0x109c <Reset_Calculator+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1074:	6f 81       	ldd	r22, Y+7	; 0x07
    1076:	78 85       	ldd	r23, Y+8	; 0x08
    1078:	89 85       	ldd	r24, Y+9	; 0x09
    107a:	9a 85       	ldd	r25, Y+10	; 0x0a
    107c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	8d 81       	ldd	r24, Y+5	; 0x05
    108a:	9e 81       	ldd	r25, Y+6	; 0x06
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	01 97       	sbiw	r24, 0x01	; 1
    1096:	f1 f7       	brne	.-4      	; 0x1094 <Reset_Calculator+0xf4>
    1098:	9a 83       	std	Y+2, r25	; 0x02
    109a:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(50);
		Initialize_Calculator();
    109c:	0e 94 a9 07 	call	0xf52	; 0xf52 <Initialize_Calculator>

}
    10a0:	2e 96       	adiw	r28, 0x0e	; 14
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <Interrupt_Init>:
static void Interrupt_Init()
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_INPUT);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	63 e0       	ldi	r22, 0x03	; 3
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
	MCUCSR&=~(1<<ISC2);
    10c4:	a4 e5       	ldi	r26, 0x54	; 84
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e4 e5       	ldi	r30, 0x54	; 84
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	8f 7b       	andi	r24, 0xBF	; 191
    10d0:	8c 93       	st	X, r24
	GICR|=(1<<INT2);
    10d2:	ab e5       	ldi	r26, 0x5B	; 91
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e5       	ldi	r30, 0x5B	; 91
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 62       	ori	r24, 0x20	; 32
    10de:	8c 93       	st	X, r24
	SREG|=(1<<7);
    10e0:	af e5       	ldi	r26, 0x5F	; 95
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ef e5       	ldi	r30, 0x5F	; 95
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 68       	ori	r24, 0x80	; 128
    10ec:	8c 93       	st	X, r24

}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <__vector_3>:
ISR( INT2_vect)
 {
    10f4:	1f 92       	push	r1
    10f6:	0f 92       	push	r0
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	0f 92       	push	r0
    10fc:	11 24       	eor	r1, r1
    10fe:	2f 93       	push	r18
    1100:	3f 93       	push	r19
    1102:	4f 93       	push	r20
    1104:	5f 93       	push	r21
    1106:	6f 93       	push	r22
    1108:	7f 93       	push	r23
    110a:	8f 93       	push	r24
    110c:	9f 93       	push	r25
    110e:	af 93       	push	r26
    1110:	bf 93       	push	r27
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
	Reset_Calculator();
    111e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Reset_Calculator>
 }
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <main>:

int main(void)
{
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	cb 56       	subi	r28, 0x6B	; 107
    1156:	d0 40       	sbci	r29, 0x00	; 0
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
	uint8 operation;
	uint8 count=0;
    1162:	fe 01       	movw	r30, r28
    1164:	e8 59       	subi	r30, 0x98	; 152
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	10 82       	st	Z, r1
	uint8 Equ='=';
    116a:	fe 01       	movw	r30, r28
    116c:	e9 59       	subi	r30, 0x99	; 153
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	8d e3       	ldi	r24, 0x3D	; 61
    1172:	80 83       	st	Z, r24
	float result=0;
    1174:	fe 01       	movw	r30, r28
    1176:	ed 59       	subi	r30, 0x9D	; 157
    1178:	ff 4f       	sbci	r31, 0xFF	; 255
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e0       	ldi	r26, 0x00	; 0
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	80 83       	st	Z, r24
    1184:	91 83       	std	Z+1, r25	; 0x01
    1186:	a2 83       	std	Z+2, r26	; 0x02
    1188:	b3 83       	std	Z+3, r27	; 0x03
	LCD_init();
    118a:	0e 94 46 1b 	call	0x368c	; 0x368c <LCD_init>
	Interrupt_Init();
    118e:	0e 94 59 08 	call	0x10b2	; 0x10b2 <Interrupt_Init>
	Initialize_Calculator();
    1192:	0e 94 a9 07 	call	0xf52	; 0xf52 <Initialize_Calculator>

	for(;;)
	{
		for(count=0;count<Arr_Size;count++)
    1196:	fe 01       	movw	r30, r28
    1198:	e8 59       	subi	r30, 0x98	; 152
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	10 82       	st	Z, r1
    119e:	02 c1       	rjmp	.+516    	; 0x13a4 <main+0x25c>
		{
		Move_Cursor(0,6+count);
    11a0:	fe 01       	movw	r30, r28
    11a2:	e8 59       	subi	r30, 0x98	; 152
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 81       	ld	r24, Z
    11a8:	98 2f       	mov	r25, r24
    11aa:	9a 5f       	subi	r25, 0xFA	; 250
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	69 2f       	mov	r22, r25
    11b0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
		num1[count]=GET_PressedKey();
    11b4:	fe 01       	movw	r30, r28
    11b6:	e8 59       	subi	r30, 0x98	; 152
    11b8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ba:	80 81       	ld	r24, Z
    11bc:	08 2f       	mov	r16, r24
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	50 e0       	ldi	r21, 0x00	; 0
    11cc:	c8 01       	movw	r24, r16
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	fc 01       	movw	r30, r24
    11d8:	ec 56       	subi	r30, 0x6C	; 108
    11da:	fe 4f       	sbci	r31, 0xFE	; 254
    11dc:	20 83       	st	Z, r18
    11de:	31 83       	std	Z+1, r19	; 0x01
    11e0:	42 83       	std	Z+2, r20	; 0x02
    11e2:	53 83       	std	Z+3, r21	; 0x03
		LCD_IntgerToString(num1[count]);
    11e4:	fe 01       	movw	r30, r28
    11e6:	e8 59       	subi	r30, 0x98	; 152
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	80 81       	ld	r24, Z
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	fc 01       	movw	r30, r24
    11fa:	ec 56       	subi	r30, 0x6C	; 108
    11fc:	fe 4f       	sbci	r31, 0xFE	; 254
    11fe:	80 81       	ld	r24, Z
    1200:	91 81       	ldd	r25, Z+1	; 0x01
    1202:	a2 81       	ldd	r26, Z+2	; 0x02
    1204:	b3 81       	ldd	r27, Z+3	; 0x03
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_IntgerToString>
    120e:	fe 01       	movw	r30, r28
    1210:	e1 5a       	subi	r30, 0xA1	; 161
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a1 ee       	ldi	r26, 0xE1	; 225
    121a:	b3 e4       	ldi	r27, 0x43	; 67
    121c:	80 83       	st	Z, r24
    121e:	91 83       	std	Z+1, r25	; 0x01
    1220:	a2 83       	std	Z+2, r26	; 0x02
    1222:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1224:	8e 01       	movw	r16, r28
    1226:	05 5a       	subi	r16, 0xA5	; 165
    1228:	1f 4f       	sbci	r17, 0xFF	; 255
    122a:	fe 01       	movw	r30, r28
    122c:	e1 5a       	subi	r30, 0xA1	; 161
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	60 81       	ld	r22, Z
    1232:	71 81       	ldd	r23, Z+1	; 0x01
    1234:	82 81       	ldd	r24, Z+2	; 0x02
    1236:	93 81       	ldd	r25, Z+3	; 0x03
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	4a e7       	ldi	r20, 0x7A	; 122
    123e:	53 e4       	ldi	r21, 0x43	; 67
    1240:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	f8 01       	movw	r30, r16
    124a:	80 83       	st	Z, r24
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	a2 83       	std	Z+2, r26	; 0x02
    1250:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1252:	fe 01       	movw	r30, r28
    1254:	e5 5a       	subi	r30, 0xA5	; 165
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	60 81       	ld	r22, Z
    125a:	71 81       	ldd	r23, Z+1	; 0x01
    125c:	82 81       	ldd	r24, Z+2	; 0x02
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e8       	ldi	r20, 0x80	; 128
    1266:	5f e3       	ldi	r21, 0x3F	; 63
    1268:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    126c:	88 23       	and	r24, r24
    126e:	44 f4       	brge	.+16     	; 0x1280 <main+0x138>
		__ticks = 1;
    1270:	fe 01       	movw	r30, r28
    1272:	e7 5a       	subi	r30, 0xA7	; 167
    1274:	ff 4f       	sbci	r31, 0xFF	; 255
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	91 83       	std	Z+1, r25	; 0x01
    127c:	80 83       	st	Z, r24
    127e:	64 c0       	rjmp	.+200    	; 0x1348 <main+0x200>
	else if (__tmp > 65535)
    1280:	fe 01       	movw	r30, r28
    1282:	e5 5a       	subi	r30, 0xA5	; 165
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	3f ef       	ldi	r19, 0xFF	; 255
    1292:	4f e7       	ldi	r20, 0x7F	; 127
    1294:	57 e4       	ldi	r21, 0x47	; 71
    1296:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    129a:	18 16       	cp	r1, r24
    129c:	0c f0       	brlt	.+2      	; 0x12a0 <main+0x158>
    129e:	43 c0       	rjmp	.+134    	; 0x1326 <main+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a0:	fe 01       	movw	r30, r28
    12a2:	e1 5a       	subi	r30, 0xA1	; 161
    12a4:	ff 4f       	sbci	r31, 0xFF	; 255
    12a6:	60 81       	ld	r22, Z
    12a8:	71 81       	ldd	r23, Z+1	; 0x01
    12aa:	82 81       	ldd	r24, Z+2	; 0x02
    12ac:	93 81       	ldd	r25, Z+3	; 0x03
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e2       	ldi	r20, 0x20	; 32
    12b4:	51 e4       	ldi	r21, 0x41	; 65
    12b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8e 01       	movw	r16, r28
    12c0:	07 5a       	subi	r16, 0xA7	; 167
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	f8 01       	movw	r30, r16
    12d2:	91 83       	std	Z+1, r25	; 0x01
    12d4:	80 83       	st	Z, r24
    12d6:	1f c0       	rjmp	.+62     	; 0x1316 <main+0x1ce>
    12d8:	fe 01       	movw	r30, r28
    12da:	e9 5a       	subi	r30, 0xA9	; 169
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	89 e1       	ldi	r24, 0x19	; 25
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
    12e6:	fe 01       	movw	r30, r28
    12e8:	e9 5a       	subi	r30, 0xA9	; 169
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	91 81       	ldd	r25, Z+1	; 0x01
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <main+0x1a8>
    12f4:	fe 01       	movw	r30, r28
    12f6:	e9 5a       	subi	r30, 0xA9	; 169
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	91 83       	std	Z+1, r25	; 0x01
    12fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	de 01       	movw	r26, r28
    1300:	a7 5a       	subi	r26, 0xA7	; 167
    1302:	bf 4f       	sbci	r27, 0xFF	; 255
    1304:	fe 01       	movw	r30, r28
    1306:	e7 5a       	subi	r30, 0xA7	; 167
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	11 96       	adiw	r26, 0x01	; 1
    1312:	9c 93       	st	X, r25
    1314:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1316:	fe 01       	movw	r30, r28
    1318:	e7 5a       	subi	r30, 0xA7	; 167
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	80 81       	ld	r24, Z
    131e:	91 81       	ldd	r25, Z+1	; 0x01
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	d1 f6       	brne	.-76     	; 0x12d8 <main+0x190>
    1324:	27 c0       	rjmp	.+78     	; 0x1374 <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	8e 01       	movw	r16, r28
    1328:	07 5a       	subi	r16, 0xA7	; 167
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	fe 01       	movw	r30, r28
    132e:	e5 5a       	subi	r30, 0xA5	; 165
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	60 81       	ld	r22, Z
    1334:	71 81       	ldd	r23, Z+1	; 0x01
    1336:	82 81       	ldd	r24, Z+2	; 0x02
    1338:	93 81       	ldd	r25, Z+3	; 0x03
    133a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	f8 01       	movw	r30, r16
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	de 01       	movw	r26, r28
    134a:	ab 5a       	subi	r26, 0xAB	; 171
    134c:	bf 4f       	sbci	r27, 0xFF	; 255
    134e:	fe 01       	movw	r30, r28
    1350:	e7 5a       	subi	r30, 0xA7	; 167
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	80 81       	ld	r24, Z
    1356:	91 81       	ldd	r25, Z+1	; 0x01
    1358:	8d 93       	st	X+, r24
    135a:	9c 93       	st	X, r25
    135c:	fe 01       	movw	r30, r28
    135e:	eb 5a       	subi	r30, 0xAB	; 171
    1360:	ff 4f       	sbci	r31, 0xFF	; 255
    1362:	80 81       	ld	r24, Z
    1364:	91 81       	ldd	r25, Z+1	; 0x01
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <main+0x21e>
    136a:	fe 01       	movw	r30, r28
    136c:	eb 5a       	subi	r30, 0xAB	; 171
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
		_delay_ms(450);
		if(Equ==GET_PressedKey())
    1374:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    1378:	fe 01       	movw	r30, r28
    137a:	e9 59       	subi	r30, 0x99	; 153
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	90 81       	ld	r25, Z
    1380:	89 17       	cp	r24, r25
    1382:	39 f4       	brne	.+14     	; 0x1392 <main+0x24a>
		{
			count_glo=count;
    1384:	fe 01       	movw	r30, r28
    1386:	e8 59       	subi	r30, 0x98	; 152
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	80 81       	ld	r24, Z
    138c:	80 93 92 01 	sts	0x0192, r24
    1390:	10 c0       	rjmp	.+32     	; 0x13b2 <main+0x26a>
	Interrupt_Init();
	Initialize_Calculator();

	for(;;)
	{
		for(count=0;count<Arr_Size;count++)
    1392:	de 01       	movw	r26, r28
    1394:	a8 59       	subi	r26, 0x98	; 152
    1396:	bf 4f       	sbci	r27, 0xFF	; 255
    1398:	fe 01       	movw	r30, r28
    139a:	e8 59       	subi	r30, 0x98	; 152
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	8f 5f       	subi	r24, 0xFF	; 255
    13a2:	8c 93       	st	X, r24
    13a4:	fe 01       	movw	r30, r28
    13a6:	e8 59       	subi	r30, 0x98	; 152
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	80 81       	ld	r24, Z
    13ac:	85 30       	cpi	r24, 0x05	; 5
    13ae:	08 f4       	brcc	.+2      	; 0x13b2 <main+0x26a>
    13b0:	f7 ce       	rjmp	.-530    	; 0x11a0 <main+0x58>
    13b2:	fe 01       	movw	r30, r28
    13b4:	ef 5a       	subi	r30, 0xAF	; 175
    13b6:	ff 4f       	sbci	r31, 0xFF	; 255
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	aa e7       	ldi	r26, 0x7A	; 122
    13be:	b3 e4       	ldi	r27, 0x43	; 67
    13c0:	80 83       	st	Z, r24
    13c2:	91 83       	std	Z+1, r25	; 0x01
    13c4:	a2 83       	std	Z+2, r26	; 0x02
    13c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	8e 01       	movw	r16, r28
    13ca:	03 5b       	subi	r16, 0xB3	; 179
    13cc:	1f 4f       	sbci	r17, 0xFF	; 255
    13ce:	fe 01       	movw	r30, r28
    13d0:	ef 5a       	subi	r30, 0xAF	; 175
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	60 81       	ld	r22, Z
    13d6:	71 81       	ldd	r23, Z+1	; 0x01
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	93 81       	ldd	r25, Z+3	; 0x03
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	4a e7       	ldi	r20, 0x7A	; 122
    13e2:	53 e4       	ldi	r21, 0x43	; 67
    13e4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	f8 01       	movw	r30, r16
    13ee:	80 83       	st	Z, r24
    13f0:	91 83       	std	Z+1, r25	; 0x01
    13f2:	a2 83       	std	Z+2, r26	; 0x02
    13f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13f6:	fe 01       	movw	r30, r28
    13f8:	e3 5b       	subi	r30, 0xB3	; 179
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	60 81       	ld	r22, Z
    13fe:	71 81       	ldd	r23, Z+1	; 0x01
    1400:	82 81       	ldd	r24, Z+2	; 0x02
    1402:	93 81       	ldd	r25, Z+3	; 0x03
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e8       	ldi	r20, 0x80	; 128
    140a:	5f e3       	ldi	r21, 0x3F	; 63
    140c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1410:	88 23       	and	r24, r24
    1412:	44 f4       	brge	.+16     	; 0x1424 <main+0x2dc>
		__ticks = 1;
    1414:	fe 01       	movw	r30, r28
    1416:	e5 5b       	subi	r30, 0xB5	; 181
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	91 83       	std	Z+1, r25	; 0x01
    1420:	80 83       	st	Z, r24
    1422:	64 c0       	rjmp	.+200    	; 0x14ec <main+0x3a4>
	else if (__tmp > 65535)
    1424:	fe 01       	movw	r30, r28
    1426:	e3 5b       	subi	r30, 0xB3	; 179
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	60 81       	ld	r22, Z
    142c:	71 81       	ldd	r23, Z+1	; 0x01
    142e:	82 81       	ldd	r24, Z+2	; 0x02
    1430:	93 81       	ldd	r25, Z+3	; 0x03
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	0c f0       	brlt	.+2      	; 0x1444 <main+0x2fc>
    1442:	43 c0       	rjmp	.+134    	; 0x14ca <main+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1444:	fe 01       	movw	r30, r28
    1446:	ef 5a       	subi	r30, 0xAF	; 175
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e2       	ldi	r20, 0x20	; 32
    1458:	51 e4       	ldi	r21, 0x41	; 65
    145a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8e 01       	movw	r16, r28
    1464:	05 5b       	subi	r16, 0xB5	; 181
    1466:	1f 4f       	sbci	r17, 0xFF	; 255
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	f8 01       	movw	r30, r16
    1476:	91 83       	std	Z+1, r25	; 0x01
    1478:	80 83       	st	Z, r24
    147a:	1f c0       	rjmp	.+62     	; 0x14ba <main+0x372>
    147c:	fe 01       	movw	r30, r28
    147e:	e7 5b       	subi	r30, 0xB7	; 183
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	89 e1       	ldi	r24, 0x19	; 25
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	80 83       	st	Z, r24
    148a:	fe 01       	movw	r30, r28
    148c:	e7 5b       	subi	r30, 0xB7	; 183
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	91 81       	ldd	r25, Z+1	; 0x01
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <main+0x34c>
    1498:	fe 01       	movw	r30, r28
    149a:	e7 5b       	subi	r30, 0xB7	; 183
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	91 83       	std	Z+1, r25	; 0x01
    14a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	de 01       	movw	r26, r28
    14a4:	a5 5b       	subi	r26, 0xB5	; 181
    14a6:	bf 4f       	sbci	r27, 0xFF	; 255
    14a8:	fe 01       	movw	r30, r28
    14aa:	e5 5b       	subi	r30, 0xB5	; 181
    14ac:	ff 4f       	sbci	r31, 0xFF	; 255
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	9c 93       	st	X, r25
    14b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ba:	fe 01       	movw	r30, r28
    14bc:	e5 5b       	subi	r30, 0xB5	; 181
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	80 81       	ld	r24, Z
    14c2:	91 81       	ldd	r25, Z+1	; 0x01
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	d1 f6       	brne	.-76     	; 0x147c <main+0x334>
    14c8:	28 c0       	rjmp	.+80     	; 0x151a <main+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ca:	8e 01       	movw	r16, r28
    14cc:	05 5b       	subi	r16, 0xB5	; 181
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	fe 01       	movw	r30, r28
    14d2:	e3 5b       	subi	r30, 0xB3	; 179
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	60 81       	ld	r22, Z
    14d8:	71 81       	ldd	r23, Z+1	; 0x01
    14da:	82 81       	ldd	r24, Z+2	; 0x02
    14dc:	93 81       	ldd	r25, Z+3	; 0x03
    14de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	f8 01       	movw	r30, r16
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
    14ec:	de 01       	movw	r26, r28
    14ee:	a9 5b       	subi	r26, 0xB9	; 185
    14f0:	bf 4f       	sbci	r27, 0xFF	; 255
    14f2:	fe 01       	movw	r30, r28
    14f4:	e5 5b       	subi	r30, 0xB5	; 181
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	11 96       	adiw	r26, 0x01	; 1
    14fe:	9c 93       	st	X, r25
    1500:	8e 93       	st	-X, r24
    1502:	fe 01       	movw	r30, r28
    1504:	e9 5b       	subi	r30, 0xB9	; 185
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <main+0x3c4>
    1510:	fe 01       	movw	r30, r28
    1512:	e9 5b       	subi	r30, 0xB9	; 185
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
			break;
		}
		}
		_delay_ms(250);

		for(count=0;count<Arr_Size;count++)
    151a:	fe 01       	movw	r30, r28
    151c:	e8 59       	subi	r30, 0x98	; 152
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	10 82       	st	Z, r1
    1522:	d4 c0       	rjmp	.+424    	; 0x16cc <main+0x584>
		{

		Move_Cursor(1,6+count);
    1524:	fe 01       	movw	r30, r28
    1526:	e8 59       	subi	r30, 0x98	; 152
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	80 81       	ld	r24, Z
    152c:	98 2f       	mov	r25, r24
    152e:	9a 5f       	subi	r25, 0xFA	; 250
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	69 2f       	mov	r22, r25
    1534:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
		num2[count]=GET_PressedKey();
    1538:	fe 01       	movw	r30, r28
    153a:	e8 59       	subi	r30, 0x98	; 152
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	08 2f       	mov	r16, r24
    1542:	10 e0       	ldi	r17, 0x00	; 0
    1544:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	c8 01       	movw	r24, r16
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	fc 01       	movw	r30, r24
    155c:	e8 55       	subi	r30, 0x58	; 88
    155e:	fe 4f       	sbci	r31, 0xFE	; 254
    1560:	20 83       	st	Z, r18
    1562:	31 83       	std	Z+1, r19	; 0x01
    1564:	42 83       	std	Z+2, r20	; 0x02
    1566:	53 83       	std	Z+3, r21	; 0x03
		LCD_IntgerToString(num2[count]);
    1568:	fe 01       	movw	r30, r28
    156a:	e8 59       	subi	r30, 0x98	; 152
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	fc 01       	movw	r30, r24
    157e:	e8 55       	subi	r30, 0x58	; 88
    1580:	fe 4f       	sbci	r31, 0xFE	; 254
    1582:	80 81       	ld	r24, Z
    1584:	91 81       	ldd	r25, Z+1	; 0x01
    1586:	a2 81       	ldd	r26, Z+2	; 0x02
    1588:	b3 81       	ldd	r27, Z+3	; 0x03
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_IntgerToString>
    1592:	fe 01       	movw	r30, r28
    1594:	ed 5b       	subi	r30, 0xBD	; 189
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a1 ee       	ldi	r26, 0xE1	; 225
    159e:	b3 e4       	ldi	r27, 0x43	; 67
    15a0:	80 83       	st	Z, r24
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	a2 83       	std	Z+2, r26	; 0x02
    15a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a8:	8e 01       	movw	r16, r28
    15aa:	01 5c       	subi	r16, 0xC1	; 193
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	ed 5b       	subi	r30, 0xBD	; 189
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	60 81       	ld	r22, Z
    15b6:	71 81       	ldd	r23, Z+1	; 0x01
    15b8:	82 81       	ldd	r24, Z+2	; 0x02
    15ba:	93 81       	ldd	r25, Z+3	; 0x03
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	4a e7       	ldi	r20, 0x7A	; 122
    15c2:	53 e4       	ldi	r21, 0x43	; 67
    15c4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	f8 01       	movw	r30, r16
    15ce:	80 83       	st	Z, r24
    15d0:	91 83       	std	Z+1, r25	; 0x01
    15d2:	a2 83       	std	Z+2, r26	; 0x02
    15d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15d6:	fe 01       	movw	r30, r28
    15d8:	ff 96       	adiw	r30, 0x3f	; 63
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e8       	ldi	r20, 0x80	; 128
    15e8:	5f e3       	ldi	r21, 0x3F	; 63
    15ea:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    15ee:	88 23       	and	r24, r24
    15f0:	2c f4       	brge	.+10     	; 0x15fc <main+0x4b4>
		__ticks = 1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9e af       	std	Y+62, r25	; 0x3e
    15f8:	8d af       	std	Y+61, r24	; 0x3d
    15fa:	46 c0       	rjmp	.+140    	; 0x1688 <main+0x540>
	else if (__tmp > 65535)
    15fc:	fe 01       	movw	r30, r28
    15fe:	ff 96       	adiw	r30, 0x3f	; 63
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	3f ef       	ldi	r19, 0xFF	; 255
    160c:	4f e7       	ldi	r20, 0x7F	; 127
    160e:	57 e4       	ldi	r21, 0x47	; 71
    1610:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1614:	18 16       	cp	r1, r24
    1616:	64 f5       	brge	.+88     	; 0x1670 <main+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1618:	fe 01       	movw	r30, r28
    161a:	ed 5b       	subi	r30, 0xBD	; 189
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	60 81       	ld	r22, Z
    1620:	71 81       	ldd	r23, Z+1	; 0x01
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e2       	ldi	r20, 0x20	; 32
    162c:	51 e4       	ldi	r21, 0x41	; 65
    162e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9e af       	std	Y+62, r25	; 0x3e
    1644:	8d af       	std	Y+61, r24	; 0x3d
    1646:	0f c0       	rjmp	.+30     	; 0x1666 <main+0x51e>
    1648:	89 e1       	ldi	r24, 0x19	; 25
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9c af       	std	Y+60, r25	; 0x3c
    164e:	8b af       	std	Y+59, r24	; 0x3b
    1650:	8b ad       	ldd	r24, Y+59	; 0x3b
    1652:	9c ad       	ldd	r25, Y+60	; 0x3c
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <main+0x50c>
    1658:	9c af       	std	Y+60, r25	; 0x3c
    165a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165c:	8d ad       	ldd	r24, Y+61	; 0x3d
    165e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	9e af       	std	Y+62, r25	; 0x3e
    1664:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1666:	8d ad       	ldd	r24, Y+61	; 0x3d
    1668:	9e ad       	ldd	r25, Y+62	; 0x3e
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	69 f7       	brne	.-38     	; 0x1648 <main+0x500>
    166e:	16 c0       	rjmp	.+44     	; 0x169c <main+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1670:	fe 01       	movw	r30, r28
    1672:	ff 96       	adiw	r30, 0x3f	; 63
    1674:	60 81       	ld	r22, Z
    1676:	71 81       	ldd	r23, Z+1	; 0x01
    1678:	82 81       	ldd	r24, Z+2	; 0x02
    167a:	93 81       	ldd	r25, Z+3	; 0x03
    167c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	9e af       	std	Y+62, r25	; 0x3e
    1686:	8d af       	std	Y+61, r24	; 0x3d
    1688:	8d ad       	ldd	r24, Y+61	; 0x3d
    168a:	9e ad       	ldd	r25, Y+62	; 0x3e
    168c:	9a af       	std	Y+58, r25	; 0x3a
    168e:	89 af       	std	Y+57, r24	; 0x39
    1690:	89 ad       	ldd	r24, Y+57	; 0x39
    1692:	9a ad       	ldd	r25, Y+58	; 0x3a
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <main+0x54c>
    1698:	9a af       	std	Y+58, r25	; 0x3a
    169a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(450);
		if(Equ==GET_PressedKey())
    169c:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    16a0:	fe 01       	movw	r30, r28
    16a2:	e9 59       	subi	r30, 0x99	; 153
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	90 81       	ld	r25, Z
    16a8:	89 17       	cp	r24, r25
    16aa:	39 f4       	brne	.+14     	; 0x16ba <main+0x572>
		{
			count_glo_2=count;
    16ac:	fe 01       	movw	r30, r28
    16ae:	e8 59       	subi	r30, 0x98	; 152
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	80 81       	ld	r24, Z
    16b4:	80 93 93 01 	sts	0x0193, r24
    16b8:	10 c0       	rjmp	.+32     	; 0x16da <main+0x592>
			break;
		}
		}
		_delay_ms(250);

		for(count=0;count<Arr_Size;count++)
    16ba:	de 01       	movw	r26, r28
    16bc:	a8 59       	subi	r26, 0x98	; 152
    16be:	bf 4f       	sbci	r27, 0xFF	; 255
    16c0:	fe 01       	movw	r30, r28
    16c2:	e8 59       	subi	r30, 0x98	; 152
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 5f       	subi	r24, 0xFF	; 255
    16ca:	8c 93       	st	X, r24
    16cc:	fe 01       	movw	r30, r28
    16ce:	e8 59       	subi	r30, 0x98	; 152
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	80 81       	ld	r24, Z
    16d4:	85 30       	cpi	r24, 0x05	; 5
    16d6:	08 f4       	brcc	.+2      	; 0x16da <main+0x592>
    16d8:	25 cf       	rjmp	.-438    	; 0x1524 <main+0x3dc>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	aa ef       	ldi	r26, 0xFA	; 250
    16e0:	b3 e4       	ldi	r27, 0x43	; 67
    16e2:	8d ab       	std	Y+53, r24	; 0x35
    16e4:	9e ab       	std	Y+54, r25	; 0x36
    16e6:	af ab       	std	Y+55, r26	; 0x37
    16e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6d a9       	ldd	r22, Y+53	; 0x35
    16ec:	7e a9       	ldd	r23, Y+54	; 0x36
    16ee:	8f a9       	ldd	r24, Y+55	; 0x37
    16f0:	98 ad       	ldd	r25, Y+56	; 0x38
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a e7       	ldi	r20, 0x7A	; 122
    16f8:	53 e4       	ldi	r21, 0x43	; 67
    16fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	89 ab       	std	Y+49, r24	; 0x31
    1704:	9a ab       	std	Y+50, r25	; 0x32
    1706:	ab ab       	std	Y+51, r26	; 0x33
    1708:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    170a:	69 a9       	ldd	r22, Y+49	; 0x31
    170c:	7a a9       	ldd	r23, Y+50	; 0x32
    170e:	8b a9       	ldd	r24, Y+51	; 0x33
    1710:	9c a9       	ldd	r25, Y+52	; 0x34
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <main+0x5e4>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	98 ab       	std	Y+48, r25	; 0x30
    1728:	8f a7       	std	Y+47, r24	; 0x2f
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <main+0x662>
	else if (__tmp > 65535)
    172c:	69 a9       	ldd	r22, Y+49	; 0x31
    172e:	7a a9       	ldd	r23, Y+50	; 0x32
    1730:	8b a9       	ldd	r24, Y+51	; 0x33
    1732:	9c a9       	ldd	r25, Y+52	; 0x34
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <main+0x64e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6d a9       	ldd	r22, Y+53	; 0x35
    1746:	7e a9       	ldd	r23, Y+54	; 0x36
    1748:	8f a9       	ldd	r24, Y+55	; 0x37
    174a:	98 ad       	ldd	r25, Y+56	; 0x38
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	98 ab       	std	Y+48, r25	; 0x30
    176a:	8f a7       	std	Y+47, r24	; 0x2f
    176c:	0f c0       	rjmp	.+30     	; 0x178c <main+0x644>
    176e:	89 e1       	ldi	r24, 0x19	; 25
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9e a7       	std	Y+46, r25	; 0x2e
    1774:	8d a7       	std	Y+45, r24	; 0x2d
    1776:	8d a5       	ldd	r24, Y+45	; 0x2d
    1778:	9e a5       	ldd	r25, Y+46	; 0x2e
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <main+0x632>
    177e:	9e a7       	std	Y+46, r25	; 0x2e
    1780:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8f a5       	ldd	r24, Y+47	; 0x2f
    1784:	98 a9       	ldd	r25, Y+48	; 0x30
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	98 ab       	std	Y+48, r25	; 0x30
    178a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8f a5       	ldd	r24, Y+47	; 0x2f
    178e:	98 a9       	ldd	r25, Y+48	; 0x30
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <main+0x626>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <main+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	69 a9       	ldd	r22, Y+49	; 0x31
    1798:	7a a9       	ldd	r23, Y+50	; 0x32
    179a:	8b a9       	ldd	r24, Y+51	; 0x33
    179c:	9c a9       	ldd	r25, Y+52	; 0x34
    179e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	98 ab       	std	Y+48, r25	; 0x30
    17a8:	8f a7       	std	Y+47, r24	; 0x2f
    17aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ac:	98 a9       	ldd	r25, Y+48	; 0x30
    17ae:	9c a7       	std	Y+44, r25	; 0x2c
    17b0:	8b a7       	std	Y+43, r24	; 0x2b
    17b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    17b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <main+0x66e>
    17ba:	9c a7       	std	Y+44, r25	; 0x2c
    17bc:	8b a7       	std	Y+43, r24	; 0x2b
		}

		}
		_delay_ms(500);

		operation=GET_PressedKey();
    17be:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    17c2:	fe 01       	movw	r30, r28
    17c4:	e7 59       	subi	r30, 0x97	; 151
    17c6:	ff 4f       	sbci	r31, 0xFF	; 255
    17c8:	80 83       	st	Z, r24
		Move_Cursor(2,13);
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	6d e0       	ldi	r22, 0x0D	; 13
    17ce:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
		LCD_DisplayCharchter(operation);
    17d2:	fe 01       	movw	r30, r28
    17d4:	e7 59       	subi	r30, 0x97	; 151
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	0e 94 57 19 	call	0x32ae	; 0x32ae <LCD_DisplayCharchter>
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	90 e8       	ldi	r25, 0x80	; 128
    17e2:	a9 e0       	ldi	r26, 0x09	; 9
    17e4:	b4 e4       	ldi	r27, 0x44	; 68
    17e6:	8f a3       	std	Y+39, r24	; 0x27
    17e8:	98 a7       	std	Y+40, r25	; 0x28
    17ea:	a9 a7       	std	Y+41, r26	; 0x29
    17ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	6f a1       	ldd	r22, Y+39	; 0x27
    17f0:	78 a5       	ldd	r23, Y+40	; 0x28
    17f2:	89 a5       	ldd	r24, Y+41	; 0x29
    17f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	4a e7       	ldi	r20, 0x7A	; 122
    17fc:	53 e4       	ldi	r21, 0x43	; 67
    17fe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8b a3       	std	Y+35, r24	; 0x23
    1808:	9c a3       	std	Y+36, r25	; 0x24
    180a:	ad a3       	std	Y+37, r26	; 0x25
    180c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    180e:	6b a1       	ldd	r22, Y+35	; 0x23
    1810:	7c a1       	ldd	r23, Y+36	; 0x24
    1812:	8d a1       	ldd	r24, Y+37	; 0x25
    1814:	9e a1       	ldd	r25, Y+38	; 0x26
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <main+0x6e8>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <main+0x766>
	else if (__tmp > 65535)
    1830:	6b a1       	ldd	r22, Y+35	; 0x23
    1832:	7c a1       	ldd	r23, Y+36	; 0x24
    1834:	8d a1       	ldd	r24, Y+37	; 0x25
    1836:	9e a1       	ldd	r25, Y+38	; 0x26
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	57 e4       	ldi	r21, 0x47	; 71
    1840:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <main+0x752>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	6f a1       	ldd	r22, Y+39	; 0x27
    184a:	78 a5       	ldd	r23, Y+40	; 0x28
    184c:	89 a5       	ldd	r24, Y+41	; 0x29
    184e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9a a3       	std	Y+34, r25	; 0x22
    186e:	89 a3       	std	Y+33, r24	; 0x21
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <main+0x748>
    1872:	89 e1       	ldi	r24, 0x19	; 25
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	98 a3       	std	Y+32, r25	; 0x20
    1878:	8f 8f       	std	Y+31, r24	; 0x1f
    187a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187c:	98 a1       	ldd	r25, Y+32	; 0x20
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <main+0x736>
    1882:	98 a3       	std	Y+32, r25	; 0x20
    1884:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	89 a1       	ldd	r24, Y+33	; 0x21
    1888:	9a a1       	ldd	r25, Y+34	; 0x22
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	9a a3       	std	Y+34, r25	; 0x22
    188e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	89 a1       	ldd	r24, Y+33	; 0x21
    1892:	9a a1       	ldd	r25, Y+34	; 0x22
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <main+0x72a>
    1898:	14 c0       	rjmp	.+40     	; 0x18c2 <main+0x77a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	6b a1       	ldd	r22, Y+35	; 0x23
    189c:	7c a1       	ldd	r23, Y+36	; 0x24
    189e:	8d a1       	ldd	r24, Y+37	; 0x25
    18a0:	9e a1       	ldd	r25, Y+38	; 0x26
    18a2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9a a3       	std	Y+34, r25	; 0x22
    18ac:	89 a3       	std	Y+33, r24	; 0x21
    18ae:	89 a1       	ldd	r24, Y+33	; 0x21
    18b0:	9a a1       	ldd	r25, Y+34	; 0x22
    18b2:	9e 8f       	std	Y+30, r25	; 0x1e
    18b4:	8d 8f       	std	Y+29, r24	; 0x1d
    18b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <main+0x772>
    18be:	9e 8f       	std	Y+30, r25	; 0x1e
    18c0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(550);

		switch(operation)
    18c2:	fe 01       	movw	r30, r28
    18c4:	e7 59       	subi	r30, 0x97	; 151
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	ac 96       	adiw	r28, 0x2c	; 44
    18d0:	3f af       	std	Y+63, r19	; 0x3f
    18d2:	2e af       	std	Y+62, r18	; 0x3e
    18d4:	ac 97       	sbiw	r28, 0x2c	; 44
    18d6:	ac 96       	adiw	r28, 0x2c	; 44
    18d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    18da:	9f ad       	ldd	r25, Y+63	; 0x3f
    18dc:	ac 97       	sbiw	r28, 0x2c	; 44
    18de:	8b 32       	cpi	r24, 0x2B	; 43
    18e0:	91 05       	cpc	r25, r1
    18e2:	01 f1       	breq	.+64     	; 0x1924 <main+0x7dc>
    18e4:	ac 96       	adiw	r28, 0x2c	; 44
    18e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    18e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    18ea:	ac 97       	sbiw	r28, 0x2c	; 44
    18ec:	ec 32       	cpi	r30, 0x2C	; 44
    18ee:	f1 05       	cpc	r31, r1
    18f0:	4c f4       	brge	.+18     	; 0x1904 <main+0x7bc>
    18f2:	ac 96       	adiw	r28, 0x2c	; 44
    18f4:	2e ad       	ldd	r18, Y+62	; 0x3e
    18f6:	3f ad       	ldd	r19, Y+63	; 0x3f
    18f8:	ac 97       	sbiw	r28, 0x2c	; 44
    18fa:	2a 32       	cpi	r18, 0x2A	; 42
    18fc:	31 05       	cpc	r19, r1
    18fe:	09 f4       	brne	.+2      	; 0x1902 <main+0x7ba>
    1900:	6f c0       	rjmp	.+222    	; 0x19e0 <main+0x898>
    1902:	49 cc       	rjmp	.-1902   	; 0x1196 <main+0x4e>
    1904:	ac 96       	adiw	r28, 0x2c	; 44
    1906:	8e ad       	ldd	r24, Y+62	; 0x3e
    1908:	9f ad       	ldd	r25, Y+63	; 0x3f
    190a:	ac 97       	sbiw	r28, 0x2c	; 44
    190c:	8d 32       	cpi	r24, 0x2D	; 45
    190e:	91 05       	cpc	r25, r1
    1910:	c1 f1       	breq	.+112    	; 0x1982 <main+0x83a>
    1912:	ac 96       	adiw	r28, 0x2c	; 44
    1914:	ee ad       	ldd	r30, Y+62	; 0x3e
    1916:	ff ad       	ldd	r31, Y+63	; 0x3f
    1918:	ac 97       	sbiw	r28, 0x2c	; 44
    191a:	ef 32       	cpi	r30, 0x2F	; 47
    191c:	f1 05       	cpc	r31, r1
    191e:	09 f4       	brne	.+2      	; 0x1922 <main+0x7da>
    1920:	8e c0       	rjmp	.+284    	; 0x1a3e <main+0x8f6>
    1922:	39 cc       	rjmp	.-1934   	; 0x1196 <main+0x4e>
		{
		case '+':
			if(Equ==GET_PressedKey())
    1924:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    1928:	fe 01       	movw	r30, r28
    192a:	e9 59       	subi	r30, 0x99	; 153
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	90 81       	ld	r25, Z
    1930:	89 17       	cp	r24, r25
    1932:	09 f0       	breq	.+2      	; 0x1936 <main+0x7ee>
    1934:	30 cc       	rjmp	.-1952   	; 0x1196 <main+0x4e>
			{
				Move_Cursor(3,8);
    1936:	83 e0       	ldi	r24, 0x03	; 3
    1938:	68 e0       	ldi	r22, 0x08	; 8
    193a:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
				result=Sum_Function();
    193e:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <Sum_Function>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	8e 01       	movw	r16, r28
    1948:	0d 59       	subi	r16, 0x9D	; 157
    194a:	1f 4f       	sbci	r17, 0xFF	; 255
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	f8 01       	movw	r30, r16
    195a:	80 83       	st	Z, r24
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	a2 83       	std	Z+2, r26	; 0x02
    1960:	b3 83       	std	Z+3, r27	; 0x03
				LCD_IntgerToString(result);
    1962:	fe 01       	movw	r30, r28
    1964:	ed 59       	subi	r30, 0x9D	; 157
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	bc 01       	movw	r22, r24
    197a:	cd 01       	movw	r24, r26
    197c:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_IntgerToString>
    1980:	0a cc       	rjmp	.-2028   	; 0x1196 <main+0x4e>
			}
			break;
		case '-':
			if(Equ==GET_PressedKey())
    1982:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    1986:	fe 01       	movw	r30, r28
    1988:	e9 59       	subi	r30, 0x99	; 153
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	90 81       	ld	r25, Z
    198e:	89 17       	cp	r24, r25
    1990:	09 f0       	breq	.+2      	; 0x1994 <main+0x84c>
    1992:	01 cc       	rjmp	.-2046   	; 0x1196 <main+0x4e>
			{
				Move_Cursor(3,8);
    1994:	83 e0       	ldi	r24, 0x03	; 3
    1996:	68 e0       	ldi	r22, 0x08	; 8
    1998:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
				result=Minus_Function();
    199c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <Minus_Function>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	8e 01       	movw	r16, r28
    19a6:	0d 59       	subi	r16, 0x9D	; 157
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	f8 01       	movw	r30, r16
    19b8:	80 83       	st	Z, r24
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	b3 83       	std	Z+3, r27	; 0x03
				LCD_IntgerToString(result);
    19c0:	fe 01       	movw	r30, r28
    19c2:	ed 59       	subi	r30, 0x9D	; 157
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	60 81       	ld	r22, Z
    19c8:	71 81       	ldd	r23, Z+1	; 0x01
    19ca:	82 81       	ldd	r24, Z+2	; 0x02
    19cc:	93 81       	ldd	r25, Z+3	; 0x03
    19ce:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_IntgerToString>
    19de:	db cb       	rjmp	.-2122   	; 0x1196 <main+0x4e>
			}
			break;

		case '*':
			if(Equ==GET_PressedKey())
    19e0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    19e4:	fe 01       	movw	r30, r28
    19e6:	e9 59       	subi	r30, 0x99	; 153
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	90 81       	ld	r25, Z
    19ec:	89 17       	cp	r24, r25
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <main+0x8aa>
    19f0:	d2 cb       	rjmp	.-2140   	; 0x1196 <main+0x4e>
			{
				Move_Cursor(3,8);
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	68 e0       	ldi	r22, 0x08	; 8
    19f6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
				result=Multiplay_Function();
    19fa:	0e 94 26 11 	call	0x224c	; 0x224c <Multiplay_Function>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	8e 01       	movw	r16, r28
    1a04:	0d 59       	subi	r16, 0x9D	; 157
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	f8 01       	movw	r30, r16
    1a16:	80 83       	st	Z, r24
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	a2 83       	std	Z+2, r26	; 0x02
    1a1c:	b3 83       	std	Z+3, r27	; 0x03
				LCD_IntgerToString(result);
    1a1e:	fe 01       	movw	r30, r28
    1a20:	ed 59       	subi	r30, 0x9D	; 157
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	60 81       	ld	r22, Z
    1a26:	71 81       	ldd	r23, Z+1	; 0x01
    1a28:	82 81       	ldd	r24, Z+2	; 0x02
    1a2a:	93 81       	ldd	r25, Z+3	; 0x03
    1a2c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <LCD_IntgerToString>
    1a3c:	ac cb       	rjmp	.-2216   	; 0x1196 <main+0x4e>
			}
			break;
		case '/':
			if(Equ==GET_PressedKey())
    1a3e:	0e 94 c3 1c 	call	0x3986	; 0x3986 <GET_PressedKey>
    1a42:	fe 01       	movw	r30, r28
    1a44:	e9 59       	subi	r30, 0x99	; 153
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	90 81       	ld	r25, Z
    1a4a:	89 17       	cp	r24, r25
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <main+0x908>
    1a4e:	a3 cb       	rjmp	.-2234   	; 0x1196 <main+0x4e>
			{
				Move_Cursor(3,8);
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	68 e0       	ldi	r22, 0x08	; 8
    1a54:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
				result=(float)Division_Function();
    1a58:	0e 94 94 12 	call	0x2528	; 0x2528 <Division_Function>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	fe 01       	movw	r30, r28
    1a62:	ed 59       	subi	r30, 0x9D	; 157
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	80 83       	st	Z, r24
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	a2 83       	std	Z+2, r26	; 0x02
    1a6c:	b3 83       	std	Z+3, r27	; 0x03
				if(result=='e')
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ed 59       	subi	r30, 0x9D	; 157
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4a ec       	ldi	r20, 0xCA	; 202
    1a82:	52 e4       	ldi	r21, 0x42	; 66
    1a84:	0e 94 42 04 	call	0x884	; 0x884 <__eqsf2>
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <main+0x946>
    1a8c:	ef c0       	rjmp	.+478    	; 0x1c6c <main+0xb24>
				{
					 LCD_ClearScreen();
    1a8e:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <LCD_ClearScreen>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e2       	ldi	r26, 0x20	; 32
    1a98:	b2 e4       	ldi	r27, 0x42	; 66
    1a9a:	89 8f       	std	Y+25, r24	; 0x19
    1a9c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a9e:	ab 8f       	std	Y+27, r26	; 0x1b
    1aa0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa2:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	4a e7       	ldi	r20, 0x7A	; 122
    1ab0:	53 e4       	ldi	r21, 0x43	; 67
    1ab2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	8d 8b       	std	Y+21, r24	; 0x15
    1abc:	9e 8b       	std	Y+22, r25	; 0x16
    1abe:	af 8b       	std	Y+23, r26	; 0x17
    1ac0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ac2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aca:	20 e0       	ldi	r18, 0x00	; 0
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	40 e8       	ldi	r20, 0x80	; 128
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <main+0x99c>
		__ticks = 1;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	9c 8b       	std	Y+20, r25	; 0x14
    1ae0:	8b 8b       	std	Y+19, r24	; 0x13
    1ae2:	3f c0       	rjmp	.+126    	; 0x1b62 <main+0xa1a>
	else if (__tmp > 65535)
    1ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aea:	98 8d       	ldd	r25, Y+24	; 0x18
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	3f ef       	ldi	r19, 0xFF	; 255
    1af0:	4f e7       	ldi	r20, 0x7F	; 127
    1af2:	57 e4       	ldi	r21, 0x47	; 71
    1af4:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1af8:	18 16       	cp	r1, r24
    1afa:	4c f5       	brge	.+82     	; 0x1b4e <main+0xa06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afc:	69 8d       	ldd	r22, Y+25	; 0x19
    1afe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e2       	ldi	r20, 0x20	; 32
    1b0a:	51 e4       	ldi	r21, 0x41	; 65
    1b0c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	bc 01       	movw	r22, r24
    1b16:	cd 01       	movw	r24, r26
    1b18:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
    1b24:	0f c0       	rjmp	.+30     	; 0x1b44 <main+0x9fc>
    1b26:	89 e1       	ldi	r24, 0x19	; 25
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	89 8b       	std	Y+17, r24	; 0x11
    1b2e:	89 89       	ldd	r24, Y+17	; 0x11
    1b30:	9a 89       	ldd	r25, Y+18	; 0x12
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <main+0x9ea>
    1b36:	9a 8b       	std	Y+18, r25	; 0x12
    1b38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	9c 8b       	std	Y+20, r25	; 0x14
    1b42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b44:	8b 89       	ldd	r24, Y+19	; 0x13
    1b46:	9c 89       	ldd	r25, Y+20	; 0x14
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	69 f7       	brne	.-38     	; 0x1b26 <main+0x9de>
    1b4c:	14 c0       	rjmp	.+40     	; 0x1b76 <main+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b50:	7e 89       	ldd	r23, Y+22	; 0x16
    1b52:	8f 89       	ldd	r24, Y+23	; 0x17
    1b54:	98 8d       	ldd	r25, Y+24	; 0x18
    1b56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	9c 8b       	std	Y+20, r25	; 0x14
    1b60:	8b 8b       	std	Y+19, r24	; 0x13
    1b62:	8b 89       	ldd	r24, Y+19	; 0x13
    1b64:	9c 89       	ldd	r25, Y+20	; 0x14
    1b66:	98 8b       	std	Y+16, r25	; 0x10
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
    1b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b6c:	98 89       	ldd	r25, Y+16	; 0x10
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	f1 f7       	brne	.-4      	; 0x1b6e <main+0xa26>
    1b72:	98 8b       	std	Y+16, r25	; 0x10
    1b74:	8f 87       	std	Y+15, r24	; 0x0f
					 _delay_ms(40);
					LCD_DisplayString("MATH_ERROR");
    1b76:	8f e7       	ldi	r24, 0x7F	; 127
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <LCD_DisplayString>
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a8 e4       	ldi	r26, 0x48	; 72
    1b84:	b4 e4       	ldi	r27, 0x44	; 68
    1b86:	8b 87       	std	Y+11, r24	; 0x0b
    1b88:	9c 87       	std	Y+12, r25	; 0x0c
    1b8a:	ad 87       	std	Y+13, r26	; 0x0d
    1b8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4a e7       	ldi	r20, 0x7A	; 122
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8f 83       	std	Y+7, r24	; 0x07
    1ba8:	98 87       	std	Y+8, r25	; 0x08
    1baa:	a9 87       	std	Y+9, r26	; 0x09
    1bac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e8       	ldi	r20, 0x80	; 128
    1bbc:	5f e3       	ldi	r21, 0x3F	; 63
    1bbe:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <main+0xa88>
		__ticks = 1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
    1bce:	3f c0       	rjmp	.+126    	; 0x1c4e <main+0xb06>
	else if (__tmp > 65535)
    1bd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd2:	78 85       	ldd	r23, Y+8	; 0x08
    1bd4:	89 85       	ldd	r24, Y+9	; 0x09
    1bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	3f ef       	ldi	r19, 0xFF	; 255
    1bdc:	4f e7       	ldi	r20, 0x7F	; 127
    1bde:	57 e4       	ldi	r21, 0x47	; 71
    1be0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1be4:	18 16       	cp	r1, r24
    1be6:	4c f5       	brge	.+82     	; 0x1c3a <main+0xaf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <main+0xae8>
    1c12:	89 e1       	ldi	r24, 0x19	; 25
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 83       	std	Y+4, r25	; 0x04
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <main+0xad6>
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8d 81       	ldd	r24, Y+5	; 0x05
    1c28:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <main+0xaca>
    1c38:	14 c0       	rjmp	.+40     	; 0x1c62 <main+0xb1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <main+0xb12>
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(800);
					 LCD_ClearScreen();
    1c62:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <LCD_ClearScreen>
					 Initialize_Calculator();
    1c66:	0e 94 a9 07 	call	0xf52	; 0xf52 <Initialize_Calculator>
    1c6a:	95 ca       	rjmp	.-2774   	; 0x1196 <main+0x4e>
				}
				else {
					LCD_FloatToString(result);
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ed 59       	subi	r30, 0x9D	; 157
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	91 81       	ldd	r25, Z+1	; 0x01
    1c76:	a2 81       	ldd	r26, Z+2	; 0x02
    1c78:	b3 81       	ldd	r27, Z+3	; 0x03
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 97 1c 	call	0x392e	; 0x392e <LCD_FloatToString>
    1c82:	89 ca       	rjmp	.-2798   	; 0x1196 <main+0x4e>

00001c84 <Sum_Function>:

}
}

static sint32 Sum_Function(void)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	a5 97       	sbiw	r28, 0x25	; 37
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
	uint8 count=0;
    1c98:	1d a2       	std	Y+37, r1	; 0x25
	sint32 res_num1=0;
    1c9a:	19 a2       	std	Y+33, r1	; 0x21
    1c9c:	1a a2       	std	Y+34, r1	; 0x22
    1c9e:	1b a2       	std	Y+35, r1	; 0x23
    1ca0:	1c a2       	std	Y+36, r1	; 0x24
	sint32 res_num2=0;
    1ca2:	1d 8e       	std	Y+29, r1	; 0x1d
    1ca4:	1e 8e       	std	Y+30, r1	; 0x1e
    1ca6:	1f 8e       	std	Y+31, r1	; 0x1f
    1ca8:	18 a2       	std	Y+32, r1	; 0x20
	for(count=0;count<=count_glo;count++)
    1caa:	1d a2       	std	Y+37, r1	; 0x25
    1cac:	99 c0       	rjmp	.+306    	; 0x1de0 <Sum_Function+0x15c>
	{
		res_num1=res_num1*10 + num1[count];
    1cae:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb2:	ab a1       	ldd	r26, Y+35	; 0x23
    1cb4:	bc a1       	ldd	r27, Y+36	; 0x24
    1cb6:	2a e0       	ldi	r18, 0x0A	; 10
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	bc 01       	movw	r22, r24
    1cc0:	cd 01       	movw	r24, r26
    1cc2:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1cc6:	9b 01       	movw	r18, r22
    1cc8:	ac 01       	movw	r20, r24
    1cca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	fc 01       	movw	r30, r24
    1cda:	ec 56       	subi	r30, 0x6C	; 108
    1cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cde:	80 81       	ld	r24, Z
    1ce0:	91 81       	ldd	r25, Z+1	; 0x01
    1ce2:	a2 81       	ldd	r26, Z+2	; 0x02
    1ce4:	b3 81       	ldd	r27, Z+3	; 0x03
    1ce6:	82 0f       	add	r24, r18
    1ce8:	93 1f       	adc	r25, r19
    1cea:	a4 1f       	adc	r26, r20
    1cec:	b5 1f       	adc	r27, r21
    1cee:	89 a3       	std	Y+33, r24	; 0x21
    1cf0:	9a a3       	std	Y+34, r25	; 0x22
    1cf2:	ab a3       	std	Y+35, r26	; 0x23
    1cf4:	bc a3       	std	Y+36, r27	; 0x24
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	a6 e9       	ldi	r26, 0x96	; 150
    1cfc:	b3 e4       	ldi	r27, 0x43	; 67
    1cfe:	89 8f       	std	Y+25, r24	; 0x19
    1d00:	9a 8f       	std	Y+26, r25	; 0x1a
    1d02:	ab 8f       	std	Y+27, r26	; 0x1b
    1d04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d06:	69 8d       	ldd	r22, Y+25	; 0x19
    1d08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	4a e7       	ldi	r20, 0x7A	; 122
    1d14:	53 e4       	ldi	r21, 0x43	; 67
    1d16:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	8d 8b       	std	Y+21, r24	; 0x15
    1d20:	9e 8b       	std	Y+22, r25	; 0x16
    1d22:	af 8b       	std	Y+23, r26	; 0x17
    1d24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d26:	6d 89       	ldd	r22, Y+21	; 0x15
    1d28:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e8       	ldi	r20, 0x80	; 128
    1d34:	5f e3       	ldi	r21, 0x3F	; 63
    1d36:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1d3a:	88 23       	and	r24, r24
    1d3c:	2c f4       	brge	.+10     	; 0x1d48 <Sum_Function+0xc4>
		__ticks = 1;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 8b       	std	Y+20, r25	; 0x14
    1d44:	8b 8b       	std	Y+19, r24	; 0x13
    1d46:	3f c0       	rjmp	.+126    	; 0x1dc6 <Sum_Function+0x142>
	else if (__tmp > 65535)
    1d48:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	3f ef       	ldi	r19, 0xFF	; 255
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	57 e4       	ldi	r21, 0x47	; 71
    1d58:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	4c f5       	brge	.+82     	; 0x1db2 <Sum_Function+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d60:	69 8d       	ldd	r22, Y+25	; 0x19
    1d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e2       	ldi	r20, 0x20	; 32
    1d6e:	51 e4       	ldi	r21, 0x41	; 65
    1d70:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	bc 01       	movw	r22, r24
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	9c 8b       	std	Y+20, r25	; 0x14
    1d86:	8b 8b       	std	Y+19, r24	; 0x13
    1d88:	0f c0       	rjmp	.+30     	; 0x1da8 <Sum_Function+0x124>
    1d8a:	89 e1       	ldi	r24, 0x19	; 25
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9a 8b       	std	Y+18, r25	; 0x12
    1d90:	89 8b       	std	Y+17, r24	; 0x11
    1d92:	89 89       	ldd	r24, Y+17	; 0x11
    1d94:	9a 89       	ldd	r25, Y+18	; 0x12
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	f1 f7       	brne	.-4      	; 0x1d96 <Sum_Function+0x112>
    1d9a:	9a 8b       	std	Y+18, r25	; 0x12
    1d9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1da0:	9c 89       	ldd	r25, Y+20	; 0x14
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	9c 8b       	std	Y+20, r25	; 0x14
    1da6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da8:	8b 89       	ldd	r24, Y+19	; 0x13
    1daa:	9c 89       	ldd	r25, Y+20	; 0x14
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	69 f7       	brne	.-38     	; 0x1d8a <Sum_Function+0x106>
    1db0:	14 c0       	rjmp	.+40     	; 0x1dda <Sum_Function+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db2:	6d 89       	ldd	r22, Y+21	; 0x15
    1db4:	7e 89       	ldd	r23, Y+22	; 0x16
    1db6:	8f 89       	ldd	r24, Y+23	; 0x17
    1db8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dbe:	dc 01       	movw	r26, r24
    1dc0:	cb 01       	movw	r24, r22
    1dc2:	9c 8b       	std	Y+20, r25	; 0x14
    1dc4:	8b 8b       	std	Y+19, r24	; 0x13
    1dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dca:	98 8b       	std	Y+16, r25	; 0x10
    1dcc:	8f 87       	std	Y+15, r24	; 0x0f
    1dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd0:	98 89       	ldd	r25, Y+16	; 0x10
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	f1 f7       	brne	.-4      	; 0x1dd2 <Sum_Function+0x14e>
    1dd6:	98 8b       	std	Y+16, r25	; 0x10
    1dd8:	8f 87       	std	Y+15, r24	; 0x0f
static sint32 Sum_Function(void)
{
	uint8 count=0;
	sint32 res_num1=0;
	sint32 res_num2=0;
	for(count=0;count<=count_glo;count++)
    1dda:	8d a1       	ldd	r24, Y+37	; 0x25
    1ddc:	8f 5f       	subi	r24, 0xFF	; 255
    1dde:	8d a3       	std	Y+37, r24	; 0x25
    1de0:	90 91 92 01 	lds	r25, 0x0192
    1de4:	8d a1       	ldd	r24, Y+37	; 0x25
    1de6:	98 17       	cp	r25, r24
    1de8:	08 f0       	brcs	.+2      	; 0x1dec <Sum_Function+0x168>
    1dea:	61 cf       	rjmp	.-318    	; 0x1cae <Sum_Function+0x2a>
	{
		res_num1=res_num1*10 + num1[count];
		_delay_ms(300);
	}
	for(count=0;count<=count_glo_2;count++)
    1dec:	1d a2       	std	Y+37, r1	; 0x25
    1dee:	99 c0       	rjmp	.+306    	; 0x1f22 <Sum_Function+0x29e>
	{
		res_num2=res_num2*10 + num2[count];
    1df0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df4:	af 8d       	ldd	r26, Y+31	; 0x1f
    1df6:	b8 a1       	ldd	r27, Y+32	; 0x20
    1df8:	2a e0       	ldi	r18, 0x0A	; 10
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	bc 01       	movw	r22, r24
    1e02:	cd 01       	movw	r24, r26
    1e04:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1e08:	9b 01       	movw	r18, r22
    1e0a:	ac 01       	movw	r20, r24
    1e0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	e8 55       	subi	r30, 0x58	; 88
    1e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	a2 81       	ldd	r26, Z+2	; 0x02
    1e26:	b3 81       	ldd	r27, Z+3	; 0x03
    1e28:	82 0f       	add	r24, r18
    1e2a:	93 1f       	adc	r25, r19
    1e2c:	a4 1f       	adc	r26, r20
    1e2e:	b5 1f       	adc	r27, r21
    1e30:	8d 8f       	std	Y+29, r24	; 0x1d
    1e32:	9e 8f       	std	Y+30, r25	; 0x1e
    1e34:	af 8f       	std	Y+31, r26	; 0x1f
    1e36:	b8 a3       	std	Y+32, r27	; 0x20
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a6 e9       	ldi	r26, 0x96	; 150
    1e3e:	b3 e4       	ldi	r27, 0x43	; 67
    1e40:	8b 87       	std	Y+11, r24	; 0x0b
    1e42:	9c 87       	std	Y+12, r25	; 0x0c
    1e44:	ad 87       	std	Y+13, r26	; 0x0d
    1e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a e7       	ldi	r20, 0x7A	; 122
    1e56:	53 e4       	ldi	r21, 0x43	; 67
    1e58:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8f 83       	std	Y+7, r24	; 0x07
    1e62:	98 87       	std	Y+8, r25	; 0x08
    1e64:	a9 87       	std	Y+9, r26	; 0x09
    1e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e8       	ldi	r20, 0x80	; 128
    1e76:	5f e3       	ldi	r21, 0x3F	; 63
    1e78:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1e7c:	88 23       	and	r24, r24
    1e7e:	2c f4       	brge	.+10     	; 0x1e8a <Sum_Function+0x206>
		__ticks = 1;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	3f c0       	rjmp	.+126    	; 0x1f08 <Sum_Function+0x284>
	else if (__tmp > 65535)
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	4c f5       	brge	.+82     	; 0x1ef4 <Sum_Function+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e2       	ldi	r20, 0x20	; 32
    1eb0:	51 e4       	ldi	r21, 0x41	; 65
    1eb2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <Sum_Function+0x266>
    1ecc:	89 e1       	ldi	r24, 0x19	; 25
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <Sum_Function+0x254>
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <Sum_Function+0x248>
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <Sum_Function+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <Sum_Function+0x290>
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
	for(count=0;count<=count_glo;count++)
	{
		res_num1=res_num1*10 + num1[count];
		_delay_ms(300);
	}
	for(count=0;count<=count_glo_2;count++)
    1f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	8d a3       	std	Y+37, r24	; 0x25
    1f22:	90 91 93 01 	lds	r25, 0x0193
    1f26:	8d a1       	ldd	r24, Y+37	; 0x25
    1f28:	98 17       	cp	r25, r24
    1f2a:	08 f0       	brcs	.+2      	; 0x1f2e <Sum_Function+0x2aa>
    1f2c:	61 cf       	rjmp	.-318    	; 0x1df0 <Sum_Function+0x16c>
	{
		res_num2=res_num2*10 + num2[count];
		_delay_ms(300);
	}

	return (res_num1+res_num2);
    1f2e:	29 a1       	ldd	r18, Y+33	; 0x21
    1f30:	3a a1       	ldd	r19, Y+34	; 0x22
    1f32:	4b a1       	ldd	r20, Y+35	; 0x23
    1f34:	5c a1       	ldd	r21, Y+36	; 0x24
    1f36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f3a:	af 8d       	ldd	r26, Y+31	; 0x1f
    1f3c:	b8 a1       	ldd	r27, Y+32	; 0x20
    1f3e:	82 0f       	add	r24, r18
    1f40:	93 1f       	adc	r25, r19
    1f42:	a4 1f       	adc	r26, r20
    1f44:	b5 1f       	adc	r27, r21

}
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	a5 96       	adiw	r28, 0x25	; 37
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <Minus_Function>:
static sint32 Minus_Function(void)
{
    1f5c:	ef 92       	push	r14
    1f5e:	ff 92       	push	r15
    1f60:	0f 93       	push	r16
    1f62:	1f 93       	push	r17
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	a5 97       	sbiw	r28, 0x25	; 37
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
	uint8 count=0;
    1f78:	1d a2       	std	Y+37, r1	; 0x25
	sint32 res_num1=0;
    1f7a:	19 a2       	std	Y+33, r1	; 0x21
    1f7c:	1a a2       	std	Y+34, r1	; 0x22
    1f7e:	1b a2       	std	Y+35, r1	; 0x23
    1f80:	1c a2       	std	Y+36, r1	; 0x24
	sint32 res_num2=0;
    1f82:	1d 8e       	std	Y+29, r1	; 0x1d
    1f84:	1e 8e       	std	Y+30, r1	; 0x1e
    1f86:	1f 8e       	std	Y+31, r1	; 0x1f
    1f88:	18 a2       	std	Y+32, r1	; 0x20
	for(count=0;count<=count_glo;count++)
    1f8a:	1d a2       	std	Y+37, r1	; 0x25
    1f8c:	99 c0       	rjmp	.+306    	; 0x20c0 <Minus_Function+0x164>
	{
		res_num1=res_num1*10 + num1[count];
    1f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1f90:	9a a1       	ldd	r25, Y+34	; 0x22
    1f92:	ab a1       	ldd	r26, Y+35	; 0x23
    1f94:	bc a1       	ldd	r27, Y+36	; 0x24
    1f96:	2a e0       	ldi	r18, 0x0A	; 10
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	50 e0       	ldi	r21, 0x00	; 0
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    1fa6:	9b 01       	movw	r18, r22
    1fa8:	ac 01       	movw	r20, r24
    1faa:	8d a1       	ldd	r24, Y+37	; 0x25
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	88 0f       	add	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	fc 01       	movw	r30, r24
    1fba:	ec 56       	subi	r30, 0x6C	; 108
    1fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fbe:	80 81       	ld	r24, Z
    1fc0:	91 81       	ldd	r25, Z+1	; 0x01
    1fc2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fc4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fc6:	82 0f       	add	r24, r18
    1fc8:	93 1f       	adc	r25, r19
    1fca:	a4 1f       	adc	r26, r20
    1fcc:	b5 1f       	adc	r27, r21
    1fce:	89 a3       	std	Y+33, r24	; 0x21
    1fd0:	9a a3       	std	Y+34, r25	; 0x22
    1fd2:	ab a3       	std	Y+35, r26	; 0x23
    1fd4:	bc a3       	std	Y+36, r27	; 0x24
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	a6 e9       	ldi	r26, 0x96	; 150
    1fdc:	b3 e4       	ldi	r27, 0x43	; 67
    1fde:	89 8f       	std	Y+25, r24	; 0x19
    1fe0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fe4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fe8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a e7       	ldi	r20, 0x7A	; 122
    1ff4:	53 e4       	ldi	r21, 0x43	; 67
    1ff6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8d 8b       	std	Y+21, r24	; 0x15
    2000:	9e 8b       	std	Y+22, r25	; 0x16
    2002:	af 8b       	std	Y+23, r26	; 0x17
    2004:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2006:	6d 89       	ldd	r22, Y+21	; 0x15
    2008:	7e 89       	ldd	r23, Y+22	; 0x16
    200a:	8f 89       	ldd	r24, Y+23	; 0x17
    200c:	98 8d       	ldd	r25, Y+24	; 0x18
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e8       	ldi	r20, 0x80	; 128
    2014:	5f e3       	ldi	r21, 0x3F	; 63
    2016:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    201a:	88 23       	and	r24, r24
    201c:	2c f4       	brge	.+10     	; 0x2028 <Minus_Function+0xcc>
		__ticks = 1;
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	9c 8b       	std	Y+20, r25	; 0x14
    2024:	8b 8b       	std	Y+19, r24	; 0x13
    2026:	3f c0       	rjmp	.+126    	; 0x20a6 <Minus_Function+0x14a>
	else if (__tmp > 65535)
    2028:	6d 89       	ldd	r22, Y+21	; 0x15
    202a:	7e 89       	ldd	r23, Y+22	; 0x16
    202c:	8f 89       	ldd	r24, Y+23	; 0x17
    202e:	98 8d       	ldd	r25, Y+24	; 0x18
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	4f e7       	ldi	r20, 0x7F	; 127
    2036:	57 e4       	ldi	r21, 0x47	; 71
    2038:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    203c:	18 16       	cp	r1, r24
    203e:	4c f5       	brge	.+82     	; 0x2092 <Minus_Function+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2040:	69 8d       	ldd	r22, Y+25	; 0x19
    2042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e2       	ldi	r20, 0x20	; 32
    204e:	51 e4       	ldi	r21, 0x41	; 65
    2050:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	9c 8b       	std	Y+20, r25	; 0x14
    2066:	8b 8b       	std	Y+19, r24	; 0x13
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <Minus_Function+0x12c>
    206a:	89 e1       	ldi	r24, 0x19	; 25
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	9a 8b       	std	Y+18, r25	; 0x12
    2070:	89 8b       	std	Y+17, r24	; 0x11
    2072:	89 89       	ldd	r24, Y+17	; 0x11
    2074:	9a 89       	ldd	r25, Y+18	; 0x12
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <Minus_Function+0x11a>
    207a:	9a 8b       	std	Y+18, r25	; 0x12
    207c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	9c 8b       	std	Y+20, r25	; 0x14
    2086:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2088:	8b 89       	ldd	r24, Y+19	; 0x13
    208a:	9c 89       	ldd	r25, Y+20	; 0x14
    208c:	00 97       	sbiw	r24, 0x00	; 0
    208e:	69 f7       	brne	.-38     	; 0x206a <Minus_Function+0x10e>
    2090:	14 c0       	rjmp	.+40     	; 0x20ba <Minus_Function+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2092:	6d 89       	ldd	r22, Y+21	; 0x15
    2094:	7e 89       	ldd	r23, Y+22	; 0x16
    2096:	8f 89       	ldd	r24, Y+23	; 0x17
    2098:	98 8d       	ldd	r25, Y+24	; 0x18
    209a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9c 8b       	std	Y+20, r25	; 0x14
    20a4:	8b 8b       	std	Y+19, r24	; 0x13
    20a6:	8b 89       	ldd	r24, Y+19	; 0x13
    20a8:	9c 89       	ldd	r25, Y+20	; 0x14
    20aa:	98 8b       	std	Y+16, r25	; 0x10
    20ac:	8f 87       	std	Y+15, r24	; 0x0f
    20ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b0:	98 89       	ldd	r25, Y+16	; 0x10
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	f1 f7       	brne	.-4      	; 0x20b2 <Minus_Function+0x156>
    20b6:	98 8b       	std	Y+16, r25	; 0x10
    20b8:	8f 87       	std	Y+15, r24	; 0x0f
static sint32 Minus_Function(void)
{
	uint8 count=0;
	sint32 res_num1=0;
	sint32 res_num2=0;
	for(count=0;count<=count_glo;count++)
    20ba:	8d a1       	ldd	r24, Y+37	; 0x25
    20bc:	8f 5f       	subi	r24, 0xFF	; 255
    20be:	8d a3       	std	Y+37, r24	; 0x25
    20c0:	90 91 92 01 	lds	r25, 0x0192
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	98 17       	cp	r25, r24
    20c8:	08 f0       	brcs	.+2      	; 0x20cc <Minus_Function+0x170>
    20ca:	61 cf       	rjmp	.-318    	; 0x1f8e <Minus_Function+0x32>
	{
		res_num1=res_num1*10 + num1[count];
		_delay_ms(300);
	}
	for(count=0;count<=count_glo_2;count++)
    20cc:	1d a2       	std	Y+37, r1	; 0x25
    20ce:	99 c0       	rjmp	.+306    	; 0x2202 <Minus_Function+0x2a6>
	{
		res_num2=res_num2*10 + num2[count];
    20d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20d4:	af 8d       	ldd	r26, Y+31	; 0x1f
    20d6:	b8 a1       	ldd	r27, Y+32	; 0x20
    20d8:	2a e0       	ldi	r18, 0x0A	; 10
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e0       	ldi	r20, 0x00	; 0
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    20e8:	9b 01       	movw	r18, r22
    20ea:	ac 01       	movw	r20, r24
    20ec:	8d a1       	ldd	r24, Y+37	; 0x25
    20ee:	88 2f       	mov	r24, r24
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	88 0f       	add	r24, r24
    20f4:	99 1f       	adc	r25, r25
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	fc 01       	movw	r30, r24
    20fc:	e8 55       	subi	r30, 0x58	; 88
    20fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2100:	80 81       	ld	r24, Z
    2102:	91 81       	ldd	r25, Z+1	; 0x01
    2104:	a2 81       	ldd	r26, Z+2	; 0x02
    2106:	b3 81       	ldd	r27, Z+3	; 0x03
    2108:	82 0f       	add	r24, r18
    210a:	93 1f       	adc	r25, r19
    210c:	a4 1f       	adc	r26, r20
    210e:	b5 1f       	adc	r27, r21
    2110:	8d 8f       	std	Y+29, r24	; 0x1d
    2112:	9e 8f       	std	Y+30, r25	; 0x1e
    2114:	af 8f       	std	Y+31, r26	; 0x1f
    2116:	b8 a3       	std	Y+32, r27	; 0x20
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a6 e9       	ldi	r26, 0x96	; 150
    211e:	b3 e4       	ldi	r27, 0x43	; 67
    2120:	8b 87       	std	Y+11, r24	; 0x0b
    2122:	9c 87       	std	Y+12, r25	; 0x0c
    2124:	ad 87       	std	Y+13, r26	; 0x0d
    2126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a e7       	ldi	r20, 0x7A	; 122
    2136:	53 e4       	ldi	r21, 0x43	; 67
    2138:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8f 83       	std	Y+7, r24	; 0x07
    2142:	98 87       	std	Y+8, r25	; 0x08
    2144:	a9 87       	std	Y+9, r26	; 0x09
    2146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2148:	6f 81       	ldd	r22, Y+7	; 0x07
    214a:	78 85       	ldd	r23, Y+8	; 0x08
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <Minus_Function+0x20e>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9e 83       	std	Y+6, r25	; 0x06
    2166:	8d 83       	std	Y+5, r24	; 0x05
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <Minus_Function+0x28c>
	else if (__tmp > 65535)
    216a:	6f 81       	ldd	r22, Y+7	; 0x07
    216c:	78 85       	ldd	r23, Y+8	; 0x08
    216e:	89 85       	ldd	r24, Y+9	; 0x09
    2170:	9a 85       	ldd	r25, Y+10	; 0x0a
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <Minus_Function+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	6b 85       	ldd	r22, Y+11	; 0x0b
    2184:	7c 85       	ldd	r23, Y+12	; 0x0c
    2186:	8d 85       	ldd	r24, Y+13	; 0x0d
    2188:	9e 85       	ldd	r25, Y+14	; 0x0e
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <Minus_Function+0x26e>
    21ac:	89 e1       	ldi	r24, 0x19	; 25
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	9c 83       	std	Y+4, r25	; 0x04
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <Minus_Function+0x25c>
    21bc:	9c 83       	std	Y+4, r25	; 0x04
    21be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	8d 81       	ldd	r24, Y+5	; 0x05
    21c2:	9e 81       	ldd	r25, Y+6	; 0x06
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	9e 81       	ldd	r25, Y+6	; 0x06
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <Minus_Function+0x250>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <Minus_Function+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6f 81       	ldd	r22, Y+7	; 0x07
    21d6:	78 85       	ldd	r23, Y+8	; 0x08
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9e 83       	std	Y+6, r25	; 0x06
    21e6:	8d 83       	std	Y+5, r24	; 0x05
    21e8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ea:	9e 81       	ldd	r25, Y+6	; 0x06
    21ec:	9a 83       	std	Y+2, r25	; 0x02
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <Minus_Function+0x298>
    21f8:	9a 83       	std	Y+2, r25	; 0x02
    21fa:	89 83       	std	Y+1, r24	; 0x01
	for(count=0;count<=count_glo;count++)
	{
		res_num1=res_num1*10 + num1[count];
		_delay_ms(300);
	}
	for(count=0;count<=count_glo_2;count++)
    21fc:	8d a1       	ldd	r24, Y+37	; 0x25
    21fe:	8f 5f       	subi	r24, 0xFF	; 255
    2200:	8d a3       	std	Y+37, r24	; 0x25
    2202:	90 91 93 01 	lds	r25, 0x0193
    2206:	8d a1       	ldd	r24, Y+37	; 0x25
    2208:	98 17       	cp	r25, r24
    220a:	08 f0       	brcs	.+2      	; 0x220e <Minus_Function+0x2b2>
    220c:	61 cf       	rjmp	.-318    	; 0x20d0 <Minus_Function+0x174>
	{
		res_num2=res_num2*10 + num2[count];
		_delay_ms(300);
	}

	return (res_num1-res_num2);
    220e:	29 a1       	ldd	r18, Y+33	; 0x21
    2210:	3a a1       	ldd	r19, Y+34	; 0x22
    2212:	4b a1       	ldd	r20, Y+35	; 0x23
    2214:	5c a1       	ldd	r21, Y+36	; 0x24
    2216:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2218:	9e 8d       	ldd	r25, Y+30	; 0x1e
    221a:	af 8d       	ldd	r26, Y+31	; 0x1f
    221c:	b8 a1       	ldd	r27, Y+32	; 0x20
    221e:	79 01       	movw	r14, r18
    2220:	8a 01       	movw	r16, r20
    2222:	e8 1a       	sub	r14, r24
    2224:	f9 0a       	sbc	r15, r25
    2226:	0a 0b       	sbc	r16, r26
    2228:	1b 0b       	sbc	r17, r27
    222a:	d8 01       	movw	r26, r16
    222c:	c7 01       	movw	r24, r14
}
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	a5 96       	adiw	r28, 0x25	; 37
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	de bf       	out	0x3e, r29	; 62
    223a:	0f be       	out	0x3f, r0	; 63
    223c:	cd bf       	out	0x3d, r28	; 61
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	08 95       	ret

0000224c <Multiplay_Function>:
static sint32 Multiplay_Function(void)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	a5 97       	sbiw	r28, 0x25	; 37
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
	uint8 count=0;
    2260:	1d a2       	std	Y+37, r1	; 0x25
	sint32 res_num1=0;
    2262:	19 a2       	std	Y+33, r1	; 0x21
    2264:	1a a2       	std	Y+34, r1	; 0x22
    2266:	1b a2       	std	Y+35, r1	; 0x23
    2268:	1c a2       	std	Y+36, r1	; 0x24
	sint32 res_num2=0;
    226a:	1d 8e       	std	Y+29, r1	; 0x1d
    226c:	1e 8e       	std	Y+30, r1	; 0x1e
    226e:	1f 8e       	std	Y+31, r1	; 0x1f
    2270:	18 a2       	std	Y+32, r1	; 0x20
	for(count=0;count<=count_glo;count++)
    2272:	1d a2       	std	Y+37, r1	; 0x25
    2274:	99 c0       	rjmp	.+306    	; 0x23a8 <Multiplay_Function+0x15c>
	{
		res_num1=res_num1*10 + num1[count];
    2276:	89 a1       	ldd	r24, Y+33	; 0x21
    2278:	9a a1       	ldd	r25, Y+34	; 0x22
    227a:	ab a1       	ldd	r26, Y+35	; 0x23
    227c:	bc a1       	ldd	r27, Y+36	; 0x24
    227e:	2a e0       	ldi	r18, 0x0A	; 10
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    228e:	9b 01       	movw	r18, r22
    2290:	ac 01       	movw	r20, r24
    2292:	8d a1       	ldd	r24, Y+37	; 0x25
    2294:	88 2f       	mov	r24, r24
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	fc 01       	movw	r30, r24
    22a2:	ec 56       	subi	r30, 0x6C	; 108
    22a4:	fe 4f       	sbci	r31, 0xFE	; 254
    22a6:	80 81       	ld	r24, Z
    22a8:	91 81       	ldd	r25, Z+1	; 0x01
    22aa:	a2 81       	ldd	r26, Z+2	; 0x02
    22ac:	b3 81       	ldd	r27, Z+3	; 0x03
    22ae:	82 0f       	add	r24, r18
    22b0:	93 1f       	adc	r25, r19
    22b2:	a4 1f       	adc	r26, r20
    22b4:	b5 1f       	adc	r27, r21
    22b6:	89 a3       	std	Y+33, r24	; 0x21
    22b8:	9a a3       	std	Y+34, r25	; 0x22
    22ba:	ab a3       	std	Y+35, r26	; 0x23
    22bc:	bc a3       	std	Y+36, r27	; 0x24
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	a6 e9       	ldi	r26, 0x96	; 150
    22c4:	b3 e4       	ldi	r27, 0x43	; 67
    22c6:	89 8f       	std	Y+25, r24	; 0x19
    22c8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ca:	ab 8f       	std	Y+27, r26	; 0x1b
    22cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ce:	69 8d       	ldd	r22, Y+25	; 0x19
    22d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4a e7       	ldi	r20, 0x7A	; 122
    22dc:	53 e4       	ldi	r21, 0x43	; 67
    22de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	8d 8b       	std	Y+21, r24	; 0x15
    22e8:	9e 8b       	std	Y+22, r25	; 0x16
    22ea:	af 8b       	std	Y+23, r26	; 0x17
    22ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ee:	6d 89       	ldd	r22, Y+21	; 0x15
    22f0:	7e 89       	ldd	r23, Y+22	; 0x16
    22f2:	8f 89       	ldd	r24, Y+23	; 0x17
    22f4:	98 8d       	ldd	r25, Y+24	; 0x18
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e8       	ldi	r20, 0x80	; 128
    22fc:	5f e3       	ldi	r21, 0x3F	; 63
    22fe:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2302:	88 23       	and	r24, r24
    2304:	2c f4       	brge	.+10     	; 0x2310 <Multiplay_Function+0xc4>
		__ticks = 1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	9c 8b       	std	Y+20, r25	; 0x14
    230c:	8b 8b       	std	Y+19, r24	; 0x13
    230e:	3f c0       	rjmp	.+126    	; 0x238e <Multiplay_Function+0x142>
	else if (__tmp > 65535)
    2310:	6d 89       	ldd	r22, Y+21	; 0x15
    2312:	7e 89       	ldd	r23, Y+22	; 0x16
    2314:	8f 89       	ldd	r24, Y+23	; 0x17
    2316:	98 8d       	ldd	r25, Y+24	; 0x18
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	3f ef       	ldi	r19, 0xFF	; 255
    231c:	4f e7       	ldi	r20, 0x7F	; 127
    231e:	57 e4       	ldi	r21, 0x47	; 71
    2320:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2324:	18 16       	cp	r1, r24
    2326:	4c f5       	brge	.+82     	; 0x237a <Multiplay_Function+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2328:	69 8d       	ldd	r22, Y+25	; 0x19
    232a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	40 e2       	ldi	r20, 0x20	; 32
    2336:	51 e4       	ldi	r21, 0x41	; 65
    2338:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9c 8b       	std	Y+20, r25	; 0x14
    234e:	8b 8b       	std	Y+19, r24	; 0x13
    2350:	0f c0       	rjmp	.+30     	; 0x2370 <Multiplay_Function+0x124>
    2352:	89 e1       	ldi	r24, 0x19	; 25
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	9a 8b       	std	Y+18, r25	; 0x12
    2358:	89 8b       	std	Y+17, r24	; 0x11
    235a:	89 89       	ldd	r24, Y+17	; 0x11
    235c:	9a 89       	ldd	r25, Y+18	; 0x12
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <Multiplay_Function+0x112>
    2362:	9a 8b       	std	Y+18, r25	; 0x12
    2364:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	8b 89       	ldd	r24, Y+19	; 0x13
    2368:	9c 89       	ldd	r25, Y+20	; 0x14
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	9c 8b       	std	Y+20, r25	; 0x14
    236e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2370:	8b 89       	ldd	r24, Y+19	; 0x13
    2372:	9c 89       	ldd	r25, Y+20	; 0x14
    2374:	00 97       	sbiw	r24, 0x00	; 0
    2376:	69 f7       	brne	.-38     	; 0x2352 <Multiplay_Function+0x106>
    2378:	14 c0       	rjmp	.+40     	; 0x23a2 <Multiplay_Function+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237a:	6d 89       	ldd	r22, Y+21	; 0x15
    237c:	7e 89       	ldd	r23, Y+22	; 0x16
    237e:	8f 89       	ldd	r24, Y+23	; 0x17
    2380:	98 8d       	ldd	r25, Y+24	; 0x18
    2382:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9c 8b       	std	Y+20, r25	; 0x14
    238c:	8b 8b       	std	Y+19, r24	; 0x13
    238e:	8b 89       	ldd	r24, Y+19	; 0x13
    2390:	9c 89       	ldd	r25, Y+20	; 0x14
    2392:	98 8b       	std	Y+16, r25	; 0x10
    2394:	8f 87       	std	Y+15, r24	; 0x0f
    2396:	8f 85       	ldd	r24, Y+15	; 0x0f
    2398:	98 89       	ldd	r25, Y+16	; 0x10
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <Multiplay_Function+0x14e>
    239e:	98 8b       	std	Y+16, r25	; 0x10
    23a0:	8f 87       	std	Y+15, r24	; 0x0f
static sint32 Multiplay_Function(void)
{
	uint8 count=0;
	sint32 res_num1=0;
	sint32 res_num2=0;
	for(count=0;count<=count_glo;count++)
    23a2:	8d a1       	ldd	r24, Y+37	; 0x25
    23a4:	8f 5f       	subi	r24, 0xFF	; 255
    23a6:	8d a3       	std	Y+37, r24	; 0x25
    23a8:	90 91 92 01 	lds	r25, 0x0192
    23ac:	8d a1       	ldd	r24, Y+37	; 0x25
    23ae:	98 17       	cp	r25, r24
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <Multiplay_Function+0x168>
    23b2:	61 cf       	rjmp	.-318    	; 0x2276 <Multiplay_Function+0x2a>
	{
		res_num1=res_num1*10 + num1[count];
		_delay_ms(300);
	}
	for(count=0;count<=count_glo_2;count++)
    23b4:	1d a2       	std	Y+37, r1	; 0x25
    23b6:	99 c0       	rjmp	.+306    	; 0x24ea <Multiplay_Function+0x29e>
	{
		res_num2=res_num2*10 + num2[count];
    23b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23bc:	af 8d       	ldd	r26, Y+31	; 0x1f
    23be:	b8 a1       	ldd	r27, Y+32	; 0x20
    23c0:	2a e0       	ldi	r18, 0x0A	; 10
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	50 e0       	ldi	r21, 0x00	; 0
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    23d0:	9b 01       	movw	r18, r22
    23d2:	ac 01       	movw	r20, r24
    23d4:	8d a1       	ldd	r24, Y+37	; 0x25
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	88 0f       	add	r24, r24
    23dc:	99 1f       	adc	r25, r25
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	fc 01       	movw	r30, r24
    23e4:	e8 55       	subi	r30, 0x58	; 88
    23e6:	fe 4f       	sbci	r31, 0xFE	; 254
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	a2 81       	ldd	r26, Z+2	; 0x02
    23ee:	b3 81       	ldd	r27, Z+3	; 0x03
    23f0:	82 0f       	add	r24, r18
    23f2:	93 1f       	adc	r25, r19
    23f4:	a4 1f       	adc	r26, r20
    23f6:	b5 1f       	adc	r27, r21
    23f8:	8d 8f       	std	Y+29, r24	; 0x1d
    23fa:	9e 8f       	std	Y+30, r25	; 0x1e
    23fc:	af 8f       	std	Y+31, r26	; 0x1f
    23fe:	b8 a3       	std	Y+32, r27	; 0x20
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a6 e9       	ldi	r26, 0x96	; 150
    2406:	b3 e4       	ldi	r27, 0x43	; 67
    2408:	8b 87       	std	Y+11, r24	; 0x0b
    240a:	9c 87       	std	Y+12, r25	; 0x0c
    240c:	ad 87       	std	Y+13, r26	; 0x0d
    240e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a e7       	ldi	r20, 0x7A	; 122
    241e:	53 e4       	ldi	r21, 0x43	; 67
    2420:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8f 83       	std	Y+7, r24	; 0x07
    242a:	98 87       	std	Y+8, r25	; 0x08
    242c:	a9 87       	std	Y+9, r26	; 0x09
    242e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2430:	6f 81       	ldd	r22, Y+7	; 0x07
    2432:	78 85       	ldd	r23, Y+8	; 0x08
    2434:	89 85       	ldd	r24, Y+9	; 0x09
    2436:	9a 85       	ldd	r25, Y+10	; 0x0a
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <Multiplay_Function+0x206>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9e 83       	std	Y+6, r25	; 0x06
    244e:	8d 83       	std	Y+5, r24	; 0x05
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <Multiplay_Function+0x284>
	else if (__tmp > 65535)
    2452:	6f 81       	ldd	r22, Y+7	; 0x07
    2454:	78 85       	ldd	r23, Y+8	; 0x08
    2456:	89 85       	ldd	r24, Y+9	; 0x09
    2458:	9a 85       	ldd	r25, Y+10	; 0x0a
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <Multiplay_Function+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <Multiplay_Function+0x266>
    2494:	89 e1       	ldi	r24, 0x19	; 25
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <Multiplay_Function+0x254>
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <Multiplay_Function+0x248>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <Multiplay_Function+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6f 81       	ldd	r22, Y+7	; 0x07
    24be:	78 85       	ldd	r23, Y+8	; 0x08
    24c0:	89 85       	ldd	r24, Y+9	; 0x09
    24c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	8d 81       	ldd	r24, Y+5	; 0x05
    24d2:	9e 81       	ldd	r25, Y+6	; 0x06
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	9a 81       	ldd	r25, Y+2	; 0x02
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <Multiplay_Function+0x290>
    24e0:	9a 83       	std	Y+2, r25	; 0x02
    24e2:	89 83       	std	Y+1, r24	; 0x01
	for(count=0;count<=count_glo;count++)
	{
		res_num1=res_num1*10 + num1[count];
		_delay_ms(300);
	}
	for(count=0;count<=count_glo_2;count++)
    24e4:	8d a1       	ldd	r24, Y+37	; 0x25
    24e6:	8f 5f       	subi	r24, 0xFF	; 255
    24e8:	8d a3       	std	Y+37, r24	; 0x25
    24ea:	90 91 93 01 	lds	r25, 0x0193
    24ee:	8d a1       	ldd	r24, Y+37	; 0x25
    24f0:	98 17       	cp	r25, r24
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <Multiplay_Function+0x2aa>
    24f4:	61 cf       	rjmp	.-318    	; 0x23b8 <Multiplay_Function+0x16c>
	{
		res_num2=res_num2*10 + num2[count];
		_delay_ms(300);
	}

	return (res_num1*res_num2);
    24f6:	89 a1       	ldd	r24, Y+33	; 0x21
    24f8:	9a a1       	ldd	r25, Y+34	; 0x22
    24fa:	ab a1       	ldd	r26, Y+35	; 0x23
    24fc:	bc a1       	ldd	r27, Y+36	; 0x24
    24fe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2500:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2502:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2504:	58 a1       	ldd	r21, Y+32	; 0x20
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
}
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	a5 96       	adiw	r28, 0x25	; 37
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <Division_Function>:
static float Division_Function(void)
{
    2528:	ef 92       	push	r14
    252a:	ff 92       	push	r15
    252c:	0f 93       	push	r16
    252e:	1f 93       	push	r17
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	a9 97       	sbiw	r28, 0x29	; 41
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
	uint8 count=0;
    2544:	1d a2       	std	Y+37, r1	; 0x25
	sint32 res_num1=0;
    2546:	19 a2       	std	Y+33, r1	; 0x21
    2548:	1a a2       	std	Y+34, r1	; 0x22
    254a:	1b a2       	std	Y+35, r1	; 0x23
    254c:	1c a2       	std	Y+36, r1	; 0x24
	sint32 res_num2=0;
    254e:	1d 8e       	std	Y+29, r1	; 0x1d
    2550:	1e 8e       	std	Y+30, r1	; 0x1e
    2552:	1f 8e       	std	Y+31, r1	; 0x1f
    2554:	18 a2       	std	Y+32, r1	; 0x20
	for(count=0;count<=count_glo;count++)
    2556:	1d a2       	std	Y+37, r1	; 0x25
    2558:	99 c0       	rjmp	.+306    	; 0x268c <Division_Function+0x164>
	{
		res_num1=res_num1*10 + num1[count];
    255a:	89 a1       	ldd	r24, Y+33	; 0x21
    255c:	9a a1       	ldd	r25, Y+34	; 0x22
    255e:	ab a1       	ldd	r26, Y+35	; 0x23
    2560:	bc a1       	ldd	r27, Y+36	; 0x24
    2562:	2a e0       	ldi	r18, 0x0A	; 10
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    2572:	9b 01       	movw	r18, r22
    2574:	ac 01       	movw	r20, r24
    2576:	8d a1       	ldd	r24, Y+37	; 0x25
    2578:	88 2f       	mov	r24, r24
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	fc 01       	movw	r30, r24
    2586:	ec 56       	subi	r30, 0x6C	; 108
    2588:	fe 4f       	sbci	r31, 0xFE	; 254
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	a2 81       	ldd	r26, Z+2	; 0x02
    2590:	b3 81       	ldd	r27, Z+3	; 0x03
    2592:	82 0f       	add	r24, r18
    2594:	93 1f       	adc	r25, r19
    2596:	a4 1f       	adc	r26, r20
    2598:	b5 1f       	adc	r27, r21
    259a:	89 a3       	std	Y+33, r24	; 0x21
    259c:	9a a3       	std	Y+34, r25	; 0x22
    259e:	ab a3       	std	Y+35, r26	; 0x23
    25a0:	bc a3       	std	Y+36, r27	; 0x24
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	a6 e9       	ldi	r26, 0x96	; 150
    25a8:	b3 e4       	ldi	r27, 0x43	; 67
    25aa:	89 8f       	std	Y+25, r24	; 0x19
    25ac:	9a 8f       	std	Y+26, r25	; 0x1a
    25ae:	ab 8f       	std	Y+27, r26	; 0x1b
    25b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b2:	69 8d       	ldd	r22, Y+25	; 0x19
    25b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a e7       	ldi	r20, 0x7A	; 122
    25c0:	53 e4       	ldi	r21, 0x43	; 67
    25c2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	8d 8b       	std	Y+21, r24	; 0x15
    25cc:	9e 8b       	std	Y+22, r25	; 0x16
    25ce:	af 8b       	std	Y+23, r26	; 0x17
    25d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25d2:	6d 89       	ldd	r22, Y+21	; 0x15
    25d4:	7e 89       	ldd	r23, Y+22	; 0x16
    25d6:	8f 89       	ldd	r24, Y+23	; 0x17
    25d8:	98 8d       	ldd	r25, Y+24	; 0x18
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	2c f4       	brge	.+10     	; 0x25f4 <Division_Function+0xcc>
		__ticks = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
    25f2:	3f c0       	rjmp	.+126    	; 0x2672 <Division_Function+0x14a>
	else if (__tmp > 65535)
    25f4:	6d 89       	ldd	r22, Y+21	; 0x15
    25f6:	7e 89       	ldd	r23, Y+22	; 0x16
    25f8:	8f 89       	ldd	r24, Y+23	; 0x17
    25fa:	98 8d       	ldd	r25, Y+24	; 0x18
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	3f ef       	ldi	r19, 0xFF	; 255
    2600:	4f e7       	ldi	r20, 0x7F	; 127
    2602:	57 e4       	ldi	r21, 0x47	; 71
    2604:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2608:	18 16       	cp	r1, r24
    260a:	4c f5       	brge	.+82     	; 0x265e <Division_Function+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	69 8d       	ldd	r22, Y+25	; 0x19
    260e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e2       	ldi	r20, 0x20	; 32
    261a:	51 e4       	ldi	r21, 0x41	; 65
    261c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9c 8b       	std	Y+20, r25	; 0x14
    2632:	8b 8b       	std	Y+19, r24	; 0x13
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <Division_Function+0x12c>
    2636:	89 e1       	ldi	r24, 0x19	; 25
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9a 8b       	std	Y+18, r25	; 0x12
    263c:	89 8b       	std	Y+17, r24	; 0x11
    263e:	89 89       	ldd	r24, Y+17	; 0x11
    2640:	9a 89       	ldd	r25, Y+18	; 0x12
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <Division_Function+0x11a>
    2646:	9a 8b       	std	Y+18, r25	; 0x12
    2648:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	9c 89       	ldd	r25, Y+20	; 0x14
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2654:	8b 89       	ldd	r24, Y+19	; 0x13
    2656:	9c 89       	ldd	r25, Y+20	; 0x14
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	69 f7       	brne	.-38     	; 0x2636 <Division_Function+0x10e>
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <Division_Function+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	6d 89       	ldd	r22, Y+21	; 0x15
    2660:	7e 89       	ldd	r23, Y+22	; 0x16
    2662:	8f 89       	ldd	r24, Y+23	; 0x17
    2664:	98 8d       	ldd	r25, Y+24	; 0x18
    2666:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	9c 8b       	std	Y+20, r25	; 0x14
    2670:	8b 8b       	std	Y+19, r24	; 0x13
    2672:	8b 89       	ldd	r24, Y+19	; 0x13
    2674:	9c 89       	ldd	r25, Y+20	; 0x14
    2676:	98 8b       	std	Y+16, r25	; 0x10
    2678:	8f 87       	std	Y+15, r24	; 0x0f
    267a:	8f 85       	ldd	r24, Y+15	; 0x0f
    267c:	98 89       	ldd	r25, Y+16	; 0x10
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <Division_Function+0x156>
    2682:	98 8b       	std	Y+16, r25	; 0x10
    2684:	8f 87       	std	Y+15, r24	; 0x0f
static float Division_Function(void)
{
	uint8 count=0;
	sint32 res_num1=0;
	sint32 res_num2=0;
	for(count=0;count<=count_glo;count++)
    2686:	8d a1       	ldd	r24, Y+37	; 0x25
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	8d a3       	std	Y+37, r24	; 0x25
    268c:	90 91 92 01 	lds	r25, 0x0192
    2690:	8d a1       	ldd	r24, Y+37	; 0x25
    2692:	98 17       	cp	r25, r24
    2694:	08 f0       	brcs	.+2      	; 0x2698 <Division_Function+0x170>
    2696:	61 cf       	rjmp	.-318    	; 0x255a <Division_Function+0x32>
	{
		res_num1=res_num1*10 + num1[count];
		_delay_ms(300);
	}
	for(count=0;count<=count_glo_2;count++)
    2698:	1d a2       	std	Y+37, r1	; 0x25
    269a:	99 c0       	rjmp	.+306    	; 0x27ce <Division_Function+0x2a6>
	{
		res_num2=res_num2*10 + num2[count];
    269c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    269e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26a0:	af 8d       	ldd	r26, Y+31	; 0x1f
    26a2:	b8 a1       	ldd	r27, Y+32	; 0x20
    26a4:	2a e0       	ldi	r18, 0x0A	; 10
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	50 e0       	ldi	r21, 0x00	; 0
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsi3>
    26b4:	9b 01       	movw	r18, r22
    26b6:	ac 01       	movw	r20, r24
    26b8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	fc 01       	movw	r30, r24
    26c8:	e8 55       	subi	r30, 0x58	; 88
    26ca:	fe 4f       	sbci	r31, 0xFE	; 254
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	a2 81       	ldd	r26, Z+2	; 0x02
    26d2:	b3 81       	ldd	r27, Z+3	; 0x03
    26d4:	82 0f       	add	r24, r18
    26d6:	93 1f       	adc	r25, r19
    26d8:	a4 1f       	adc	r26, r20
    26da:	b5 1f       	adc	r27, r21
    26dc:	8d 8f       	std	Y+29, r24	; 0x1d
    26de:	9e 8f       	std	Y+30, r25	; 0x1e
    26e0:	af 8f       	std	Y+31, r26	; 0x1f
    26e2:	b8 a3       	std	Y+32, r27	; 0x20
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a6 e9       	ldi	r26, 0x96	; 150
    26ea:	b3 e4       	ldi	r27, 0x43	; 67
    26ec:	8b 87       	std	Y+11, r24	; 0x0b
    26ee:	9c 87       	std	Y+12, r25	; 0x0c
    26f0:	ad 87       	std	Y+13, r26	; 0x0d
    26f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a e7       	ldi	r20, 0x7A	; 122
    2702:	53 e4       	ldi	r21, 0x43	; 67
    2704:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	8f 83       	std	Y+7, r24	; 0x07
    270e:	98 87       	std	Y+8, r25	; 0x08
    2710:	a9 87       	std	Y+9, r26	; 0x09
    2712:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2714:	6f 81       	ldd	r22, Y+7	; 0x07
    2716:	78 85       	ldd	r23, Y+8	; 0x08
    2718:	89 85       	ldd	r24, Y+9	; 0x09
    271a:	9a 85       	ldd	r25, Y+10	; 0x0a
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <Division_Function+0x20e>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <Division_Function+0x28c>
	else if (__tmp > 65535)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <Division_Function+0x278>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2750:	7c 85       	ldd	r23, Y+12	; 0x0c
    2752:	8d 85       	ldd	r24, Y+13	; 0x0d
    2754:	9e 85       	ldd	r25, Y+14	; 0x0e
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <Division_Function+0x26e>
    2778:	89 e1       	ldi	r24, 0x19	; 25
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9c 83       	std	Y+4, r25	; 0x04
    277e:	8b 83       	std	Y+3, r24	; 0x03
    2780:	8b 81       	ldd	r24, Y+3	; 0x03
    2782:	9c 81       	ldd	r25, Y+4	; 0x04
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <Division_Function+0x25c>
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <Division_Function+0x250>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <Division_Function+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	6f 81       	ldd	r22, Y+7	; 0x07
    27a2:	78 85       	ldd	r23, Y+8	; 0x08
    27a4:	89 85       	ldd	r24, Y+9	; 0x09
    27a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	8d 81       	ldd	r24, Y+5	; 0x05
    27b6:	9e 81       	ldd	r25, Y+6	; 0x06
    27b8:	9a 83       	std	Y+2, r25	; 0x02
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <Division_Function+0x298>
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
	for(count=0;count<=count_glo;count++)
	{
		res_num1=res_num1*10 + num1[count];
		_delay_ms(300);
	}
	for(count=0;count<=count_glo_2;count++)
    27c8:	8d a1       	ldd	r24, Y+37	; 0x25
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	8d a3       	std	Y+37, r24	; 0x25
    27ce:	90 91 93 01 	lds	r25, 0x0193
    27d2:	8d a1       	ldd	r24, Y+37	; 0x25
    27d4:	98 17       	cp	r25, r24
    27d6:	08 f0       	brcs	.+2      	; 0x27da <Division_Function+0x2b2>
    27d8:	61 cf       	rjmp	.-318    	; 0x269c <Division_Function+0x174>
	{
		res_num2=res_num2*10 + num2[count];
		_delay_ms(300);
	}
	if(res_num2==0)
    27da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27de:	af 8d       	ldd	r26, Y+31	; 0x1f
    27e0:	b8 a1       	ldd	r27, Y+32	; 0x20
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	a1 05       	cpc	r26, r1
    27e6:	b1 05       	cpc	r27, r1
    27e8:	49 f4       	brne	.+18     	; 0x27fc <Division_Function+0x2d4>
	{
		return 'e';
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	aa ec       	ldi	r26, 0xCA	; 202
    27f0:	b2 e4       	ldi	r27, 0x42	; 66
    27f2:	8e a3       	std	Y+38, r24	; 0x26
    27f4:	9f a3       	std	Y+39, r25	; 0x27
    27f6:	a8 a7       	std	Y+40, r26	; 0x28
    27f8:	b9 a7       	std	Y+41, r27	; 0x29
    27fa:	1a c0       	rjmp	.+52     	; 0x2830 <Division_Function+0x308>
	}

	return ((float)res_num1/res_num2);
    27fc:	69 a1       	ldd	r22, Y+33	; 0x21
    27fe:	7a a1       	ldd	r23, Y+34	; 0x22
    2800:	8b a1       	ldd	r24, Y+35	; 0x23
    2802:	9c a1       	ldd	r25, Y+36	; 0x24
    2804:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    2808:	7b 01       	movw	r14, r22
    280a:	8c 01       	movw	r16, r24
    280c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    280e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2810:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2812:	98 a1       	ldd	r25, Y+32	; 0x20
    2814:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    2818:	9b 01       	movw	r18, r22
    281a:	ac 01       	movw	r20, r24
    281c:	c8 01       	movw	r24, r16
    281e:	b7 01       	movw	r22, r14
    2820:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8e a3       	std	Y+38, r24	; 0x26
    282a:	9f a3       	std	Y+39, r25	; 0x27
    282c:	a8 a7       	std	Y+40, r26	; 0x28
    282e:	b9 a7       	std	Y+41, r27	; 0x29
    2830:	8e a1       	ldd	r24, Y+38	; 0x26
    2832:	9f a1       	ldd	r25, Y+39	; 0x27
    2834:	a8 a5       	ldd	r26, Y+40	; 0x28
    2836:	b9 a5       	ldd	r27, Y+41	; 0x29
}
    2838:	bc 01       	movw	r22, r24
    283a:	cd 01       	movw	r24, r26
    283c:	a9 96       	adiw	r28, 0x29	; 41
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	1f 91       	pop	r17
    284e:	0f 91       	pop	r16
    2850:	ff 90       	pop	r15
    2852:	ef 90       	pop	r14
    2854:	08 95       	ret

00002856 <GPIO_setupPinDirection>:
 */
#include "Gpio.h"
#include "common_macros.h"

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,GPIO_PinDirection direction)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <GPIO_setupPinDirection+0x6>
    285c:	00 d0       	rcall	.+0      	; 0x285e <GPIO_setupPinDirection+0x8>
    285e:	0f 92       	push	r0
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	6a 83       	std	Y+2, r22	; 0x02
    2868:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num>PORT_NUMS || pin_num > PINS_PER_PORT)
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	85 30       	cpi	r24, 0x05	; 5
    286e:	08 f0       	brcs	.+2      	; 0x2872 <GPIO_setupPinDirection+0x1c>
    2870:	e4 c0       	rjmp	.+456    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
    2872:	8a 81       	ldd	r24, Y+2	; 0x02
    2874:	89 30       	cpi	r24, 0x09	; 9
    2876:	08 f0       	brcs	.+2      	; 0x287a <GPIO_setupPinDirection+0x24>
    2878:	e0 c0       	rjmp	.+448    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
	{
		/*  NOTHING */
	}
	else
	{
		switch(port_num)
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	3d 83       	std	Y+5, r19	; 0x05
    2882:	2c 83       	std	Y+4, r18	; 0x04
    2884:	8c 81       	ldd	r24, Y+4	; 0x04
    2886:	9d 81       	ldd	r25, Y+5	; 0x05
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	91 05       	cpc	r25, r1
    288c:	09 f4       	brne	.+2      	; 0x2890 <GPIO_setupPinDirection+0x3a>
    288e:	47 c0       	rjmp	.+142    	; 0x291e <GPIO_setupPinDirection+0xc8>
    2890:	2c 81       	ldd	r18, Y+4	; 0x04
    2892:	3d 81       	ldd	r19, Y+5	; 0x05
    2894:	22 30       	cpi	r18, 0x02	; 2
    2896:	31 05       	cpc	r19, r1
    2898:	2c f4       	brge	.+10     	; 0x28a4 <GPIO_setupPinDirection+0x4e>
    289a:	8c 81       	ldd	r24, Y+4	; 0x04
    289c:	9d 81       	ldd	r25, Y+5	; 0x05
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	71 f0       	breq	.+28     	; 0x28be <GPIO_setupPinDirection+0x68>
    28a2:	cb c0       	rjmp	.+406    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
    28a4:	2c 81       	ldd	r18, Y+4	; 0x04
    28a6:	3d 81       	ldd	r19, Y+5	; 0x05
    28a8:	22 30       	cpi	r18, 0x02	; 2
    28aa:	31 05       	cpc	r19, r1
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <GPIO_setupPinDirection+0x5a>
    28ae:	67 c0       	rjmp	.+206    	; 0x297e <GPIO_setupPinDirection+0x128>
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	9d 81       	ldd	r25, Y+5	; 0x05
    28b4:	83 30       	cpi	r24, 0x03	; 3
    28b6:	91 05       	cpc	r25, r1
    28b8:	09 f4       	brne	.+2      	; 0x28bc <GPIO_setupPinDirection+0x66>
    28ba:	91 c0       	rjmp	.+290    	; 0x29de <GPIO_setupPinDirection+0x188>
    28bc:	be c0       	rjmp	.+380    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
		{
			case PORTA_ID:
				if (direction == PIN_OUTPUT)
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	a1 f4       	brne	.+40     	; 0x28ec <GPIO_setupPinDirection+0x96>
				{
					SET_BIT(DDRA_REG,pin_num);
    28c4:	aa e3       	ldi	r26, 0x3A	; 58
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	ea e3       	ldi	r30, 0x3A	; 58
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	48 2f       	mov	r20, r24
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	02 2e       	mov	r0, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <GPIO_setupPinDirection+0x8c>
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	0a 94       	dec	r0
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <GPIO_setupPinDirection+0x88>
    28e6:	84 2b       	or	r24, r20
    28e8:	8c 93       	st	X, r24
    28ea:	a7 c0       	rjmp	.+334    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				}
				else if(direction == PIN_INPUT)
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	88 23       	and	r24, r24
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <GPIO_setupPinDirection+0x9e>
    28f2:	a3 c0       	rjmp	.+326    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				{
					CLEAR_BIT(DDRA_REG,pin_num);
    28f4:	aa e3       	ldi	r26, 0x3A	; 58
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ea e3       	ldi	r30, 0x3A	; 58
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	48 2f       	mov	r20, r24
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	02 2e       	mov	r0, r18
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <GPIO_setupPinDirection+0xbc>
    290e:	88 0f       	add	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	0a 94       	dec	r0
    2914:	e2 f7       	brpl	.-8      	; 0x290e <GPIO_setupPinDirection+0xb8>
    2916:	80 95       	com	r24
    2918:	84 23       	and	r24, r20
    291a:	8c 93       	st	X, r24
    291c:	8e c0       	rjmp	.+284    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				}
				break;
			case PORTB_ID:
				if (direction == PIN_OUTPUT)
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	81 30       	cpi	r24, 0x01	; 1
    2922:	a1 f4       	brne	.+40     	; 0x294c <GPIO_setupPinDirection+0xf6>
				{
					SET_BIT(DDRB_REG,pin_num);
    2924:	a7 e3       	ldi	r26, 0x37	; 55
    2926:	b0 e0       	ldi	r27, 0x00	; 0
    2928:	e7 e3       	ldi	r30, 0x37	; 55
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	80 81       	ld	r24, Z
    292e:	48 2f       	mov	r20, r24
    2930:	8a 81       	ldd	r24, Y+2	; 0x02
    2932:	28 2f       	mov	r18, r24
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	02 2e       	mov	r0, r18
    293c:	02 c0       	rjmp	.+4      	; 0x2942 <GPIO_setupPinDirection+0xec>
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	0a 94       	dec	r0
    2944:	e2 f7       	brpl	.-8      	; 0x293e <GPIO_setupPinDirection+0xe8>
    2946:	84 2b       	or	r24, r20
    2948:	8c 93       	st	X, r24
    294a:	77 c0       	rjmp	.+238    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				}
				else if(direction == PIN_INPUT)
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	88 23       	and	r24, r24
    2950:	09 f0       	breq	.+2      	; 0x2954 <GPIO_setupPinDirection+0xfe>
    2952:	73 c0       	rjmp	.+230    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				{
					CLEAR_BIT(DDRB_REG,pin_num);
    2954:	a7 e3       	ldi	r26, 0x37	; 55
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e7 e3       	ldi	r30, 0x37	; 55
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	48 2f       	mov	r20, r24
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	02 2e       	mov	r0, r18
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <GPIO_setupPinDirection+0x11c>
    296e:	88 0f       	add	r24, r24
    2970:	99 1f       	adc	r25, r25
    2972:	0a 94       	dec	r0
    2974:	e2 f7       	brpl	.-8      	; 0x296e <GPIO_setupPinDirection+0x118>
    2976:	80 95       	com	r24
    2978:	84 23       	and	r24, r20
    297a:	8c 93       	st	X, r24
    297c:	5e c0       	rjmp	.+188    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				}
				break;
			case PORTC_ID:
				if (direction == PIN_OUTPUT)
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	81 30       	cpi	r24, 0x01	; 1
    2982:	a1 f4       	brne	.+40     	; 0x29ac <GPIO_setupPinDirection+0x156>
				{
					SET_BIT(DDRC_REG,pin_num);
    2984:	a4 e3       	ldi	r26, 0x34	; 52
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	e4 e3       	ldi	r30, 0x34	; 52
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	80 81       	ld	r24, Z
    298e:	48 2f       	mov	r20, r24
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	02 2e       	mov	r0, r18
    299c:	02 c0       	rjmp	.+4      	; 0x29a2 <GPIO_setupPinDirection+0x14c>
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	0a 94       	dec	r0
    29a4:	e2 f7       	brpl	.-8      	; 0x299e <GPIO_setupPinDirection+0x148>
    29a6:	84 2b       	or	r24, r20
    29a8:	8c 93       	st	X, r24
    29aa:	47 c0       	rjmp	.+142    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				}
				else if(direction == PIN_INPUT)
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	88 23       	and	r24, r24
    29b0:	09 f0       	breq	.+2      	; 0x29b4 <GPIO_setupPinDirection+0x15e>
    29b2:	43 c0       	rjmp	.+134    	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				{
					CLEAR_BIT(DDRC_REG,pin_num);
    29b4:	a4 e3       	ldi	r26, 0x34	; 52
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e4 e3       	ldi	r30, 0x34	; 52
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	48 2f       	mov	r20, r24
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	02 2e       	mov	r0, r18
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <GPIO_setupPinDirection+0x17c>
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	0a 94       	dec	r0
    29d4:	e2 f7       	brpl	.-8      	; 0x29ce <GPIO_setupPinDirection+0x178>
    29d6:	80 95       	com	r24
    29d8:	84 23       	and	r24, r20
    29da:	8c 93       	st	X, r24
    29dc:	2e c0       	rjmp	.+92     	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				}
				break;
			case PORTD_ID:
				if (direction == PIN_OUTPUT)
    29de:	8b 81       	ldd	r24, Y+3	; 0x03
    29e0:	81 30       	cpi	r24, 0x01	; 1
    29e2:	a1 f4       	brne	.+40     	; 0x2a0c <GPIO_setupPinDirection+0x1b6>
				{
					SET_BIT(DDRD_REG,pin_num);
    29e4:	a1 e3       	ldi	r26, 0x31	; 49
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e1 e3       	ldi	r30, 0x31	; 49
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	48 2f       	mov	r20, r24
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	02 2e       	mov	r0, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <GPIO_setupPinDirection+0x1ac>
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	0a 94       	dec	r0
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <GPIO_setupPinDirection+0x1a8>
    2a06:	84 2b       	or	r24, r20
    2a08:	8c 93       	st	X, r24
    2a0a:	17 c0       	rjmp	.+46     	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				}
				else if(direction == PIN_INPUT)
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	88 23       	and	r24, r24
    2a10:	a1 f4       	brne	.+40     	; 0x2a3a <GPIO_setupPinDirection+0x1e4>
				{
					CLEAR_BIT(DDRD_REG,pin_num);
    2a12:	a1 e3       	ldi	r26, 0x31	; 49
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	e1 e3       	ldi	r30, 0x31	; 49
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	48 2f       	mov	r20, r24
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	28 2f       	mov	r18, r24
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	02 2e       	mov	r0, r18
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <GPIO_setupPinDirection+0x1da>
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	0a 94       	dec	r0
    2a32:	e2 f7       	brpl	.-8      	; 0x2a2c <GPIO_setupPinDirection+0x1d6>
    2a34:	80 95       	com	r24
    2a36:	84 23       	and	r24, r20
    2a38:	8c 93       	st	X, r24
				}
				break;
		}
	}
}
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	0f 90       	pop	r0
    2a44:	cf 91       	pop	r28
    2a46:	df 91       	pop	r29
    2a48:	08 95       	ret

00002a4a <GPIO_writePin>:
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2a4a:	df 93       	push	r29
    2a4c:	cf 93       	push	r28
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <GPIO_writePin+0x6>
    2a50:	00 d0       	rcall	.+0      	; 0x2a52 <GPIO_writePin+0x8>
    2a52:	0f 92       	push	r0
    2a54:	cd b7       	in	r28, 0x3d	; 61
    2a56:	de b7       	in	r29, 0x3e	; 62
    2a58:	89 83       	std	Y+1, r24	; 0x01
    2a5a:	6a 83       	std	Y+2, r22	; 0x02
    2a5c:	4b 83       	std	Y+3, r20	; 0x03
	if (port_num > PORT_NUMS || pin_num >PINS_PER_PORT)
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	85 30       	cpi	r24, 0x05	; 5
    2a62:	08 f0       	brcs	.+2      	; 0x2a66 <GPIO_writePin+0x1c>
    2a64:	e4 c0       	rjmp	.+456    	; 0x2c2e <GPIO_writePin+0x1e4>
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	89 30       	cpi	r24, 0x09	; 9
    2a6a:	08 f0       	brcs	.+2      	; 0x2a6e <GPIO_writePin+0x24>
    2a6c:	e0 c0       	rjmp	.+448    	; 0x2c2e <GPIO_writePin+0x1e4>
	{

	}
	else
	{
		switch(port_num)
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	3d 83       	std	Y+5, r19	; 0x05
    2a76:	2c 83       	std	Y+4, r18	; 0x04
    2a78:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7c:	81 30       	cpi	r24, 0x01	; 1
    2a7e:	91 05       	cpc	r25, r1
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <GPIO_writePin+0x3a>
    2a82:	47 c0       	rjmp	.+142    	; 0x2b12 <GPIO_writePin+0xc8>
    2a84:	2c 81       	ldd	r18, Y+4	; 0x04
    2a86:	3d 81       	ldd	r19, Y+5	; 0x05
    2a88:	22 30       	cpi	r18, 0x02	; 2
    2a8a:	31 05       	cpc	r19, r1
    2a8c:	2c f4       	brge	.+10     	; 0x2a98 <GPIO_writePin+0x4e>
    2a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a90:	9d 81       	ldd	r25, Y+5	; 0x05
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	71 f0       	breq	.+28     	; 0x2ab2 <GPIO_writePin+0x68>
    2a96:	cb c0       	rjmp	.+406    	; 0x2c2e <GPIO_writePin+0x1e4>
    2a98:	2c 81       	ldd	r18, Y+4	; 0x04
    2a9a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a9c:	22 30       	cpi	r18, 0x02	; 2
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <GPIO_writePin+0x5a>
    2aa2:	67 c0       	rjmp	.+206    	; 0x2b72 <GPIO_writePin+0x128>
    2aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa8:	83 30       	cpi	r24, 0x03	; 3
    2aaa:	91 05       	cpc	r25, r1
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <GPIO_writePin+0x66>
    2aae:	91 c0       	rjmp	.+290    	; 0x2bd2 <GPIO_writePin+0x188>
    2ab0:	be c0       	rjmp	.+380    	; 0x2c2e <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value==LOGIC_HIGH)
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	81 30       	cpi	r24, 0x01	; 1
    2ab6:	a1 f4       	brne	.+40     	; 0x2ae0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA_REG,pin_num);
    2ab8:	ab e3       	ldi	r26, 0x3B	; 59
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	eb e3       	ldi	r30, 0x3B	; 59
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	02 2e       	mov	r0, r18
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <GPIO_writePin+0x8c>
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	0a 94       	dec	r0
    2ad8:	e2 f7       	brpl	.-8      	; 0x2ad2 <GPIO_writePin+0x88>
    2ada:	84 2b       	or	r24, r20
    2adc:	8c 93       	st	X, r24
    2ade:	a7 c0       	rjmp	.+334    	; 0x2c2e <GPIO_writePin+0x1e4>
			}
			else if(value==LOGIC_LOW)
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	88 23       	and	r24, r24
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <GPIO_writePin+0x9e>
    2ae6:	a3 c0       	rjmp	.+326    	; 0x2c2e <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTA_REG,pin_num);
    2ae8:	ab e3       	ldi	r26, 0x3B	; 59
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	eb e3       	ldi	r30, 0x3B	; 59
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	48 2f       	mov	r20, r24
    2af4:	8a 81       	ldd	r24, Y+2	; 0x02
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	02 2e       	mov	r0, r18
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <GPIO_writePin+0xbc>
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	0a 94       	dec	r0
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <GPIO_writePin+0xb8>
    2b0a:	80 95       	com	r24
    2b0c:	84 23       	and	r24, r20
    2b0e:	8c 93       	st	X, r24
    2b10:	8e c0       	rjmp	.+284    	; 0x2c2e <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID:
			if(value==LOGIC_HIGH)
    2b12:	8b 81       	ldd	r24, Y+3	; 0x03
    2b14:	81 30       	cpi	r24, 0x01	; 1
    2b16:	a1 f4       	brne	.+40     	; 0x2b40 <GPIO_writePin+0xf6>
			{
				SET_BIT(PORTB_REG,pin_num);
    2b18:	a8 e3       	ldi	r26, 0x38	; 56
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	e8 e3       	ldi	r30, 0x38	; 56
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	48 2f       	mov	r20, r24
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 2e       	mov	r0, r18
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <GPIO_writePin+0xec>
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	0a 94       	dec	r0
    2b38:	e2 f7       	brpl	.-8      	; 0x2b32 <GPIO_writePin+0xe8>
    2b3a:	84 2b       	or	r24, r20
    2b3c:	8c 93       	st	X, r24
    2b3e:	77 c0       	rjmp	.+238    	; 0x2c2e <GPIO_writePin+0x1e4>
			}
			else if(value==LOGIC_LOW)
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	88 23       	and	r24, r24
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <GPIO_writePin+0xfe>
    2b46:	73 c0       	rjmp	.+230    	; 0x2c2e <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTB_REG,pin_num);
    2b48:	a8 e3       	ldi	r26, 0x38	; 56
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	e8 e3       	ldi	r30, 0x38	; 56
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	48 2f       	mov	r20, r24
    2b54:	8a 81       	ldd	r24, Y+2	; 0x02
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	02 2e       	mov	r0, r18
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <GPIO_writePin+0x11c>
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	0a 94       	dec	r0
    2b68:	e2 f7       	brpl	.-8      	; 0x2b62 <GPIO_writePin+0x118>
    2b6a:	80 95       	com	r24
    2b6c:	84 23       	and	r24, r20
    2b6e:	8c 93       	st	X, r24
    2b70:	5e c0       	rjmp	.+188    	; 0x2c2e <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID:
			if(value==LOGIC_HIGH)
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	a1 f4       	brne	.+40     	; 0x2ba0 <GPIO_writePin+0x156>
			{
				SET_BIT(PORTC_REG,pin_num);
    2b78:	a5 e3       	ldi	r26, 0x35	; 53
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e5 e3       	ldi	r30, 0x35	; 53
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	48 2f       	mov	r20, r24
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	02 2e       	mov	r0, r18
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <GPIO_writePin+0x14c>
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	0a 94       	dec	r0
    2b98:	e2 f7       	brpl	.-8      	; 0x2b92 <GPIO_writePin+0x148>
    2b9a:	84 2b       	or	r24, r20
    2b9c:	8c 93       	st	X, r24
    2b9e:	47 c0       	rjmp	.+142    	; 0x2c2e <GPIO_writePin+0x1e4>
			}
			else if(value==LOGIC_LOW)
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	88 23       	and	r24, r24
    2ba4:	09 f0       	breq	.+2      	; 0x2ba8 <GPIO_writePin+0x15e>
    2ba6:	43 c0       	rjmp	.+134    	; 0x2c2e <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTC_REG,pin_num);
    2ba8:	a5 e3       	ldi	r26, 0x35	; 53
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e5 e3       	ldi	r30, 0x35	; 53
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
    2bb2:	48 2f       	mov	r20, r24
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	02 2e       	mov	r0, r18
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <GPIO_writePin+0x17c>
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	0a 94       	dec	r0
    2bc8:	e2 f7       	brpl	.-8      	; 0x2bc2 <GPIO_writePin+0x178>
    2bca:	80 95       	com	r24
    2bcc:	84 23       	and	r24, r20
    2bce:	8c 93       	st	X, r24
    2bd0:	2e c0       	rjmp	.+92     	; 0x2c2e <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID:
			if(value==LOGIC_HIGH)
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	a1 f4       	brne	.+40     	; 0x2c00 <GPIO_writePin+0x1b6>
			{
				SET_BIT(PORTD_REG,pin_num);
    2bd8:	a2 e3       	ldi	r26, 0x32	; 50
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e2 e3       	ldi	r30, 0x32	; 50
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	48 2f       	mov	r20, r24
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	02 2e       	mov	r0, r18
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <GPIO_writePin+0x1ac>
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	0a 94       	dec	r0
    2bf8:	e2 f7       	brpl	.-8      	; 0x2bf2 <GPIO_writePin+0x1a8>
    2bfa:	84 2b       	or	r24, r20
    2bfc:	8c 93       	st	X, r24
    2bfe:	17 c0       	rjmp	.+46     	; 0x2c2e <GPIO_writePin+0x1e4>
			}
			else if(value==LOGIC_LOW)
    2c00:	8b 81       	ldd	r24, Y+3	; 0x03
    2c02:	88 23       	and	r24, r24
    2c04:	a1 f4       	brne	.+40     	; 0x2c2e <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTD_REG,pin_num);
    2c06:	a2 e3       	ldi	r26, 0x32	; 50
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e2 e3       	ldi	r30, 0x32	; 50
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	48 2f       	mov	r20, r24
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 2e       	mov	r0, r18
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <GPIO_writePin+0x1da>
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	0a 94       	dec	r0
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <GPIO_writePin+0x1d6>
    2c28:	80 95       	com	r24
    2c2a:	84 23       	and	r24, r20
    2c2c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2c2e:	0f 90       	pop	r0
    2c30:	0f 90       	pop	r0
    2c32:	0f 90       	pop	r0
    2c34:	0f 90       	pop	r0
    2c36:	0f 90       	pop	r0
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <GPIO_readPin>:
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	00 d0       	rcall	.+0      	; 0x2c44 <GPIO_readPin+0x6>
    2c44:	00 d0       	rcall	.+0      	; 0x2c46 <GPIO_readPin+0x8>
    2c46:	0f 92       	push	r0
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	8a 83       	std	Y+2, r24	; 0x02
    2c4e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 PIN_value=LOGIC_LOW;
    2c50:	19 82       	std	Y+1, r1	; 0x01
	if (port_num > PORT_NUMS || pin_num >PINS_PER_PORT)
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	85 30       	cpi	r24, 0x05	; 5
    2c56:	08 f0       	brcs	.+2      	; 0x2c5a <GPIO_readPin+0x1c>
    2c58:	43 c0       	rjmp	.+134    	; 0x2ce0 <GPIO_readPin+0xa2>
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	89 30       	cpi	r24, 0x09	; 9
    2c5e:	08 f0       	brcs	.+2      	; 0x2c62 <GPIO_readPin+0x24>
    2c60:	3f c0       	rjmp	.+126    	; 0x2ce0 <GPIO_readPin+0xa2>
	{

	}
	else
	{
		switch(port_num)
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	3d 83       	std	Y+5, r19	; 0x05
    2c6a:	2c 83       	std	Y+4, r18	; 0x04
    2c6c:	4c 81       	ldd	r20, Y+4	; 0x04
    2c6e:	5d 81       	ldd	r21, Y+5	; 0x05
    2c70:	41 15       	cp	r20, r1
    2c72:	51 05       	cpc	r21, r1
    2c74:	31 f0       	breq	.+12     	; 0x2c82 <GPIO_readPin+0x44>
    2c76:	8c 81       	ldd	r24, Y+4	; 0x04
    2c78:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7a:	81 30       	cpi	r24, 0x01	; 1
    2c7c:	91 05       	cpc	r25, r1
    2c7e:	c9 f0       	breq	.+50     	; 0x2cb2 <GPIO_readPin+0x74>
    2c80:	2f c0       	rjmp	.+94     	; 0x2ce0 <GPIO_readPin+0xa2>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,pin_num))
    2c82:	e9 e3       	ldi	r30, 0x39	; 57
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8e:	88 2f       	mov	r24, r24
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	a9 01       	movw	r20, r18
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <GPIO_readPin+0x5c>
    2c96:	55 95       	asr	r21
    2c98:	47 95       	ror	r20
    2c9a:	8a 95       	dec	r24
    2c9c:	e2 f7       	brpl	.-8      	; 0x2c96 <GPIO_readPin+0x58>
    2c9e:	ca 01       	movw	r24, r20
    2ca0:	81 70       	andi	r24, 0x01	; 1
    2ca2:	90 70       	andi	r25, 0x00	; 0
    2ca4:	88 23       	and	r24, r24
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <GPIO_readPin+0x70>
			{
				PIN_value=LOGIC_HIGH;
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	19 c0       	rjmp	.+50     	; 0x2ce0 <GPIO_readPin+0xa2>
			}
			else
			{
				PIN_value=LOGIC_LOW;
    2cae:	19 82       	std	Y+1, r1	; 0x01
    2cb0:	17 c0       	rjmp	.+46     	; 0x2ce0 <GPIO_readPin+0xa2>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,pin_num))
    2cb2:	e6 e3       	ldi	r30, 0x36	; 54
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbe:	88 2f       	mov	r24, r24
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	a9 01       	movw	r20, r18
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <GPIO_readPin+0x8c>
    2cc6:	55 95       	asr	r21
    2cc8:	47 95       	ror	r20
    2cca:	8a 95       	dec	r24
    2ccc:	e2 f7       	brpl	.-8      	; 0x2cc6 <GPIO_readPin+0x88>
    2cce:	ca 01       	movw	r24, r20
    2cd0:	81 70       	andi	r24, 0x01	; 1
    2cd2:	90 70       	andi	r25, 0x00	; 0
    2cd4:	88 23       	and	r24, r24
    2cd6:	19 f0       	breq	.+6      	; 0x2cde <GPIO_readPin+0xa0>
			{
				PIN_value=LOGIC_HIGH;
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	01 c0       	rjmp	.+2      	; 0x2ce0 <GPIO_readPin+0xa2>
			}
			else
			{
				PIN_value=LOGIC_LOW;
    2cde:	19 82       	std	Y+1, r1	; 0x01
				PIN_value=LOGIC_LOW;
			}
			break;
		}
	}
	return PIN_value;
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <GPIO_setupPortDirection>:
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirection direction)
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	00 d0       	rcall	.+0      	; 0x2cf8 <GPIO_setupPortDirection+0x6>
    2cf8:	00 d0       	rcall	.+0      	; 0x2cfa <GPIO_setupPortDirection+0x8>
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >PORT_NUMS)
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	85 30       	cpi	r24, 0x05	; 5
    2d06:	08 f0       	brcs	.+2      	; 0x2d0a <GPIO_setupPortDirection+0x18>
    2d08:	4e c0       	rjmp	.+156    	; 0x2da6 <GPIO_setupPortDirection+0xb4>
	{

	}
	else
	{
		switch(port_num)
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	3c 83       	std	Y+4, r19	; 0x04
    2d12:	2b 83       	std	Y+3, r18	; 0x03
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	9c 81       	ldd	r25, Y+4	; 0x04
    2d18:	81 30       	cpi	r24, 0x01	; 1
    2d1a:	91 05       	cpc	r25, r1
    2d1c:	09 f1       	breq	.+66     	; 0x2d60 <GPIO_setupPortDirection+0x6e>
    2d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d20:	3c 81       	ldd	r19, Y+4	; 0x04
    2d22:	22 30       	cpi	r18, 0x02	; 2
    2d24:	31 05       	cpc	r19, r1
    2d26:	2c f4       	brge	.+10     	; 0x2d32 <GPIO_setupPortDirection+0x40>
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	61 f0       	breq	.+24     	; 0x2d48 <GPIO_setupPortDirection+0x56>
    2d30:	3a c0       	rjmp	.+116    	; 0x2da6 <GPIO_setupPortDirection+0xb4>
    2d32:	2b 81       	ldd	r18, Y+3	; 0x03
    2d34:	3c 81       	ldd	r19, Y+4	; 0x04
    2d36:	22 30       	cpi	r18, 0x02	; 2
    2d38:	31 05       	cpc	r19, r1
    2d3a:	f1 f0       	breq	.+60     	; 0x2d78 <GPIO_setupPortDirection+0x86>
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d40:	83 30       	cpi	r24, 0x03	; 3
    2d42:	91 05       	cpc	r25, r1
    2d44:	29 f1       	breq	.+74     	; 0x2d90 <GPIO_setupPortDirection+0x9e>
    2d46:	2f c0       	rjmp	.+94     	; 0x2da6 <GPIO_setupPortDirection+0xb4>
		{
		case PORTA_ID:
			if(direction == PORT_OUTPUT)
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d4c:	29 f4       	brne	.+10     	; 0x2d58 <GPIO_setupPortDirection+0x66>
			{
				DDRA_REG=PORT_OUTPUT;
    2d4e:	ea e3       	ldi	r30, 0x3A	; 58
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	8f ef       	ldi	r24, 0xFF	; 255
    2d54:	80 83       	st	Z, r24
    2d56:	27 c0       	rjmp	.+78     	; 0x2da6 <GPIO_setupPortDirection+0xb4>
			}
			else
			{
				DDRA_REG=PORT_INPUT;
    2d58:	ea e3       	ldi	r30, 0x3A	; 58
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	10 82       	st	Z, r1
    2d5e:	23 c0       	rjmp	.+70     	; 0x2da6 <GPIO_setupPortDirection+0xb4>
			}
			break;
		case PORTB_ID:
				if(direction == PORT_OUTPUT)
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	8f 3f       	cpi	r24, 0xFF	; 255
    2d64:	29 f4       	brne	.+10     	; 0x2d70 <GPIO_setupPortDirection+0x7e>
				{
					DDRB_REG=PORT_OUTPUT;
    2d66:	e7 e3       	ldi	r30, 0x37	; 55
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	8f ef       	ldi	r24, 0xFF	; 255
    2d6c:	80 83       	st	Z, r24
    2d6e:	1b c0       	rjmp	.+54     	; 0x2da6 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRB_REG=PORT_INPUT;
    2d70:	e7 e3       	ldi	r30, 0x37	; 55
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	10 82       	st	Z, r1
    2d76:	17 c0       	rjmp	.+46     	; 0x2da6 <GPIO_setupPortDirection+0xb4>
				}
				break;
		case PORTC_ID:
				if(direction == PORT_OUTPUT)
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d7c:	29 f4       	brne	.+10     	; 0x2d88 <GPIO_setupPortDirection+0x96>
				{
					DDRC_REG=PORT_OUTPUT;
    2d7e:	e4 e3       	ldi	r30, 0x34	; 52
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	8f ef       	ldi	r24, 0xFF	; 255
    2d84:	80 83       	st	Z, r24
    2d86:	0f c0       	rjmp	.+30     	; 0x2da6 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRC_REG=PORT_INPUT;
    2d88:	e4 e3       	ldi	r30, 0x34	; 52
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	10 82       	st	Z, r1
    2d8e:	0b c0       	rjmp	.+22     	; 0x2da6 <GPIO_setupPortDirection+0xb4>
				}
				break;
		case PORTD_ID:
				if(direction == PORT_OUTPUT)
    2d90:	8a 81       	ldd	r24, Y+2	; 0x02
    2d92:	8f 3f       	cpi	r24, 0xFF	; 255
    2d94:	29 f4       	brne	.+10     	; 0x2da0 <GPIO_setupPortDirection+0xae>
				{
					DDRD_REG=PORT_OUTPUT;
    2d96:	e1 e3       	ldi	r30, 0x31	; 49
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	8f ef       	ldi	r24, 0xFF	; 255
    2d9c:	80 83       	st	Z, r24
    2d9e:	03 c0       	rjmp	.+6      	; 0x2da6 <GPIO_setupPortDirection+0xb4>
				}
				else
				{
					DDRD_REG=PORT_INPUT;
    2da0:	e1 e3       	ldi	r30, 0x31	; 49
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	10 82       	st	Z, r1
				}
				break;

	}
	}
}
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <GPIO_writePort>:
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <GPIO_writePort+0x6>
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <GPIO_writePort+0x8>
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >PORT_NUMS)
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	85 30       	cpi	r24, 0x05	; 5
    2dc8:	90 f5       	brcc	.+100    	; 0x2e2e <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	3c 83       	std	Y+4, r19	; 0x04
    2dd2:	2b 83       	std	Y+3, r18	; 0x03
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd8:	81 30       	cpi	r24, 0x01	; 1
    2dda:	91 05       	cpc	r25, r1
    2ddc:	d1 f0       	breq	.+52     	; 0x2e12 <GPIO_writePort+0x5e>
    2dde:	2b 81       	ldd	r18, Y+3	; 0x03
    2de0:	3c 81       	ldd	r19, Y+4	; 0x04
    2de2:	22 30       	cpi	r18, 0x02	; 2
    2de4:	31 05       	cpc	r19, r1
    2de6:	2c f4       	brge	.+10     	; 0x2df2 <GPIO_writePort+0x3e>
    2de8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dea:	9c 81       	ldd	r25, Y+4	; 0x04
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	61 f0       	breq	.+24     	; 0x2e08 <GPIO_writePort+0x54>
    2df0:	1e c0       	rjmp	.+60     	; 0x2e2e <GPIO_writePort+0x7a>
    2df2:	2b 81       	ldd	r18, Y+3	; 0x03
    2df4:	3c 81       	ldd	r19, Y+4	; 0x04
    2df6:	22 30       	cpi	r18, 0x02	; 2
    2df8:	31 05       	cpc	r19, r1
    2dfa:	81 f0       	breq	.+32     	; 0x2e1c <GPIO_writePort+0x68>
    2dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    2e00:	83 30       	cpi	r24, 0x03	; 3
    2e02:	91 05       	cpc	r25, r1
    2e04:	81 f0       	breq	.+32     	; 0x2e26 <GPIO_writePort+0x72>
    2e06:	13 c0       	rjmp	.+38     	; 0x2e2e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG=value;
    2e08:	eb e3       	ldi	r30, 0x3B	; 59
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	80 83       	st	Z, r24
    2e10:	0e c0       	rjmp	.+28     	; 0x2e2e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG=value;
    2e12:	e8 e3       	ldi	r30, 0x38	; 56
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	80 83       	st	Z, r24
    2e1a:	09 c0       	rjmp	.+18     	; 0x2e2e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG=value;
    2e1c:	e5 e3       	ldi	r30, 0x35	; 53
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	80 83       	st	Z, r24
    2e24:	04 c0       	rjmp	.+8      	; 0x2e2e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG=value;
    2e26:	e2 e3       	ldi	r30, 0x32	; 50
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	80 83       	st	Z, r24
			break;
		}
	}
}
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	08 95       	ret

00002e3c <GPIO_readPort>:
uint8 GPIO_readPort(uint8 port_num)
{
    2e3c:	df 93       	push	r29
    2e3e:	cf 93       	push	r28
    2e40:	00 d0       	rcall	.+0      	; 0x2e42 <GPIO_readPort+0x6>
    2e42:	00 d0       	rcall	.+0      	; 0x2e44 <GPIO_readPort+0x8>
    2e44:	0f 92       	push	r0
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PORT_VALUE;
	if(port_num >PORT_NUMS)
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	85 30       	cpi	r24, 0x05	; 5
    2e50:	10 f0       	brcs	.+4      	; 0x2e56 <GPIO_readPort+0x1a>
	{
		return 0;
    2e52:	1d 82       	std	Y+5, r1	; 0x05
    2e54:	34 c0       	rjmp	.+104    	; 0x2ebe <GPIO_readPort+0x82>
	}
	else
	{
		switch(port_num)
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	28 2f       	mov	r18, r24
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	3c 83       	std	Y+4, r19	; 0x04
    2e5e:	2b 83       	std	Y+3, r18	; 0x03
    2e60:	8b 81       	ldd	r24, Y+3	; 0x03
    2e62:	9c 81       	ldd	r25, Y+4	; 0x04
    2e64:	81 30       	cpi	r24, 0x01	; 1
    2e66:	91 05       	cpc	r25, r1
    2e68:	d1 f0       	breq	.+52     	; 0x2e9e <GPIO_readPort+0x62>
    2e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    2e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    2e6e:	22 30       	cpi	r18, 0x02	; 2
    2e70:	31 05       	cpc	r19, r1
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <GPIO_readPort+0x42>
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	61 f0       	breq	.+24     	; 0x2e94 <GPIO_readPort+0x58>
    2e7c:	1e c0       	rjmp	.+60     	; 0x2eba <GPIO_readPort+0x7e>
    2e7e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e80:	3c 81       	ldd	r19, Y+4	; 0x04
    2e82:	22 30       	cpi	r18, 0x02	; 2
    2e84:	31 05       	cpc	r19, r1
    2e86:	81 f0       	breq	.+32     	; 0x2ea8 <GPIO_readPort+0x6c>
    2e88:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e8c:	83 30       	cpi	r24, 0x03	; 3
    2e8e:	91 05       	cpc	r25, r1
    2e90:	81 f0       	breq	.+32     	; 0x2eb2 <GPIO_readPort+0x76>
    2e92:	13 c0       	rjmp	.+38     	; 0x2eba <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			PORT_VALUE=PINA_REG;
    2e94:	e9 e3       	ldi	r30, 0x39	; 57
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	89 83       	std	Y+1, r24	; 0x01
    2e9c:	0e c0       	rjmp	.+28     	; 0x2eba <GPIO_readPort+0x7e>
			break;
		case PORTB_ID:
			PORT_VALUE=PINB_REG;
    2e9e:	e6 e3       	ldi	r30, 0x36	; 54
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	09 c0       	rjmp	.+18     	; 0x2eba <GPIO_readPort+0x7e>
			break;
		case PORTC_ID:
			PORT_VALUE=PINC_REG;
    2ea8:	e3 e3       	ldi	r30, 0x33	; 51
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	04 c0       	rjmp	.+8      	; 0x2eba <GPIO_readPort+0x7e>
			break;
		case PORTD_ID:
			PORT_VALUE=PIND_REG;
    2eb2:	e0 e3       	ldi	r30, 0x30	; 48
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	80 81       	ld	r24, Z
    2eb8:	89 83       	std	Y+1, r24	; 0x01
			break;

		}
	}
	return PORT_VALUE;
    2eba:	99 81       	ldd	r25, Y+1	; 0x01
    2ebc:	9d 83       	std	Y+5, r25	; 0x05
    2ebe:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <LCD_SendCommand>:
 *  ARGUMENTS : THE COMMAND OF LCD
 *  Steps To Send Command From Data-sheet (Ac_Charchtristics)
 * =====================================================================================
 */
void LCD_SendCommand(uint8 command)
{
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	e9 97       	sbiw	r28, 0x39	; 57
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61
    2ee4:	89 af       	std	Y+57, r24	; 0x39
	 GPIO_writePin(PORT_RS,RS_Pin,LOGIC_LOW); /* RS_PIN = ZERO FOR COMMAND REGISTER [FROM DATA_SHEET] */
    2ee6:	83 e0       	ldi	r24, 0x03	; 3
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	40 e0       	ldi	r20, 0x00	; 0
    2eec:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <GPIO_writePin>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	a0 e8       	ldi	r26, 0x80	; 128
    2ef6:	bf e3       	ldi	r27, 0x3F	; 63
    2ef8:	8d ab       	std	Y+53, r24	; 0x35
    2efa:	9e ab       	std	Y+54, r25	; 0x36
    2efc:	af ab       	std	Y+55, r26	; 0x37
    2efe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f00:	6d a9       	ldd	r22, Y+53	; 0x35
    2f02:	7e a9       	ldd	r23, Y+54	; 0x36
    2f04:	8f a9       	ldd	r24, Y+55	; 0x37
    2f06:	98 ad       	ldd	r25, Y+56	; 0x38
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	4a e7       	ldi	r20, 0x7A	; 122
    2f0e:	53 e4       	ldi	r21, 0x43	; 67
    2f10:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	89 ab       	std	Y+49, r24	; 0x31
    2f1a:	9a ab       	std	Y+50, r25	; 0x32
    2f1c:	ab ab       	std	Y+51, r26	; 0x33
    2f1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f20:	69 a9       	ldd	r22, Y+49	; 0x31
    2f22:	7a a9       	ldd	r23, Y+50	; 0x32
    2f24:	8b a9       	ldd	r24, Y+51	; 0x33
    2f26:	9c a9       	ldd	r25, Y+52	; 0x34
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e8       	ldi	r20, 0x80	; 128
    2f2e:	5f e3       	ldi	r21, 0x3F	; 63
    2f30:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2f34:	88 23       	and	r24, r24
    2f36:	2c f4       	brge	.+10     	; 0x2f42 <LCD_SendCommand+0x72>
		__ticks = 1;
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	98 ab       	std	Y+48, r25	; 0x30
    2f3e:	8f a7       	std	Y+47, r24	; 0x2f
    2f40:	3f c0       	rjmp	.+126    	; 0x2fc0 <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
    2f42:	69 a9       	ldd	r22, Y+49	; 0x31
    2f44:	7a a9       	ldd	r23, Y+50	; 0x32
    2f46:	8b a9       	ldd	r24, Y+51	; 0x33
    2f48:	9c a9       	ldd	r25, Y+52	; 0x34
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	3f ef       	ldi	r19, 0xFF	; 255
    2f4e:	4f e7       	ldi	r20, 0x7F	; 127
    2f50:	57 e4       	ldi	r21, 0x47	; 71
    2f52:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	4c f5       	brge	.+82     	; 0x2fac <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f60:	98 ad       	ldd	r25, Y+56	; 0x38
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e2       	ldi	r20, 0x20	; 32
    2f68:	51 e4       	ldi	r21, 0x41	; 65
    2f6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	bc 01       	movw	r22, r24
    2f74:	cd 01       	movw	r24, r26
    2f76:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	98 ab       	std	Y+48, r25	; 0x30
    2f80:	8f a7       	std	Y+47, r24	; 0x2f
    2f82:	0f c0       	rjmp	.+30     	; 0x2fa2 <LCD_SendCommand+0xd2>
    2f84:	89 e1       	ldi	r24, 0x19	; 25
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	9e a7       	std	Y+46, r25	; 0x2e
    2f8a:	8d a7       	std	Y+45, r24	; 0x2d
    2f8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <LCD_SendCommand+0xc0>
    2f94:	9e a7       	std	Y+46, r25	; 0x2e
    2f96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f9c:	01 97       	sbiw	r24, 0x01	; 1
    2f9e:	98 ab       	std	Y+48, r25	; 0x30
    2fa0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	69 f7       	brne	.-38     	; 0x2f84 <LCD_SendCommand+0xb4>
    2faa:	14 c0       	rjmp	.+40     	; 0x2fd4 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fac:	69 a9       	ldd	r22, Y+49	; 0x31
    2fae:	7a a9       	ldd	r23, Y+50	; 0x32
    2fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    2fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	98 ab       	std	Y+48, r25	; 0x30
    2fbe:	8f a7       	std	Y+47, r24	; 0x2f
    2fc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc4:	9c a7       	std	Y+44, r25	; 0x2c
    2fc6:	8b a7       	std	Y+43, r24	; 0x2b
    2fc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fca:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f1 f7       	brne	.-4      	; 0x2fcc <LCD_SendCommand+0xfc>
    2fd0:	9c a7       	std	Y+44, r25	; 0x2c
    2fd2:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(1);    /* Delay_for Tas  */
	 GPIO_writePin(PORT_EN,Enable_Pin,LOGIC_HIGH); /* LOGIC_HIGH For Enable_Pin */
    2fd4:	83 e0       	ldi	r24, 0x03	; 3
    2fd6:	61 e0       	ldi	r22, 0x01	; 1
    2fd8:	41 e0       	ldi	r20, 0x01	; 1
    2fda:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <GPIO_writePin>
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	a0 e8       	ldi	r26, 0x80	; 128
    2fe4:	bf e3       	ldi	r27, 0x3F	; 63
    2fe6:	8f a3       	std	Y+39, r24	; 0x27
    2fe8:	98 a7       	std	Y+40, r25	; 0x28
    2fea:	a9 a7       	std	Y+41, r26	; 0x29
    2fec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fee:	6f a1       	ldd	r22, Y+39	; 0x27
    2ff0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ff2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ff4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ff6:	20 e0       	ldi	r18, 0x00	; 0
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	4a e7       	ldi	r20, 0x7A	; 122
    2ffc:	53 e4       	ldi	r21, 0x43	; 67
    2ffe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	8b a3       	std	Y+35, r24	; 0x23
    3008:	9c a3       	std	Y+36, r25	; 0x24
    300a:	ad a3       	std	Y+37, r26	; 0x25
    300c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    300e:	6b a1       	ldd	r22, Y+35	; 0x23
    3010:	7c a1       	ldd	r23, Y+36	; 0x24
    3012:	8d a1       	ldd	r24, Y+37	; 0x25
    3014:	9e a1       	ldd	r25, Y+38	; 0x26
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	40 e8       	ldi	r20, 0x80	; 128
    301c:	5f e3       	ldi	r21, 0x3F	; 63
    301e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    3022:	88 23       	and	r24, r24
    3024:	2c f4       	brge	.+10     	; 0x3030 <LCD_SendCommand+0x160>
		__ticks = 1;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	9a a3       	std	Y+34, r25	; 0x22
    302c:	89 a3       	std	Y+33, r24	; 0x21
    302e:	3f c0       	rjmp	.+126    	; 0x30ae <LCD_SendCommand+0x1de>
	else if (__tmp > 65535)
    3030:	6b a1       	ldd	r22, Y+35	; 0x23
    3032:	7c a1       	ldd	r23, Y+36	; 0x24
    3034:	8d a1       	ldd	r24, Y+37	; 0x25
    3036:	9e a1       	ldd	r25, Y+38	; 0x26
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	3f ef       	ldi	r19, 0xFF	; 255
    303c:	4f e7       	ldi	r20, 0x7F	; 127
    303e:	57 e4       	ldi	r21, 0x47	; 71
    3040:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    3044:	18 16       	cp	r1, r24
    3046:	4c f5       	brge	.+82     	; 0x309a <LCD_SendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3048:	6f a1       	ldd	r22, Y+39	; 0x27
    304a:	78 a5       	ldd	r23, Y+40	; 0x28
    304c:	89 a5       	ldd	r24, Y+41	; 0x29
    304e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e2       	ldi	r20, 0x20	; 32
    3056:	51 e4       	ldi	r21, 0x41	; 65
    3058:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	bc 01       	movw	r22, r24
    3062:	cd 01       	movw	r24, r26
    3064:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	9a a3       	std	Y+34, r25	; 0x22
    306e:	89 a3       	std	Y+33, r24	; 0x21
    3070:	0f c0       	rjmp	.+30     	; 0x3090 <LCD_SendCommand+0x1c0>
    3072:	89 e1       	ldi	r24, 0x19	; 25
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	98 a3       	std	Y+32, r25	; 0x20
    3078:	8f 8f       	std	Y+31, r24	; 0x1f
    307a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    307c:	98 a1       	ldd	r25, Y+32	; 0x20
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <LCD_SendCommand+0x1ae>
    3082:	98 a3       	std	Y+32, r25	; 0x20
    3084:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3086:	89 a1       	ldd	r24, Y+33	; 0x21
    3088:	9a a1       	ldd	r25, Y+34	; 0x22
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	9a a3       	std	Y+34, r25	; 0x22
    308e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3090:	89 a1       	ldd	r24, Y+33	; 0x21
    3092:	9a a1       	ldd	r25, Y+34	; 0x22
    3094:	00 97       	sbiw	r24, 0x00	; 0
    3096:	69 f7       	brne	.-38     	; 0x3072 <LCD_SendCommand+0x1a2>
    3098:	14 c0       	rjmp	.+40     	; 0x30c2 <LCD_SendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309a:	6b a1       	ldd	r22, Y+35	; 0x23
    309c:	7c a1       	ldd	r23, Y+36	; 0x24
    309e:	8d a1       	ldd	r24, Y+37	; 0x25
    30a0:	9e a1       	ldd	r25, Y+38	; 0x26
    30a2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	9a a3       	std	Y+34, r25	; 0x22
    30ac:	89 a3       	std	Y+33, r24	; 0x21
    30ae:	89 a1       	ldd	r24, Y+33	; 0x21
    30b0:	9a a1       	ldd	r25, Y+34	; 0x22
    30b2:	9e 8f       	std	Y+30, r25	; 0x1e
    30b4:	8d 8f       	std	Y+29, r24	; 0x1d
    30b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <LCD_SendCommand+0x1ea>
    30be:	9e 8f       	std	Y+30, r25	; 0x1e
    30c0:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(1); /* Tsdw Time */
	 GPIO_writePin(PORT_EN,Enable_Pin,LOGIC_LOW);
	 _delay_ms(1); /* Th Time To hold Data On Data_Bus  */

#elif(PORT_DATA_BUS_MODE==8)
	 GPIO_writePort(PORTC_ID,command);
    30c2:	82 e0       	ldi	r24, 0x02	; 2
    30c4:	69 ad       	ldd	r22, Y+57	; 0x39
    30c6:	0e 94 da 16 	call	0x2db4	; 0x2db4 <GPIO_writePort>
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	a0 e8       	ldi	r26, 0x80	; 128
    30d0:	bf e3       	ldi	r27, 0x3F	; 63
    30d2:	89 8f       	std	Y+25, r24	; 0x19
    30d4:	9a 8f       	std	Y+26, r25	; 0x1a
    30d6:	ab 8f       	std	Y+27, r26	; 0x1b
    30d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30da:	69 8d       	ldd	r22, Y+25	; 0x19
    30dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e2:	20 e0       	ldi	r18, 0x00	; 0
    30e4:	30 e0       	ldi	r19, 0x00	; 0
    30e6:	4a e7       	ldi	r20, 0x7A	; 122
    30e8:	53 e4       	ldi	r21, 0x43	; 67
    30ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	8d 8b       	std	Y+21, r24	; 0x15
    30f4:	9e 8b       	std	Y+22, r25	; 0x16
    30f6:	af 8b       	std	Y+23, r26	; 0x17
    30f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30fa:	6d 89       	ldd	r22, Y+21	; 0x15
    30fc:	7e 89       	ldd	r23, Y+22	; 0x16
    30fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3100:	98 8d       	ldd	r25, Y+24	; 0x18
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e8       	ldi	r20, 0x80	; 128
    3108:	5f e3       	ldi	r21, 0x3F	; 63
    310a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    310e:	88 23       	and	r24, r24
    3110:	2c f4       	brge	.+10     	; 0x311c <LCD_SendCommand+0x24c>
		__ticks = 1;
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	9c 8b       	std	Y+20, r25	; 0x14
    3118:	8b 8b       	std	Y+19, r24	; 0x13
    311a:	3f c0       	rjmp	.+126    	; 0x319a <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
    311c:	6d 89       	ldd	r22, Y+21	; 0x15
    311e:	7e 89       	ldd	r23, Y+22	; 0x16
    3120:	8f 89       	ldd	r24, Y+23	; 0x17
    3122:	98 8d       	ldd	r25, Y+24	; 0x18
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	3f ef       	ldi	r19, 0xFF	; 255
    3128:	4f e7       	ldi	r20, 0x7F	; 127
    312a:	57 e4       	ldi	r21, 0x47	; 71
    312c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    3130:	18 16       	cp	r1, r24
    3132:	4c f5       	brge	.+82     	; 0x3186 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3134:	69 8d       	ldd	r22, Y+25	; 0x19
    3136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    313a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	40 e2       	ldi	r20, 0x20	; 32
    3142:	51 e4       	ldi	r21, 0x41	; 65
    3144:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	bc 01       	movw	r22, r24
    314e:	cd 01       	movw	r24, r26
    3150:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9c 8b       	std	Y+20, r25	; 0x14
    315a:	8b 8b       	std	Y+19, r24	; 0x13
    315c:	0f c0       	rjmp	.+30     	; 0x317c <LCD_SendCommand+0x2ac>
    315e:	89 e1       	ldi	r24, 0x19	; 25
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	9a 8b       	std	Y+18, r25	; 0x12
    3164:	89 8b       	std	Y+17, r24	; 0x11
    3166:	89 89       	ldd	r24, Y+17	; 0x11
    3168:	9a 89       	ldd	r25, Y+18	; 0x12
    316a:	01 97       	sbiw	r24, 0x01	; 1
    316c:	f1 f7       	brne	.-4      	; 0x316a <LCD_SendCommand+0x29a>
    316e:	9a 8b       	std	Y+18, r25	; 0x12
    3170:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3172:	8b 89       	ldd	r24, Y+19	; 0x13
    3174:	9c 89       	ldd	r25, Y+20	; 0x14
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	9c 8b       	std	Y+20, r25	; 0x14
    317a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    317c:	8b 89       	ldd	r24, Y+19	; 0x13
    317e:	9c 89       	ldd	r25, Y+20	; 0x14
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	69 f7       	brne	.-38     	; 0x315e <LCD_SendCommand+0x28e>
    3184:	14 c0       	rjmp	.+40     	; 0x31ae <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3186:	6d 89       	ldd	r22, Y+21	; 0x15
    3188:	7e 89       	ldd	r23, Y+22	; 0x16
    318a:	8f 89       	ldd	r24, Y+23	; 0x17
    318c:	98 8d       	ldd	r25, Y+24	; 0x18
    318e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3192:	dc 01       	movw	r26, r24
    3194:	cb 01       	movw	r24, r22
    3196:	9c 8b       	std	Y+20, r25	; 0x14
    3198:	8b 8b       	std	Y+19, r24	; 0x13
    319a:	8b 89       	ldd	r24, Y+19	; 0x13
    319c:	9c 89       	ldd	r25, Y+20	; 0x14
    319e:	98 8b       	std	Y+16, r25	; 0x10
    31a0:	8f 87       	std	Y+15, r24	; 0x0f
    31a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a4:	98 89       	ldd	r25, Y+16	; 0x10
    31a6:	01 97       	sbiw	r24, 0x01	; 1
    31a8:	f1 f7       	brne	.-4      	; 0x31a6 <LCD_SendCommand+0x2d6>
    31aa:	98 8b       	std	Y+16, r25	; 0x10
    31ac:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1); /* Tsdw Time */
	 GPIO_writePin(PORT_EN,Enable_Pin,LOGIC_LOW);
    31ae:	83 e0       	ldi	r24, 0x03	; 3
    31b0:	61 e0       	ldi	r22, 0x01	; 1
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <GPIO_writePin>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	a0 e8       	ldi	r26, 0x80	; 128
    31be:	bf e3       	ldi	r27, 0x3F	; 63
    31c0:	8b 87       	std	Y+11, r24	; 0x0b
    31c2:	9c 87       	std	Y+12, r25	; 0x0c
    31c4:	ad 87       	std	Y+13, r26	; 0x0d
    31c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    31cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	4a e7       	ldi	r20, 0x7A	; 122
    31d6:	53 e4       	ldi	r21, 0x43	; 67
    31d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31dc:	dc 01       	movw	r26, r24
    31de:	cb 01       	movw	r24, r22
    31e0:	8f 83       	std	Y+7, r24	; 0x07
    31e2:	98 87       	std	Y+8, r25	; 0x08
    31e4:	a9 87       	std	Y+9, r26	; 0x09
    31e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31e8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ea:	78 85       	ldd	r23, Y+8	; 0x08
    31ec:	89 85       	ldd	r24, Y+9	; 0x09
    31ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f0:	20 e0       	ldi	r18, 0x00	; 0
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	40 e8       	ldi	r20, 0x80	; 128
    31f6:	5f e3       	ldi	r21, 0x3F	; 63
    31f8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    31fc:	88 23       	and	r24, r24
    31fe:	2c f4       	brge	.+10     	; 0x320a <LCD_SendCommand+0x33a>
		__ticks = 1;
    3200:	81 e0       	ldi	r24, 0x01	; 1
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	9e 83       	std	Y+6, r25	; 0x06
    3206:	8d 83       	std	Y+5, r24	; 0x05
    3208:	3f c0       	rjmp	.+126    	; 0x3288 <LCD_SendCommand+0x3b8>
	else if (__tmp > 65535)
    320a:	6f 81       	ldd	r22, Y+7	; 0x07
    320c:	78 85       	ldd	r23, Y+8	; 0x08
    320e:	89 85       	ldd	r24, Y+9	; 0x09
    3210:	9a 85       	ldd	r25, Y+10	; 0x0a
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	3f ef       	ldi	r19, 0xFF	; 255
    3216:	4f e7       	ldi	r20, 0x7F	; 127
    3218:	57 e4       	ldi	r21, 0x47	; 71
    321a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    321e:	18 16       	cp	r1, r24
    3220:	4c f5       	brge	.+82     	; 0x3274 <LCD_SendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3222:	6b 85       	ldd	r22, Y+11	; 0x0b
    3224:	7c 85       	ldd	r23, Y+12	; 0x0c
    3226:	8d 85       	ldd	r24, Y+13	; 0x0d
    3228:	9e 85       	ldd	r25, Y+14	; 0x0e
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e2       	ldi	r20, 0x20	; 32
    3230:	51 e4       	ldi	r21, 0x41	; 65
    3232:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	bc 01       	movw	r22, r24
    323c:	cd 01       	movw	r24, r26
    323e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	9e 83       	std	Y+6, r25	; 0x06
    3248:	8d 83       	std	Y+5, r24	; 0x05
    324a:	0f c0       	rjmp	.+30     	; 0x326a <LCD_SendCommand+0x39a>
    324c:	89 e1       	ldi	r24, 0x19	; 25
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	9c 83       	std	Y+4, r25	; 0x04
    3252:	8b 83       	std	Y+3, r24	; 0x03
    3254:	8b 81       	ldd	r24, Y+3	; 0x03
    3256:	9c 81       	ldd	r25, Y+4	; 0x04
    3258:	01 97       	sbiw	r24, 0x01	; 1
    325a:	f1 f7       	brne	.-4      	; 0x3258 <LCD_SendCommand+0x388>
    325c:	9c 83       	std	Y+4, r25	; 0x04
    325e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3260:	8d 81       	ldd	r24, Y+5	; 0x05
    3262:	9e 81       	ldd	r25, Y+6	; 0x06
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	9e 83       	std	Y+6, r25	; 0x06
    3268:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326a:	8d 81       	ldd	r24, Y+5	; 0x05
    326c:	9e 81       	ldd	r25, Y+6	; 0x06
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	69 f7       	brne	.-38     	; 0x324c <LCD_SendCommand+0x37c>
    3272:	14 c0       	rjmp	.+40     	; 0x329c <LCD_SendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3274:	6f 81       	ldd	r22, Y+7	; 0x07
    3276:	78 85       	ldd	r23, Y+8	; 0x08
    3278:	89 85       	ldd	r24, Y+9	; 0x09
    327a:	9a 85       	ldd	r25, Y+10	; 0x0a
    327c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
    3288:	8d 81       	ldd	r24, Y+5	; 0x05
    328a:	9e 81       	ldd	r25, Y+6	; 0x06
    328c:	9a 83       	std	Y+2, r25	; 0x02
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	9a 81       	ldd	r25, Y+2	; 0x02
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <LCD_SendCommand+0x3c4>
    3298:	9a 83       	std	Y+2, r25	; 0x02
    329a:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);/* Th Time To hold Data On Data_Bus  */
#endif
}
    329c:	e9 96       	adiw	r28, 0x39	; 57
    329e:	0f b6       	in	r0, 0x3f	; 63
    32a0:	f8 94       	cli
    32a2:	de bf       	out	0x3e, r29	; 62
    32a4:	0f be       	out	0x3f, r0	; 63
    32a6:	cd bf       	out	0x3d, r28	; 61
    32a8:	cf 91       	pop	r28
    32aa:	df 91       	pop	r29
    32ac:	08 95       	ret

000032ae <LCD_DisplayCharchter>:
 *  ARGUMENTS : THE Asci Values of characters  for  LCD
 *  Steps To Display characters From Data-sheet (Ac_Charchtristics)
 * =====================================================================================
 */
void LCD_DisplayCharchter(uint8 data)
{
    32ae:	df 93       	push	r29
    32b0:	cf 93       	push	r28
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	e9 97       	sbiw	r28, 0x39	; 57
    32b8:	0f b6       	in	r0, 0x3f	; 63
    32ba:	f8 94       	cli
    32bc:	de bf       	out	0x3e, r29	; 62
    32be:	0f be       	out	0x3f, r0	; 63
    32c0:	cd bf       	out	0x3d, r28	; 61
    32c2:	89 af       	std	Y+57, r24	; 0x39
	 GPIO_writePin(PORT_RS,RS_Pin,LOGIC_HIGH); /* RS_PIN = ONE FOR Display REGISTER [FROM DATA_SHEET] */
    32c4:	83 e0       	ldi	r24, 0x03	; 3
    32c6:	60 e0       	ldi	r22, 0x00	; 0
    32c8:	41 e0       	ldi	r20, 0x01	; 1
    32ca:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <GPIO_writePin>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	a0 e8       	ldi	r26, 0x80	; 128
    32d4:	bf e3       	ldi	r27, 0x3F	; 63
    32d6:	8d ab       	std	Y+53, r24	; 0x35
    32d8:	9e ab       	std	Y+54, r25	; 0x36
    32da:	af ab       	std	Y+55, r26	; 0x37
    32dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32de:	6d a9       	ldd	r22, Y+53	; 0x35
    32e0:	7e a9       	ldd	r23, Y+54	; 0x36
    32e2:	8f a9       	ldd	r24, Y+55	; 0x37
    32e4:	98 ad       	ldd	r25, Y+56	; 0x38
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	4a e7       	ldi	r20, 0x7A	; 122
    32ec:	53 e4       	ldi	r21, 0x43	; 67
    32ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	89 ab       	std	Y+49, r24	; 0x31
    32f8:	9a ab       	std	Y+50, r25	; 0x32
    32fa:	ab ab       	std	Y+51, r26	; 0x33
    32fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3300:	7a a9       	ldd	r23, Y+50	; 0x32
    3302:	8b a9       	ldd	r24, Y+51	; 0x33
    3304:	9c a9       	ldd	r25, Y+52	; 0x34
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e8       	ldi	r20, 0x80	; 128
    330c:	5f e3       	ldi	r21, 0x3F	; 63
    330e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    3312:	88 23       	and	r24, r24
    3314:	2c f4       	brge	.+10     	; 0x3320 <LCD_DisplayCharchter+0x72>
		__ticks = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	98 ab       	std	Y+48, r25	; 0x30
    331c:	8f a7       	std	Y+47, r24	; 0x2f
    331e:	3f c0       	rjmp	.+126    	; 0x339e <LCD_DisplayCharchter+0xf0>
	else if (__tmp > 65535)
    3320:	69 a9       	ldd	r22, Y+49	; 0x31
    3322:	7a a9       	ldd	r23, Y+50	; 0x32
    3324:	8b a9       	ldd	r24, Y+51	; 0x33
    3326:	9c a9       	ldd	r25, Y+52	; 0x34
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	3f ef       	ldi	r19, 0xFF	; 255
    332c:	4f e7       	ldi	r20, 0x7F	; 127
    332e:	57 e4       	ldi	r21, 0x47	; 71
    3330:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    3334:	18 16       	cp	r1, r24
    3336:	4c f5       	brge	.+82     	; 0x338a <LCD_DisplayCharchter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	6d a9       	ldd	r22, Y+53	; 0x35
    333a:	7e a9       	ldd	r23, Y+54	; 0x36
    333c:	8f a9       	ldd	r24, Y+55	; 0x37
    333e:	98 ad       	ldd	r25, Y+56	; 0x38
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	40 e2       	ldi	r20, 0x20	; 32
    3346:	51 e4       	ldi	r21, 0x41	; 65
    3348:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	98 ab       	std	Y+48, r25	; 0x30
    335e:	8f a7       	std	Y+47, r24	; 0x2f
    3360:	0f c0       	rjmp	.+30     	; 0x3380 <LCD_DisplayCharchter+0xd2>
    3362:	89 e1       	ldi	r24, 0x19	; 25
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	9e a7       	std	Y+46, r25	; 0x2e
    3368:	8d a7       	std	Y+45, r24	; 0x2d
    336a:	8d a5       	ldd	r24, Y+45	; 0x2d
    336c:	9e a5       	ldd	r25, Y+46	; 0x2e
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <LCD_DisplayCharchter+0xc0>
    3372:	9e a7       	std	Y+46, r25	; 0x2e
    3374:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3376:	8f a5       	ldd	r24, Y+47	; 0x2f
    3378:	98 a9       	ldd	r25, Y+48	; 0x30
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	98 ab       	std	Y+48, r25	; 0x30
    337e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3380:	8f a5       	ldd	r24, Y+47	; 0x2f
    3382:	98 a9       	ldd	r25, Y+48	; 0x30
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	69 f7       	brne	.-38     	; 0x3362 <LCD_DisplayCharchter+0xb4>
    3388:	14 c0       	rjmp	.+40     	; 0x33b2 <LCD_DisplayCharchter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338a:	69 a9       	ldd	r22, Y+49	; 0x31
    338c:	7a a9       	ldd	r23, Y+50	; 0x32
    338e:	8b a9       	ldd	r24, Y+51	; 0x33
    3390:	9c a9       	ldd	r25, Y+52	; 0x34
    3392:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	98 ab       	std	Y+48, r25	; 0x30
    339c:	8f a7       	std	Y+47, r24	; 0x2f
    339e:	8f a5       	ldd	r24, Y+47	; 0x2f
    33a0:	98 a9       	ldd	r25, Y+48	; 0x30
    33a2:	9c a7       	std	Y+44, r25	; 0x2c
    33a4:	8b a7       	std	Y+43, r24	; 0x2b
    33a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    33a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <LCD_DisplayCharchter+0xfc>
    33ae:	9c a7       	std	Y+44, r25	; 0x2c
    33b0:	8b a7       	std	Y+43, r24	; 0x2b
	 _delay_ms(1); /* Delay_for Tas  */
	 GPIO_writePin(PORT_EN,Enable_Pin,LOGIC_HIGH); /* LOGIC_HIGH For Enable_Pin */
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	61 e0       	ldi	r22, 0x01	; 1
    33b6:	41 e0       	ldi	r20, 0x01	; 1
    33b8:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <GPIO_writePin>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	a0 e8       	ldi	r26, 0x80	; 128
    33c2:	bf e3       	ldi	r27, 0x3F	; 63
    33c4:	8f a3       	std	Y+39, r24	; 0x27
    33c6:	98 a7       	std	Y+40, r25	; 0x28
    33c8:	a9 a7       	std	Y+41, r26	; 0x29
    33ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33cc:	6f a1       	ldd	r22, Y+39	; 0x27
    33ce:	78 a5       	ldd	r23, Y+40	; 0x28
    33d0:	89 a5       	ldd	r24, Y+41	; 0x29
    33d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	4a e7       	ldi	r20, 0x7A	; 122
    33da:	53 e4       	ldi	r21, 0x43	; 67
    33dc:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	8b a3       	std	Y+35, r24	; 0x23
    33e6:	9c a3       	std	Y+36, r25	; 0x24
    33e8:	ad a3       	std	Y+37, r26	; 0x25
    33ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33ec:	6b a1       	ldd	r22, Y+35	; 0x23
    33ee:	7c a1       	ldd	r23, Y+36	; 0x24
    33f0:	8d a1       	ldd	r24, Y+37	; 0x25
    33f2:	9e a1       	ldd	r25, Y+38	; 0x26
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e8       	ldi	r20, 0x80	; 128
    33fa:	5f e3       	ldi	r21, 0x3F	; 63
    33fc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    3400:	88 23       	and	r24, r24
    3402:	2c f4       	brge	.+10     	; 0x340e <LCD_DisplayCharchter+0x160>
		__ticks = 1;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	9a a3       	std	Y+34, r25	; 0x22
    340a:	89 a3       	std	Y+33, r24	; 0x21
    340c:	3f c0       	rjmp	.+126    	; 0x348c <LCD_DisplayCharchter+0x1de>
	else if (__tmp > 65535)
    340e:	6b a1       	ldd	r22, Y+35	; 0x23
    3410:	7c a1       	ldd	r23, Y+36	; 0x24
    3412:	8d a1       	ldd	r24, Y+37	; 0x25
    3414:	9e a1       	ldd	r25, Y+38	; 0x26
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	3f ef       	ldi	r19, 0xFF	; 255
    341a:	4f e7       	ldi	r20, 0x7F	; 127
    341c:	57 e4       	ldi	r21, 0x47	; 71
    341e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    3422:	18 16       	cp	r1, r24
    3424:	4c f5       	brge	.+82     	; 0x3478 <LCD_DisplayCharchter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3426:	6f a1       	ldd	r22, Y+39	; 0x27
    3428:	78 a5       	ldd	r23, Y+40	; 0x28
    342a:	89 a5       	ldd	r24, Y+41	; 0x29
    342c:	9a a5       	ldd	r25, Y+42	; 0x2a
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e2       	ldi	r20, 0x20	; 32
    3434:	51 e4       	ldi	r21, 0x41	; 65
    3436:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	9a a3       	std	Y+34, r25	; 0x22
    344c:	89 a3       	std	Y+33, r24	; 0x21
    344e:	0f c0       	rjmp	.+30     	; 0x346e <LCD_DisplayCharchter+0x1c0>
    3450:	89 e1       	ldi	r24, 0x19	; 25
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	98 a3       	std	Y+32, r25	; 0x20
    3456:	8f 8f       	std	Y+31, r24	; 0x1f
    3458:	8f 8d       	ldd	r24, Y+31	; 0x1f
    345a:	98 a1       	ldd	r25, Y+32	; 0x20
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <LCD_DisplayCharchter+0x1ae>
    3460:	98 a3       	std	Y+32, r25	; 0x20
    3462:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3464:	89 a1       	ldd	r24, Y+33	; 0x21
    3466:	9a a1       	ldd	r25, Y+34	; 0x22
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	9a a3       	std	Y+34, r25	; 0x22
    346c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346e:	89 a1       	ldd	r24, Y+33	; 0x21
    3470:	9a a1       	ldd	r25, Y+34	; 0x22
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	69 f7       	brne	.-38     	; 0x3450 <LCD_DisplayCharchter+0x1a2>
    3476:	14 c0       	rjmp	.+40     	; 0x34a0 <LCD_DisplayCharchter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3478:	6b a1       	ldd	r22, Y+35	; 0x23
    347a:	7c a1       	ldd	r23, Y+36	; 0x24
    347c:	8d a1       	ldd	r24, Y+37	; 0x25
    347e:	9e a1       	ldd	r25, Y+38	; 0x26
    3480:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	9a a3       	std	Y+34, r25	; 0x22
    348a:	89 a3       	std	Y+33, r24	; 0x21
    348c:	89 a1       	ldd	r24, Y+33	; 0x21
    348e:	9a a1       	ldd	r25, Y+34	; 0x22
    3490:	9e 8f       	std	Y+30, r25	; 0x1e
    3492:	8d 8f       	std	Y+29, r24	; 0x1d
    3494:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3496:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <LCD_DisplayCharchter+0x1ea>
    349c:	9e 8f       	std	Y+30, r25	; 0x1e
    349e:	8d 8f       	std	Y+29, r24	; 0x1d
	 GPIO_writePin(PORTD_ID,PIN_DATA_D7,GET_BIT(data,3));/* Write On Each Pin The LEAST Significant 4-bit First Using GET_BIT MACRO */
	 _delay_ms(1);/* Tsdw Time */
	 GPIO_writePin(PORT_EN,Enable_Pin,LOGIC_LOW);
	 _delay_ms(1);/* Th Time To hold Data On Data_Bus  */
#elif(PORT_DATA_BUS_MODE==8)
	 GPIO_writePort(PORTC_ID,data);
    34a0:	82 e0       	ldi	r24, 0x02	; 2
    34a2:	69 ad       	ldd	r22, Y+57	; 0x39
    34a4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <GPIO_writePort>
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	90 e0       	ldi	r25, 0x00	; 0
    34ac:	a0 e8       	ldi	r26, 0x80	; 128
    34ae:	bf e3       	ldi	r27, 0x3F	; 63
    34b0:	89 8f       	std	Y+25, r24	; 0x19
    34b2:	9a 8f       	std	Y+26, r25	; 0x1a
    34b4:	ab 8f       	std	Y+27, r26	; 0x1b
    34b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b8:	69 8d       	ldd	r22, Y+25	; 0x19
    34ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	4a e7       	ldi	r20, 0x7A	; 122
    34c6:	53 e4       	ldi	r21, 0x43	; 67
    34c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	8d 8b       	std	Y+21, r24	; 0x15
    34d2:	9e 8b       	std	Y+22, r25	; 0x16
    34d4:	af 8b       	std	Y+23, r26	; 0x17
    34d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34d8:	6d 89       	ldd	r22, Y+21	; 0x15
    34da:	7e 89       	ldd	r23, Y+22	; 0x16
    34dc:	8f 89       	ldd	r24, Y+23	; 0x17
    34de:	98 8d       	ldd	r25, Y+24	; 0x18
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	40 e8       	ldi	r20, 0x80	; 128
    34e6:	5f e3       	ldi	r21, 0x3F	; 63
    34e8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    34ec:	88 23       	and	r24, r24
    34ee:	2c f4       	brge	.+10     	; 0x34fa <LCD_DisplayCharchter+0x24c>
		__ticks = 1;
    34f0:	81 e0       	ldi	r24, 0x01	; 1
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	9c 8b       	std	Y+20, r25	; 0x14
    34f6:	8b 8b       	std	Y+19, r24	; 0x13
    34f8:	3f c0       	rjmp	.+126    	; 0x3578 <LCD_DisplayCharchter+0x2ca>
	else if (__tmp > 65535)
    34fa:	6d 89       	ldd	r22, Y+21	; 0x15
    34fc:	7e 89       	ldd	r23, Y+22	; 0x16
    34fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3500:	98 8d       	ldd	r25, Y+24	; 0x18
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	3f ef       	ldi	r19, 0xFF	; 255
    3506:	4f e7       	ldi	r20, 0x7F	; 127
    3508:	57 e4       	ldi	r21, 0x47	; 71
    350a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    350e:	18 16       	cp	r1, r24
    3510:	4c f5       	brge	.+82     	; 0x3564 <LCD_DisplayCharchter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3512:	69 8d       	ldd	r22, Y+25	; 0x19
    3514:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3516:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3518:	9c 8d       	ldd	r25, Y+28	; 0x1c
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	40 e2       	ldi	r20, 0x20	; 32
    3520:	51 e4       	ldi	r21, 0x41	; 65
    3522:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	9c 8b       	std	Y+20, r25	; 0x14
    3538:	8b 8b       	std	Y+19, r24	; 0x13
    353a:	0f c0       	rjmp	.+30     	; 0x355a <LCD_DisplayCharchter+0x2ac>
    353c:	89 e1       	ldi	r24, 0x19	; 25
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9a 8b       	std	Y+18, r25	; 0x12
    3542:	89 8b       	std	Y+17, r24	; 0x11
    3544:	89 89       	ldd	r24, Y+17	; 0x11
    3546:	9a 89       	ldd	r25, Y+18	; 0x12
    3548:	01 97       	sbiw	r24, 0x01	; 1
    354a:	f1 f7       	brne	.-4      	; 0x3548 <LCD_DisplayCharchter+0x29a>
    354c:	9a 8b       	std	Y+18, r25	; 0x12
    354e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3550:	8b 89       	ldd	r24, Y+19	; 0x13
    3552:	9c 89       	ldd	r25, Y+20	; 0x14
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	9c 8b       	std	Y+20, r25	; 0x14
    3558:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355a:	8b 89       	ldd	r24, Y+19	; 0x13
    355c:	9c 89       	ldd	r25, Y+20	; 0x14
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	69 f7       	brne	.-38     	; 0x353c <LCD_DisplayCharchter+0x28e>
    3562:	14 c0       	rjmp	.+40     	; 0x358c <LCD_DisplayCharchter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3564:	6d 89       	ldd	r22, Y+21	; 0x15
    3566:	7e 89       	ldd	r23, Y+22	; 0x16
    3568:	8f 89       	ldd	r24, Y+23	; 0x17
    356a:	98 8d       	ldd	r25, Y+24	; 0x18
    356c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3570:	dc 01       	movw	r26, r24
    3572:	cb 01       	movw	r24, r22
    3574:	9c 8b       	std	Y+20, r25	; 0x14
    3576:	8b 8b       	std	Y+19, r24	; 0x13
    3578:	8b 89       	ldd	r24, Y+19	; 0x13
    357a:	9c 89       	ldd	r25, Y+20	; 0x14
    357c:	98 8b       	std	Y+16, r25	; 0x10
    357e:	8f 87       	std	Y+15, r24	; 0x0f
    3580:	8f 85       	ldd	r24, Y+15	; 0x0f
    3582:	98 89       	ldd	r25, Y+16	; 0x10
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	f1 f7       	brne	.-4      	; 0x3584 <LCD_DisplayCharchter+0x2d6>
    3588:	98 8b       	std	Y+16, r25	; 0x10
    358a:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(1); /* Tsdw Time */
	 GPIO_writePin(PORT_EN,Enable_Pin,LOGIC_LOW);
    358c:	83 e0       	ldi	r24, 0x03	; 3
    358e:	61 e0       	ldi	r22, 0x01	; 1
    3590:	40 e0       	ldi	r20, 0x00	; 0
    3592:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <GPIO_writePin>
    3596:	80 e0       	ldi	r24, 0x00	; 0
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	a0 e8       	ldi	r26, 0x80	; 128
    359c:	bf e3       	ldi	r27, 0x3F	; 63
    359e:	8b 87       	std	Y+11, r24	; 0x0b
    35a0:	9c 87       	std	Y+12, r25	; 0x0c
    35a2:	ad 87       	std	Y+13, r26	; 0x0d
    35a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    35ae:	20 e0       	ldi	r18, 0x00	; 0
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	4a e7       	ldi	r20, 0x7A	; 122
    35b4:	53 e4       	ldi	r21, 0x43	; 67
    35b6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	8f 83       	std	Y+7, r24	; 0x07
    35c0:	98 87       	std	Y+8, r25	; 0x08
    35c2:	a9 87       	std	Y+9, r26	; 0x09
    35c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35c6:	6f 81       	ldd	r22, Y+7	; 0x07
    35c8:	78 85       	ldd	r23, Y+8	; 0x08
    35ca:	89 85       	ldd	r24, Y+9	; 0x09
    35cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 e8       	ldi	r20, 0x80	; 128
    35d4:	5f e3       	ldi	r21, 0x3F	; 63
    35d6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    35da:	88 23       	and	r24, r24
    35dc:	2c f4       	brge	.+10     	; 0x35e8 <LCD_DisplayCharchter+0x33a>
		__ticks = 1;
    35de:	81 e0       	ldi	r24, 0x01	; 1
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	9e 83       	std	Y+6, r25	; 0x06
    35e4:	8d 83       	std	Y+5, r24	; 0x05
    35e6:	3f c0       	rjmp	.+126    	; 0x3666 <LCD_DisplayCharchter+0x3b8>
	else if (__tmp > 65535)
    35e8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ea:	78 85       	ldd	r23, Y+8	; 0x08
    35ec:	89 85       	ldd	r24, Y+9	; 0x09
    35ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	3f ef       	ldi	r19, 0xFF	; 255
    35f4:	4f e7       	ldi	r20, 0x7F	; 127
    35f6:	57 e4       	ldi	r21, 0x47	; 71
    35f8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    35fc:	18 16       	cp	r1, r24
    35fe:	4c f5       	brge	.+82     	; 0x3652 <LCD_DisplayCharchter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3600:	6b 85       	ldd	r22, Y+11	; 0x0b
    3602:	7c 85       	ldd	r23, Y+12	; 0x0c
    3604:	8d 85       	ldd	r24, Y+13	; 0x0d
    3606:	9e 85       	ldd	r25, Y+14	; 0x0e
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	40 e2       	ldi	r20, 0x20	; 32
    360e:	51 e4       	ldi	r21, 0x41	; 65
    3610:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	bc 01       	movw	r22, r24
    361a:	cd 01       	movw	r24, r26
    361c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	9e 83       	std	Y+6, r25	; 0x06
    3626:	8d 83       	std	Y+5, r24	; 0x05
    3628:	0f c0       	rjmp	.+30     	; 0x3648 <LCD_DisplayCharchter+0x39a>
    362a:	89 e1       	ldi	r24, 0x19	; 25
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	9c 83       	std	Y+4, r25	; 0x04
    3630:	8b 83       	std	Y+3, r24	; 0x03
    3632:	8b 81       	ldd	r24, Y+3	; 0x03
    3634:	9c 81       	ldd	r25, Y+4	; 0x04
    3636:	01 97       	sbiw	r24, 0x01	; 1
    3638:	f1 f7       	brne	.-4      	; 0x3636 <LCD_DisplayCharchter+0x388>
    363a:	9c 83       	std	Y+4, r25	; 0x04
    363c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    363e:	8d 81       	ldd	r24, Y+5	; 0x05
    3640:	9e 81       	ldd	r25, Y+6	; 0x06
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	9e 83       	std	Y+6, r25	; 0x06
    3646:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3648:	8d 81       	ldd	r24, Y+5	; 0x05
    364a:	9e 81       	ldd	r25, Y+6	; 0x06
    364c:	00 97       	sbiw	r24, 0x00	; 0
    364e:	69 f7       	brne	.-38     	; 0x362a <LCD_DisplayCharchter+0x37c>
    3650:	14 c0       	rjmp	.+40     	; 0x367a <LCD_DisplayCharchter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3652:	6f 81       	ldd	r22, Y+7	; 0x07
    3654:	78 85       	ldd	r23, Y+8	; 0x08
    3656:	89 85       	ldd	r24, Y+9	; 0x09
    3658:	9a 85       	ldd	r25, Y+10	; 0x0a
    365a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9e 83       	std	Y+6, r25	; 0x06
    3664:	8d 83       	std	Y+5, r24	; 0x05
    3666:	8d 81       	ldd	r24, Y+5	; 0x05
    3668:	9e 81       	ldd	r25, Y+6	; 0x06
    366a:	9a 83       	std	Y+2, r25	; 0x02
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	9a 81       	ldd	r25, Y+2	; 0x02
    3672:	01 97       	sbiw	r24, 0x01	; 1
    3674:	f1 f7       	brne	.-4      	; 0x3672 <LCD_DisplayCharchter+0x3c4>
    3676:	9a 83       	std	Y+2, r25	; 0x02
    3678:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1);/* Th Time To hold Data On Data_Bus  */
#endif
}
    367a:	e9 96       	adiw	r28, 0x39	; 57
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	08 95       	ret

0000368c <LCD_init>:
 *  Return : VOID
 *  ARGUMENTS :Void
 * =====================================================================================
 */
void LCD_init(void)
{
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	2e 97       	sbiw	r28, 0x0e	; 14
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(PORT_RS,RS_Pin,PIN_OUTPUT);  /* Set Direction Rs_Pin As Output Pin */
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	60 e0       	ldi	r22, 0x00	; 0
    36a4:	41 e0       	ldi	r20, 0x01	; 1
    36a6:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORT_EN,Enable_Pin,PIN_OUTPUT);/* Set Direction Enable_Pin As Output Pin */
    36aa:	83 e0       	ldi	r24, 0x03	; 3
    36ac:	61 e0       	ldi	r22, 0x01	; 1
    36ae:	41 e0       	ldi	r20, 0x01	; 1
    36b0:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	a0 ea       	ldi	r26, 0xA0	; 160
    36ba:	b1 e4       	ldi	r27, 0x41	; 65
    36bc:	8b 87       	std	Y+11, r24	; 0x0b
    36be:	9c 87       	std	Y+12, r25	; 0x0c
    36c0:	ad 87       	std	Y+13, r26	; 0x0d
    36c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	4a e7       	ldi	r20, 0x7A	; 122
    36d2:	53 e4       	ldi	r21, 0x43	; 67
    36d4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	8f 83       	std	Y+7, r24	; 0x07
    36de:	98 87       	std	Y+8, r25	; 0x08
    36e0:	a9 87       	std	Y+9, r26	; 0x09
    36e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36e4:	6f 81       	ldd	r22, Y+7	; 0x07
    36e6:	78 85       	ldd	r23, Y+8	; 0x08
    36e8:	89 85       	ldd	r24, Y+9	; 0x09
    36ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ec:	20 e0       	ldi	r18, 0x00	; 0
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	40 e8       	ldi	r20, 0x80	; 128
    36f2:	5f e3       	ldi	r21, 0x3F	; 63
    36f4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    36f8:	88 23       	and	r24, r24
    36fa:	2c f4       	brge	.+10     	; 0x3706 <LCD_init+0x7a>
		__ticks = 1;
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9e 83       	std	Y+6, r25	; 0x06
    3702:	8d 83       	std	Y+5, r24	; 0x05
    3704:	3f c0       	rjmp	.+126    	; 0x3784 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3706:	6f 81       	ldd	r22, Y+7	; 0x07
    3708:	78 85       	ldd	r23, Y+8	; 0x08
    370a:	89 85       	ldd	r24, Y+9	; 0x09
    370c:	9a 85       	ldd	r25, Y+10	; 0x0a
    370e:	20 e0       	ldi	r18, 0x00	; 0
    3710:	3f ef       	ldi	r19, 0xFF	; 255
    3712:	4f e7       	ldi	r20, 0x7F	; 127
    3714:	57 e4       	ldi	r21, 0x47	; 71
    3716:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    371a:	18 16       	cp	r1, r24
    371c:	4c f5       	brge	.+82     	; 0x3770 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3720:	7c 85       	ldd	r23, Y+12	; 0x0c
    3722:	8d 85       	ldd	r24, Y+13	; 0x0d
    3724:	9e 85       	ldd	r25, Y+14	; 0x0e
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	40 e2       	ldi	r20, 0x20	; 32
    372c:	51 e4       	ldi	r21, 0x41	; 65
    372e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3732:	dc 01       	movw	r26, r24
    3734:	cb 01       	movw	r24, r22
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	9e 83       	std	Y+6, r25	; 0x06
    3744:	8d 83       	std	Y+5, r24	; 0x05
    3746:	0f c0       	rjmp	.+30     	; 0x3766 <LCD_init+0xda>
    3748:	89 e1       	ldi	r24, 0x19	; 25
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	9c 83       	std	Y+4, r25	; 0x04
    374e:	8b 83       	std	Y+3, r24	; 0x03
    3750:	8b 81       	ldd	r24, Y+3	; 0x03
    3752:	9c 81       	ldd	r25, Y+4	; 0x04
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <LCD_init+0xc8>
    3758:	9c 83       	std	Y+4, r25	; 0x04
    375a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    375c:	8d 81       	ldd	r24, Y+5	; 0x05
    375e:	9e 81       	ldd	r25, Y+6	; 0x06
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	9e 83       	std	Y+6, r25	; 0x06
    3764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3766:	8d 81       	ldd	r24, Y+5	; 0x05
    3768:	9e 81       	ldd	r25, Y+6	; 0x06
    376a:	00 97       	sbiw	r24, 0x00	; 0
    376c:	69 f7       	brne	.-38     	; 0x3748 <LCD_init+0xbc>
    376e:	14 c0       	rjmp	.+40     	; 0x3798 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3770:	6f 81       	ldd	r22, Y+7	; 0x07
    3772:	78 85       	ldd	r23, Y+8	; 0x08
    3774:	89 85       	ldd	r24, Y+9	; 0x09
    3776:	9a 85       	ldd	r25, Y+10	; 0x0a
    3778:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9e 83       	std	Y+6, r25	; 0x06
    3782:	8d 83       	std	Y+5, r24	; 0x05
    3784:	8d 81       	ldd	r24, Y+5	; 0x05
    3786:	9e 81       	ldd	r25, Y+6	; 0x06
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	89 83       	std	Y+1, r24	; 0x01
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <LCD_init+0x104>
    3794:	9a 83       	std	Y+2, r25	; 0x02
    3796:	89 83       	std	Y+1, r24	; 0x01
	 GPIO_setupPinDirection(PORTD_ID,PIN_DATA_D4,PIN_OUTPUT);/* Set Direction PORT Pin D5 As Output Pin */
	 LCD_SendCommand(Command_Initiate_lcd_4_bit_mode_one); /* Send Command To Transfer To 4-bit Mode  */
	 LCD_SendCommand(Command_Initiate_lcd_4_bit_mode_two); /* Send Command To Transfer To 4-bit Mode  */
	 LCD_SendCommand(Command_INITIATE_4_BIT_MODE); /* Send Command To Initiate To 4-bit Mode  */
#elif(PORT_DATA_BUS_MODE==8)
	GPIO_setupPortDirection(PORT_DATA_BUS,PORT_OUTPUT);
    3798:	82 e0       	ldi	r24, 0x02	; 2
    379a:	6f ef       	ldi	r22, 0xFF	; 255
    379c:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <GPIO_setupPortDirection>

	LCD_SendCommand(initiate_screen);/* Send Command To Initiate To 8-bit Mode  */
    37a0:	88 e3       	ldi	r24, 0x38	; 56
    37a2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_SendCommand>

#endif

	LCD_SendCommand(Cursor_off); /* Send Command To Initiate The Screen To Work With The Same Order  */
    37a6:	8c e0       	ldi	r24, 0x0C	; 12
    37a8:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_SendCommand>
	LCD_SendCommand(Clear_Display); /* Send Command To Initiate The Screen To Work With The Same Order  */
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_SendCommand>

}
    37b2:	2e 96       	adiw	r28, 0x0e	; 14
    37b4:	0f b6       	in	r0, 0x3f	; 63
    37b6:	f8 94       	cli
    37b8:	de bf       	out	0x3e, r29	; 62
    37ba:	0f be       	out	0x3f, r0	; 63
    37bc:	cd bf       	out	0x3d, r28	; 61
    37be:	cf 91       	pop	r28
    37c0:	df 91       	pop	r29
    37c2:	08 95       	ret

000037c4 <LCD_DisplayString>:

void LCD_DisplayString(const char *str)  /* Here We define char instead of uint8 because the pointer to char used signed not unsigned \
to avoid warnings */
{
    37c4:	df 93       	push	r29
    37c6:	cf 93       	push	r28
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <LCD_DisplayString+0x6>
    37ca:	0f 92       	push	r0
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	9b 83       	std	Y+3, r25	; 0x03
    37d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    37d4:	19 82       	std	Y+1, r1	; 0x01
    37d6:	0e c0       	rjmp	.+28     	; 0x37f4 <LCD_DisplayString+0x30>
	while(str[i]!='\0')
	{
		LCD_DisplayCharchter(str[i]);
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	28 2f       	mov	r18, r24
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	9b 81       	ldd	r25, Y+3	; 0x03
    37e2:	fc 01       	movw	r30, r24
    37e4:	e2 0f       	add	r30, r18
    37e6:	f3 1f       	adc	r31, r19
    37e8:	80 81       	ld	r24, Z
    37ea:	0e 94 57 19 	call	0x32ae	; 0x32ae <LCD_DisplayCharchter>
		i++;
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	8f 5f       	subi	r24, 0xFF	; 255
    37f2:	89 83       	std	Y+1, r24	; 0x01

void LCD_DisplayString(const char *str)  /* Here We define char instead of uint8 because the pointer to char used signed not unsigned \
to avoid warnings */
{
	uint8 i=0;
	while(str[i]!='\0')
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	28 2f       	mov	r18, r24
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	9b 81       	ldd	r25, Y+3	; 0x03
    37fe:	fc 01       	movw	r30, r24
    3800:	e2 0f       	add	r30, r18
    3802:	f3 1f       	adc	r31, r19
    3804:	80 81       	ld	r24, Z
    3806:	88 23       	and	r24, r24
    3808:	39 f7       	brne	.-50     	; 0x37d8 <LCD_DisplayString+0x14>
	{
		LCD_DisplayCharchter(str[i]);
		i++;
	}
}
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	08 95       	ret

00003816 <Move_Cursor>:

void Move_Cursor(uint8 row,uint8 col) /* The DIscuss In tHE NOTEBOOK */
{
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	00 d0       	rcall	.+0      	; 0x381c <Move_Cursor+0x6>
    381c:	00 d0       	rcall	.+0      	; 0x381e <Move_Cursor+0x8>
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	89 83       	std	Y+1, r24	; 0x01
    3824:	6a 83       	std	Y+2, r22	; 0x02
	switch(row)
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	3c 83       	std	Y+4, r19	; 0x04
    382e:	2b 83       	std	Y+3, r18	; 0x03
    3830:	8b 81       	ldd	r24, Y+3	; 0x03
    3832:	9c 81       	ldd	r25, Y+4	; 0x04
    3834:	81 30       	cpi	r24, 0x01	; 1
    3836:	91 05       	cpc	r25, r1
    3838:	d1 f0       	breq	.+52     	; 0x386e <Move_Cursor+0x58>
    383a:	2b 81       	ldd	r18, Y+3	; 0x03
    383c:	3c 81       	ldd	r19, Y+4	; 0x04
    383e:	22 30       	cpi	r18, 0x02	; 2
    3840:	31 05       	cpc	r19, r1
    3842:	2c f4       	brge	.+10     	; 0x384e <Move_Cursor+0x38>
    3844:	8b 81       	ldd	r24, Y+3	; 0x03
    3846:	9c 81       	ldd	r25, Y+4	; 0x04
    3848:	00 97       	sbiw	r24, 0x00	; 0
    384a:	61 f0       	breq	.+24     	; 0x3864 <Move_Cursor+0x4e>
    384c:	21 c0       	rjmp	.+66     	; 0x3890 <Move_Cursor+0x7a>
    384e:	2b 81       	ldd	r18, Y+3	; 0x03
    3850:	3c 81       	ldd	r19, Y+4	; 0x04
    3852:	22 30       	cpi	r18, 0x02	; 2
    3854:	31 05       	cpc	r19, r1
    3856:	89 f0       	breq	.+34     	; 0x387a <Move_Cursor+0x64>
    3858:	8b 81       	ldd	r24, Y+3	; 0x03
    385a:	9c 81       	ldd	r25, Y+4	; 0x04
    385c:	83 30       	cpi	r24, 0x03	; 3
    385e:	91 05       	cpc	r25, r1
    3860:	91 f0       	breq	.+36     	; 0x3886 <Move_Cursor+0x70>
    3862:	16 c0       	rjmp	.+44     	; 0x3890 <Move_Cursor+0x7a>
	{
	case Row_Zero_Address:
		LCD_SendCommand((col+0x00)|Move_Cursor_Frist_Row);
    3864:	8a 81       	ldd	r24, Y+2	; 0x02
    3866:	80 68       	ori	r24, 0x80	; 128
    3868:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_SendCommand>
    386c:	11 c0       	rjmp	.+34     	; 0x3890 <Move_Cursor+0x7a>
		break;
	case Row_First_Address:
		LCD_SendCommand((col+0x40)|Move_Cursor_Frist_Row);
    386e:	8a 81       	ldd	r24, Y+2	; 0x02
    3870:	80 5c       	subi	r24, 0xC0	; 192
    3872:	80 68       	ori	r24, 0x80	; 128
    3874:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_SendCommand>
    3878:	0b c0       	rjmp	.+22     	; 0x3890 <Move_Cursor+0x7a>
		break;
	case Row_Second_Address:
		LCD_SendCommand((col+0x10)|Move_Cursor_Frist_Row);
    387a:	8a 81       	ldd	r24, Y+2	; 0x02
    387c:	80 5f       	subi	r24, 0xF0	; 240
    387e:	80 68       	ori	r24, 0x80	; 128
    3880:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_SendCommand>
    3884:	05 c0       	rjmp	.+10     	; 0x3890 <Move_Cursor+0x7a>
		break;
	case Row_Third_Address:
		LCD_SendCommand((col+0x50)|Move_Cursor_Frist_Row);
    3886:	8a 81       	ldd	r24, Y+2	; 0x02
    3888:	80 5b       	subi	r24, 0xB0	; 176
    388a:	80 68       	ori	r24, 0x80	; 128
    388c:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_SendCommand>
		break;
	}

}
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	08 95       	ret

0000389e <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *str)
{
    389e:	df 93       	push	r29
    38a0:	cf 93       	push	r28
    38a2:	00 d0       	rcall	.+0      	; 0x38a4 <LCD_displayStringRowColumn+0x6>
    38a4:	00 d0       	rcall	.+0      	; 0x38a6 <LCD_displayStringRowColumn+0x8>
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	6a 83       	std	Y+2, r22	; 0x02
    38ae:	5c 83       	std	Y+4, r21	; 0x04
    38b0:	4b 83       	std	Y+3, r20	; 0x03
	Move_Cursor(row,col);
    38b2:	89 81       	ldd	r24, Y+1	; 0x01
    38b4:	6a 81       	ldd	r22, Y+2	; 0x02
    38b6:	0e 94 0b 1c 	call	0x3816	; 0x3816 <Move_Cursor>
	LCD_DisplayString(str);
    38ba:	8b 81       	ldd	r24, Y+3	; 0x03
    38bc:	9c 81       	ldd	r25, Y+4	; 0x04
    38be:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <LCD_DisplayString>
}
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	cd b7       	in	r28, 0x3d	; 61
    38d6:	de b7       	in	r29, 0x3e	; 62
	/* IF need to clear screen and write in first row and col will return automatic not need to call move cursor*/
	LCD_SendCommand(Clear_Display);
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_SendCommand>
}
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	08 95       	ret

000038e4 <LCD_IntgerToString>:
void LCD_IntgerToString(uint32 data) /* The DIscuss In tHE NOTEBOOK */
{
    38e4:	df 93       	push	r29
    38e6:	cf 93       	push	r28
    38e8:	cd b7       	in	r28, 0x3d	; 61
    38ea:	de b7       	in	r29, 0x3e	; 62
    38ec:	64 97       	sbiw	r28, 0x14	; 20
    38ee:	0f b6       	in	r0, 0x3f	; 63
    38f0:	f8 94       	cli
    38f2:	de bf       	out	0x3e, r29	; 62
    38f4:	0f be       	out	0x3f, r0	; 63
    38f6:	cd bf       	out	0x3d, r28	; 61
    38f8:	69 8b       	std	Y+17, r22	; 0x11
    38fa:	7a 8b       	std	Y+18, r23	; 0x12
    38fc:	8b 8b       	std	Y+19, r24	; 0x13
    38fe:	9c 8b       	std	Y+20, r25	; 0x14
	char buff[16];
	itoa(data,buff,10);
    3900:	89 89       	ldd	r24, Y+17	; 0x11
    3902:	9a 89       	ldd	r25, Y+18	; 0x12
    3904:	9e 01       	movw	r18, r28
    3906:	2f 5f       	subi	r18, 0xFF	; 255
    3908:	3f 4f       	sbci	r19, 0xFF	; 255
    390a:	b9 01       	movw	r22, r18
    390c:	4a e0       	ldi	r20, 0x0A	; 10
    390e:	50 e0       	ldi	r21, 0x00	; 0
    3910:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <itoa>
	LCD_DisplayString(buff);
    3914:	ce 01       	movw	r24, r28
    3916:	01 96       	adiw	r24, 0x01	; 1
    3918:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <LCD_DisplayString>
}
    391c:	64 96       	adiw	r28, 0x14	; 20
    391e:	0f b6       	in	r0, 0x3f	; 63
    3920:	f8 94       	cli
    3922:	de bf       	out	0x3e, r29	; 62
    3924:	0f be       	out	0x3f, r0	; 63
    3926:	cd bf       	out	0x3d, r28	; 61
    3928:	cf 91       	pop	r28
    392a:	df 91       	pop	r29
    392c:	08 95       	ret

0000392e <LCD_FloatToString>:
void LCD_FloatToString(float32 data)  /* The DIscuss In tHE NOTEBOOK */
{
    392e:	0f 93       	push	r16
    3930:	1f 93       	push	r17
    3932:	df 93       	push	r29
    3934:	cf 93       	push	r28
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
    393a:	a2 97       	sbiw	r28, 0x22	; 34
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	de bf       	out	0x3e, r29	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	cd bf       	out	0x3d, r28	; 61
    3946:	6f 8f       	std	Y+31, r22	; 0x1f
    3948:	78 a3       	std	Y+32, r23	; 0x20
    394a:	89 a3       	std	Y+33, r24	; 0x21
    394c:	9a a3       	std	Y+34, r25	; 0x22
	char buff[30];
	dtostrf(data,1,4,buff);
    394e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3950:	98 a1       	ldd	r25, Y+32	; 0x20
    3952:	a9 a1       	ldd	r26, Y+33	; 0x21
    3954:	ba a1       	ldd	r27, Y+34	; 0x22
    3956:	bc 01       	movw	r22, r24
    3958:	cd 01       	movw	r24, r26
    395a:	41 e0       	ldi	r20, 0x01	; 1
    395c:	24 e0       	ldi	r18, 0x04	; 4
    395e:	fe 01       	movw	r30, r28
    3960:	31 96       	adiw	r30, 0x01	; 1
    3962:	8f 01       	movw	r16, r30
    3964:	0e 94 26 1e 	call	0x3c4c	; 0x3c4c <dtostrf>
	LCD_DisplayString(buff);
    3968:	ce 01       	movw	r24, r28
    396a:	01 96       	adiw	r24, 0x01	; 1
    396c:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <LCD_DisplayString>
}
    3970:	a2 96       	adiw	r28, 0x22	; 34
    3972:	0f b6       	in	r0, 0x3f	; 63
    3974:	f8 94       	cli
    3976:	de bf       	out	0x3e, r29	; 62
    3978:	0f be       	out	0x3f, r0	; 63
    397a:	cd bf       	out	0x3d, r28	; 61
    397c:	cf 91       	pop	r28
    397e:	df 91       	pop	r29
    3980:	1f 91       	pop	r17
    3982:	0f 91       	pop	r16
    3984:	08 95       	ret

00003986 <GET_PressedKey>:
static uint8 Keypad_Mapping4x3(uint8 Map_Button);
#endif


uint8 GET_PressedKey(void)
{
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	00 d0       	rcall	.+0      	; 0x398c <GET_PressedKey+0x6>
    398c:	cd b7       	in	r28, 0x3d	; 61
    398e:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col=0;
    3990:	19 82       	std	Y+1, r1	; 0x01
	GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin,PIN_INPUT);
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	40 e0       	ldi	r20, 0x00	; 0
    3998:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+1,PIN_INPUT);
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	61 e0       	ldi	r22, 0x01	; 1
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+2,PIN_INPUT);
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	62 e0       	ldi	r22, 0x02	; 2
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+3,PIN_INPUT);
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	63 e0       	ldi	r22, 0x03	; 3
    39b4:	40 e0       	ldi	r20, 0x00	; 0
    39b6:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin,PIN_INPUT);
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	64 e0       	ldi	r22, 0x04	; 4
    39be:	40 e0       	ldi	r20, 0x00	; 0
    39c0:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin+1,PIN_INPUT);
    39c4:	80 e0       	ldi	r24, 0x00	; 0
    39c6:	65 e0       	ldi	r22, 0x05	; 5
    39c8:	40 e0       	ldi	r20, 0x00	; 0
    39ca:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin+2,PIN_INPUT);
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	66 e0       	ldi	r22, 0x06	; 6
    39d2:	40 e0       	ldi	r20, 0x00	; 0
    39d4:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
#if (Keypad_Cols_Nums==4)
	GPIO_setupPinDirection(Keypad_Cols_Port,Keypad_Cols_Pin+3,PIN_INPUT);
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	67 e0       	ldi	r22, 0x07	; 7
    39dc:	40 e0       	ldi	r20, 0x00	; 0
    39de:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
#endif


for(;;)
{
	for (row=0;row<Keypad_Rows_Nums;row++)
    39e2:	1a 82       	std	Y+2, r1	; 0x02
    39e4:	35 c0       	rjmp	.+106    	; 0x3a50 <GET_PressedKey+0xca>
	{
		GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+row,PIN_OUTPUT);
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	6a 81       	ldd	r22, Y+2	; 0x02
    39ea:	41 e0       	ldi	r20, 0x01	; 1
    39ec:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
		GPIO_writePin(Keypad_Rows_Port,Keypad_Rows_Pin+row,LOGIC_LOW);
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	6a 81       	ldd	r22, Y+2	; 0x02
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <GPIO_writePin>

		for(col=0;col<Keypad_Cols_Nums;col++)
    39fa:	19 82       	std	Y+1, r1	; 0x01
    39fc:	1e c0       	rjmp	.+60     	; 0x3a3a <GET_PressedKey+0xb4>
		{
			if (GPIO_readPin(Keypad_Cols_Port,Keypad_Cols_Pin+col)==LOGIC_LOW)
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	98 2f       	mov	r25, r24
    3a02:	9c 5f       	subi	r25, 0xFC	; 252
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	69 2f       	mov	r22, r25
    3a08:	0e 94 1f 16 	call	0x2c3e	; 0x2c3e <GPIO_readPin>
    3a0c:	88 23       	and	r24, r24
    3a0e:	91 f4       	brne	.+36     	; 0x3a34 <GET_PressedKey+0xae>
			{
#if(Keypad_Cols_Nums==4)
				return Keypad_Matrix_four_col(((row*Keypad_Cols_Nums)+col+1));
    3a10:	8a 81       	ldd	r24, Y+2	; 0x02
    3a12:	88 2f       	mov	r24, r24
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	88 0f       	add	r24, r24
    3a18:	99 1f       	adc	r25, r25
    3a1a:	88 0f       	add	r24, r24
    3a1c:	99 1f       	adc	r25, r25
    3a1e:	98 2f       	mov	r25, r24
    3a20:	89 81       	ldd	r24, Y+1	; 0x01
    3a22:	89 0f       	add	r24, r25
    3a24:	8f 5f       	subi	r24, 0xFF	; 255
    3a26:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <Keypad_Matrix_four_col>
			}
		}
		GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+row,PIN_INPUT);
	}
}
}
    3a2a:	0f 90       	pop	r0
    3a2c:	0f 90       	pop	r0
    3a2e:	cf 91       	pop	r28
    3a30:	df 91       	pop	r29
    3a32:	08 95       	ret
	for (row=0;row<Keypad_Rows_Nums;row++)
	{
		GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+row,PIN_OUTPUT);
		GPIO_writePin(Keypad_Rows_Port,Keypad_Rows_Pin+row,LOGIC_LOW);

		for(col=0;col<Keypad_Cols_Nums;col++)
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	8f 5f       	subi	r24, 0xFF	; 255
    3a38:	89 83       	std	Y+1, r24	; 0x01
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
    3a3c:	84 30       	cpi	r24, 0x04	; 4
    3a3e:	f8 f2       	brcs	.-66     	; 0x39fe <GET_PressedKey+0x78>
				return ;
#endif

			}
		}
		GPIO_setupPinDirection(Keypad_Rows_Port,Keypad_Rows_Pin+row,PIN_INPUT);
    3a40:	80 e0       	ldi	r24, 0x00	; 0
    3a42:	6a 81       	ldd	r22, Y+2	; 0x02
    3a44:	40 e0       	ldi	r20, 0x00	; 0
    3a46:	0e 94 2b 14 	call	0x2856	; 0x2856 <GPIO_setupPinDirection>
#endif


for(;;)
{
	for (row=0;row<Keypad_Rows_Nums;row++)
    3a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4c:	8f 5f       	subi	r24, 0xFF	; 255
    3a4e:	8a 83       	std	Y+2, r24	; 0x02
    3a50:	8a 81       	ldd	r24, Y+2	; 0x02
    3a52:	84 30       	cpi	r24, 0x04	; 4
    3a54:	40 f2       	brcs	.-112    	; 0x39e6 <GET_PressedKey+0x60>
    3a56:	c5 cf       	rjmp	.-118    	; 0x39e2 <GET_PressedKey+0x5c>

00003a58 <Keypad_Matrix_four_col>:


#if(Keypad_Cols_Nums==4)

static uint8 Keypad_Matrix_four_col(uint8 Map_Button)
{
    3a58:	df 93       	push	r29
    3a5a:	cf 93       	push	r28
    3a5c:	00 d0       	rcall	.+0      	; 0x3a5e <Keypad_Matrix_four_col+0x6>
    3a5e:	00 d0       	rcall	.+0      	; 0x3a60 <Keypad_Matrix_four_col+0x8>
    3a60:	cd b7       	in	r28, 0x3d	; 61
    3a62:	de b7       	in	r29, 0x3e	; 62
    3a64:	8a 83       	std	Y+2, r24	; 0x02
	uint8 ButtonNumber=0;
    3a66:	19 82       	std	Y+1, r1	; 0x01

    switch(Map_Button)
    3a68:	8a 81       	ldd	r24, Y+2	; 0x02
    3a6a:	28 2f       	mov	r18, r24
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	3c 83       	std	Y+4, r19	; 0x04
    3a70:	2b 83       	std	Y+3, r18	; 0x03
    3a72:	8b 81       	ldd	r24, Y+3	; 0x03
    3a74:	9c 81       	ldd	r25, Y+4	; 0x04
    3a76:	88 30       	cpi	r24, 0x08	; 8
    3a78:	91 05       	cpc	r25, r1
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <Keypad_Matrix_four_col+0x26>
    3a7c:	70 c0       	rjmp	.+224    	; 0x3b5e <Keypad_Matrix_four_col+0x106>
    3a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a80:	3c 81       	ldd	r19, Y+4	; 0x04
    3a82:	29 30       	cpi	r18, 0x09	; 9
    3a84:	31 05       	cpc	r19, r1
    3a86:	5c f5       	brge	.+86     	; 0x3ade <Keypad_Matrix_four_col+0x86>
    3a88:	8b 81       	ldd	r24, Y+3	; 0x03
    3a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a8c:	84 30       	cpi	r24, 0x04	; 4
    3a8e:	91 05       	cpc	r25, r1
    3a90:	09 f4       	brne	.+2      	; 0x3a94 <Keypad_Matrix_four_col+0x3c>
    3a92:	59 c0       	rjmp	.+178    	; 0x3b46 <Keypad_Matrix_four_col+0xee>
    3a94:	2b 81       	ldd	r18, Y+3	; 0x03
    3a96:	3c 81       	ldd	r19, Y+4	; 0x04
    3a98:	25 30       	cpi	r18, 0x05	; 5
    3a9a:	31 05       	cpc	r19, r1
    3a9c:	9c f4       	brge	.+38     	; 0x3ac4 <Keypad_Matrix_four_col+0x6c>
    3a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa2:	82 30       	cpi	r24, 0x02	; 2
    3aa4:	91 05       	cpc	r25, r1
    3aa6:	09 f4       	brne	.+2      	; 0x3aaa <Keypad_Matrix_four_col+0x52>
    3aa8:	48 c0       	rjmp	.+144    	; 0x3b3a <Keypad_Matrix_four_col+0xe2>
    3aaa:	2b 81       	ldd	r18, Y+3	; 0x03
    3aac:	3c 81       	ldd	r19, Y+4	; 0x04
    3aae:	23 30       	cpi	r18, 0x03	; 3
    3ab0:	31 05       	cpc	r19, r1
    3ab2:	0c f0       	brlt	.+2      	; 0x3ab6 <Keypad_Matrix_four_col+0x5e>
    3ab4:	45 c0       	rjmp	.+138    	; 0x3b40 <Keypad_Matrix_four_col+0xe8>
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	81 30       	cpi	r24, 0x01	; 1
    3abc:	91 05       	cpc	r25, r1
    3abe:	09 f4       	brne	.+2      	; 0x3ac2 <Keypad_Matrix_four_col+0x6a>
    3ac0:	39 c0       	rjmp	.+114    	; 0x3b34 <Keypad_Matrix_four_col+0xdc>
    3ac2:	66 c0       	rjmp	.+204    	; 0x3b90 <Keypad_Matrix_four_col+0x138>
    3ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ac6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ac8:	26 30       	cpi	r18, 0x06	; 6
    3aca:	31 05       	cpc	r19, r1
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <Keypad_Matrix_four_col+0x78>
    3ace:	41 c0       	rjmp	.+130    	; 0x3b52 <Keypad_Matrix_four_col+0xfa>
    3ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad4:	87 30       	cpi	r24, 0x07	; 7
    3ad6:	91 05       	cpc	r25, r1
    3ad8:	0c f0       	brlt	.+2      	; 0x3adc <Keypad_Matrix_four_col+0x84>
    3ada:	3e c0       	rjmp	.+124    	; 0x3b58 <Keypad_Matrix_four_col+0x100>
    3adc:	37 c0       	rjmp	.+110    	; 0x3b4c <Keypad_Matrix_four_col+0xf4>
    3ade:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae0:	3c 81       	ldd	r19, Y+4	; 0x04
    3ae2:	2c 30       	cpi	r18, 0x0C	; 12
    3ae4:	31 05       	cpc	r19, r1
    3ae6:	09 f4       	brne	.+2      	; 0x3aea <Keypad_Matrix_four_col+0x92>
    3ae8:	46 c0       	rjmp	.+140    	; 0x3b76 <Keypad_Matrix_four_col+0x11e>
    3aea:	8b 81       	ldd	r24, Y+3	; 0x03
    3aec:	9c 81       	ldd	r25, Y+4	; 0x04
    3aee:	8d 30       	cpi	r24, 0x0D	; 13
    3af0:	91 05       	cpc	r25, r1
    3af2:	5c f4       	brge	.+22     	; 0x3b0a <Keypad_Matrix_four_col+0xb2>
    3af4:	2b 81       	ldd	r18, Y+3	; 0x03
    3af6:	3c 81       	ldd	r19, Y+4	; 0x04
    3af8:	2a 30       	cpi	r18, 0x0A	; 10
    3afa:	31 05       	cpc	r19, r1
    3afc:	b1 f1       	breq	.+108    	; 0x3b6a <Keypad_Matrix_four_col+0x112>
    3afe:	8b 81       	ldd	r24, Y+3	; 0x03
    3b00:	9c 81       	ldd	r25, Y+4	; 0x04
    3b02:	8b 30       	cpi	r24, 0x0B	; 11
    3b04:	91 05       	cpc	r25, r1
    3b06:	a4 f5       	brge	.+104    	; 0x3b70 <Keypad_Matrix_four_col+0x118>
    3b08:	2d c0       	rjmp	.+90     	; 0x3b64 <Keypad_Matrix_four_col+0x10c>
    3b0a:	2b 81       	ldd	r18, Y+3	; 0x03
    3b0c:	3c 81       	ldd	r19, Y+4	; 0x04
    3b0e:	2e 30       	cpi	r18, 0x0E	; 14
    3b10:	31 05       	cpc	r19, r1
    3b12:	b9 f1       	breq	.+110    	; 0x3b82 <Keypad_Matrix_four_col+0x12a>
    3b14:	8b 81       	ldd	r24, Y+3	; 0x03
    3b16:	9c 81       	ldd	r25, Y+4	; 0x04
    3b18:	8e 30       	cpi	r24, 0x0E	; 14
    3b1a:	91 05       	cpc	r25, r1
    3b1c:	7c f1       	brlt	.+94     	; 0x3b7c <Keypad_Matrix_four_col+0x124>
    3b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    3b20:	3c 81       	ldd	r19, Y+4	; 0x04
    3b22:	2f 30       	cpi	r18, 0x0F	; 15
    3b24:	31 05       	cpc	r19, r1
    3b26:	79 f1       	breq	.+94     	; 0x3b86 <Keypad_Matrix_four_col+0x12e>
    3b28:	8b 81       	ldd	r24, Y+3	; 0x03
    3b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b2c:	80 31       	cpi	r24, 0x10	; 16
    3b2e:	91 05       	cpc	r25, r1
    3b30:	69 f1       	breq	.+90     	; 0x3b8c <Keypad_Matrix_four_col+0x134>
    3b32:	2e c0       	rjmp	.+92     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	{
	case 1: ButtonNumber=7;
    3b34:	87 e0       	ldi	r24, 0x07	; 7
    3b36:	89 83       	std	Y+1, r24	; 0x01
    3b38:	2b c0       	rjmp	.+86     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 2: ButtonNumber=8;
    3b3a:	88 e0       	ldi	r24, 0x08	; 8
    3b3c:	89 83       	std	Y+1, r24	; 0x01
    3b3e:	28 c0       	rjmp	.+80     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 3:ButtonNumber=9;
    3b40:	89 e0       	ldi	r24, 0x09	; 9
    3b42:	89 83       	std	Y+1, r24	; 0x01
    3b44:	25 c0       	rjmp	.+74     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 4:ButtonNumber='/';
    3b46:	8f e2       	ldi	r24, 0x2F	; 47
    3b48:	89 83       	std	Y+1, r24	; 0x01
    3b4a:	22 c0       	rjmp	.+68     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 5:ButtonNumber=4;
    3b4c:	84 e0       	ldi	r24, 0x04	; 4
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	1f c0       	rjmp	.+62     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 6:ButtonNumber=5;
    3b52:	85 e0       	ldi	r24, 0x05	; 5
    3b54:	89 83       	std	Y+1, r24	; 0x01
    3b56:	1c c0       	rjmp	.+56     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 7:ButtonNumber=6;
    3b58:	86 e0       	ldi	r24, 0x06	; 6
    3b5a:	89 83       	std	Y+1, r24	; 0x01
    3b5c:	19 c0       	rjmp	.+50     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 8:ButtonNumber='*';
    3b5e:	8a e2       	ldi	r24, 0x2A	; 42
    3b60:	89 83       	std	Y+1, r24	; 0x01
    3b62:	16 c0       	rjmp	.+44     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 9:ButtonNumber=1;
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	89 83       	std	Y+1, r24	; 0x01
    3b68:	13 c0       	rjmp	.+38     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 10:ButtonNumber=2;
    3b6a:	82 e0       	ldi	r24, 0x02	; 2
    3b6c:	89 83       	std	Y+1, r24	; 0x01
    3b6e:	10 c0       	rjmp	.+32     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 11:ButtonNumber=3;
    3b70:	83 e0       	ldi	r24, 0x03	; 3
    3b72:	89 83       	std	Y+1, r24	; 0x01
    3b74:	0d c0       	rjmp	.+26     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 12:ButtonNumber='-';
    3b76:	8d e2       	ldi	r24, 0x2D	; 45
    3b78:	89 83       	std	Y+1, r24	; 0x01
    3b7a:	0a c0       	rjmp	.+20     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 13:ButtonNumber='!';
    3b7c:	81 e2       	ldi	r24, 0x21	; 33
    3b7e:	89 83       	std	Y+1, r24	; 0x01
    3b80:	07 c0       	rjmp	.+14     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 14:ButtonNumber=0;
    3b82:	19 82       	std	Y+1, r1	; 0x01
    3b84:	05 c0       	rjmp	.+10     	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 15:ButtonNumber='=';
    3b86:	8d e3       	ldi	r24, 0x3D	; 61
    3b88:	89 83       	std	Y+1, r24	; 0x01
    3b8a:	02 c0       	rjmp	.+4      	; 0x3b90 <Keypad_Matrix_four_col+0x138>
	break;
	case 16:ButtonNumber='+';
    3b8c:	8b e2       	ldi	r24, 0x2B	; 43
    3b8e:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return ButtonNumber;
    3b90:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	0f 90       	pop	r0
    3b98:	0f 90       	pop	r0
    3b9a:	cf 91       	pop	r28
    3b9c:	df 91       	pop	r29
    3b9e:	08 95       	ret

00003ba0 <__mulsi3>:
    3ba0:	62 9f       	mul	r22, r18
    3ba2:	d0 01       	movw	r26, r0
    3ba4:	73 9f       	mul	r23, r19
    3ba6:	f0 01       	movw	r30, r0
    3ba8:	82 9f       	mul	r24, r18
    3baa:	e0 0d       	add	r30, r0
    3bac:	f1 1d       	adc	r31, r1
    3bae:	64 9f       	mul	r22, r20
    3bb0:	e0 0d       	add	r30, r0
    3bb2:	f1 1d       	adc	r31, r1
    3bb4:	92 9f       	mul	r25, r18
    3bb6:	f0 0d       	add	r31, r0
    3bb8:	83 9f       	mul	r24, r19
    3bba:	f0 0d       	add	r31, r0
    3bbc:	74 9f       	mul	r23, r20
    3bbe:	f0 0d       	add	r31, r0
    3bc0:	65 9f       	mul	r22, r21
    3bc2:	f0 0d       	add	r31, r0
    3bc4:	99 27       	eor	r25, r25
    3bc6:	72 9f       	mul	r23, r18
    3bc8:	b0 0d       	add	r27, r0
    3bca:	e1 1d       	adc	r30, r1
    3bcc:	f9 1f       	adc	r31, r25
    3bce:	63 9f       	mul	r22, r19
    3bd0:	b0 0d       	add	r27, r0
    3bd2:	e1 1d       	adc	r30, r1
    3bd4:	f9 1f       	adc	r31, r25
    3bd6:	bd 01       	movw	r22, r26
    3bd8:	cf 01       	movw	r24, r30
    3bda:	11 24       	eor	r1, r1
    3bdc:	08 95       	ret

00003bde <__prologue_saves__>:
    3bde:	2f 92       	push	r2
    3be0:	3f 92       	push	r3
    3be2:	4f 92       	push	r4
    3be4:	5f 92       	push	r5
    3be6:	6f 92       	push	r6
    3be8:	7f 92       	push	r7
    3bea:	8f 92       	push	r8
    3bec:	9f 92       	push	r9
    3bee:	af 92       	push	r10
    3bf0:	bf 92       	push	r11
    3bf2:	cf 92       	push	r12
    3bf4:	df 92       	push	r13
    3bf6:	ef 92       	push	r14
    3bf8:	ff 92       	push	r15
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    3c06:	ca 1b       	sub	r28, r26
    3c08:	db 0b       	sbc	r29, r27
    3c0a:	0f b6       	in	r0, 0x3f	; 63
    3c0c:	f8 94       	cli
    3c0e:	de bf       	out	0x3e, r29	; 62
    3c10:	0f be       	out	0x3f, r0	; 63
    3c12:	cd bf       	out	0x3d, r28	; 61
    3c14:	09 94       	ijmp

00003c16 <__epilogue_restores__>:
    3c16:	2a 88       	ldd	r2, Y+18	; 0x12
    3c18:	39 88       	ldd	r3, Y+17	; 0x11
    3c1a:	48 88       	ldd	r4, Y+16	; 0x10
    3c1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c20:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c22:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c24:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c26:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c28:	b9 84       	ldd	r11, Y+9	; 0x09
    3c2a:	c8 84       	ldd	r12, Y+8	; 0x08
    3c2c:	df 80       	ldd	r13, Y+7	; 0x07
    3c2e:	ee 80       	ldd	r14, Y+6	; 0x06
    3c30:	fd 80       	ldd	r15, Y+5	; 0x05
    3c32:	0c 81       	ldd	r16, Y+4	; 0x04
    3c34:	1b 81       	ldd	r17, Y+3	; 0x03
    3c36:	aa 81       	ldd	r26, Y+2	; 0x02
    3c38:	b9 81       	ldd	r27, Y+1	; 0x01
    3c3a:	ce 0f       	add	r28, r30
    3c3c:	d1 1d       	adc	r29, r1
    3c3e:	0f b6       	in	r0, 0x3f	; 63
    3c40:	f8 94       	cli
    3c42:	de bf       	out	0x3e, r29	; 62
    3c44:	0f be       	out	0x3f, r0	; 63
    3c46:	cd bf       	out	0x3d, r28	; 61
    3c48:	ed 01       	movw	r28, r26
    3c4a:	08 95       	ret

00003c4c <dtostrf>:
    3c4c:	ef 92       	push	r14
    3c4e:	ff 92       	push	r15
    3c50:	0f 93       	push	r16
    3c52:	1f 93       	push	r17
    3c54:	f2 2f       	mov	r31, r18
    3c56:	f0 2e       	mov	r15, r16
    3c58:	47 fd       	sbrc	r20, 7
    3c5a:	02 c0       	rjmp	.+4      	; 0x3c60 <dtostrf+0x14>
    3c5c:	e4 e0       	ldi	r30, 0x04	; 4
    3c5e:	01 c0       	rjmp	.+2      	; 0x3c62 <dtostrf+0x16>
    3c60:	e4 e1       	ldi	r30, 0x14	; 20
    3c62:	24 2f       	mov	r18, r20
    3c64:	33 27       	eor	r19, r19
    3c66:	27 fd       	sbrc	r18, 7
    3c68:	30 95       	com	r19
    3c6a:	37 ff       	sbrs	r19, 7
    3c6c:	03 c0       	rjmp	.+6      	; 0x3c74 <dtostrf+0x28>
    3c6e:	30 95       	com	r19
    3c70:	21 95       	neg	r18
    3c72:	3f 4f       	sbci	r19, 0xFF	; 255
    3c74:	4f 2d       	mov	r20, r15
    3c76:	51 2f       	mov	r21, r17
    3c78:	0f 2f       	mov	r16, r31
    3c7a:	ee 2e       	mov	r14, r30
    3c7c:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <dtoa_prf>
    3c80:	8f 2d       	mov	r24, r15
    3c82:	91 2f       	mov	r25, r17
    3c84:	1f 91       	pop	r17
    3c86:	0f 91       	pop	r16
    3c88:	ff 90       	pop	r15
    3c8a:	ef 90       	pop	r14
    3c8c:	08 95       	ret

00003c8e <itoa>:
    3c8e:	fb 01       	movw	r30, r22
    3c90:	9f 01       	movw	r18, r30
    3c92:	e8 94       	clt
    3c94:	42 30       	cpi	r20, 0x02	; 2
    3c96:	c4 f0       	brlt	.+48     	; 0x3cc8 <itoa+0x3a>
    3c98:	45 32       	cpi	r20, 0x25	; 37
    3c9a:	b4 f4       	brge	.+44     	; 0x3cc8 <itoa+0x3a>
    3c9c:	4a 30       	cpi	r20, 0x0A	; 10
    3c9e:	29 f4       	brne	.+10     	; 0x3caa <itoa+0x1c>
    3ca0:	97 fb       	bst	r25, 7
    3ca2:	1e f4       	brtc	.+6      	; 0x3caa <itoa+0x1c>
    3ca4:	90 95       	com	r25
    3ca6:	81 95       	neg	r24
    3ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    3caa:	64 2f       	mov	r22, r20
    3cac:	77 27       	eor	r23, r23
    3cae:	0e 94 b2 20 	call	0x4164	; 0x4164 <__udivmodhi4>
    3cb2:	80 5d       	subi	r24, 0xD0	; 208
    3cb4:	8a 33       	cpi	r24, 0x3A	; 58
    3cb6:	0c f0       	brlt	.+2      	; 0x3cba <itoa+0x2c>
    3cb8:	89 5d       	subi	r24, 0xD9	; 217
    3cba:	81 93       	st	Z+, r24
    3cbc:	cb 01       	movw	r24, r22
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	a1 f7       	brne	.-24     	; 0x3caa <itoa+0x1c>
    3cc2:	16 f4       	brtc	.+4      	; 0x3cc8 <itoa+0x3a>
    3cc4:	5d e2       	ldi	r21, 0x2D	; 45
    3cc6:	51 93       	st	Z+, r21
    3cc8:	10 82       	st	Z, r1
    3cca:	c9 01       	movw	r24, r18
    3ccc:	0c 94 a2 20 	jmp	0x4144	; 0x4144 <strrev>

00003cd0 <dtoa_prf>:
    3cd0:	a9 e0       	ldi	r26, 0x09	; 9
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	ee e6       	ldi	r30, 0x6E	; 110
    3cd6:	fe e1       	ldi	r31, 0x1E	; 30
    3cd8:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__prologue_saves__+0x8>
    3cdc:	6a 01       	movw	r12, r20
    3cde:	12 2f       	mov	r17, r18
    3ce0:	a0 2e       	mov	r10, r16
    3ce2:	be 2c       	mov	r11, r14
    3ce4:	2b e3       	ldi	r18, 0x3B	; 59
    3ce6:	20 17       	cp	r18, r16
    3ce8:	18 f4       	brcc	.+6      	; 0x3cf0 <dtoa_prf+0x20>
    3cea:	2c e3       	ldi	r18, 0x3C	; 60
    3cec:	92 2e       	mov	r9, r18
    3cee:	02 c0       	rjmp	.+4      	; 0x3cf4 <dtoa_prf+0x24>
    3cf0:	90 2e       	mov	r9, r16
    3cf2:	93 94       	inc	r9
    3cf4:	ae 01       	movw	r20, r28
    3cf6:	4f 5f       	subi	r20, 0xFF	; 255
    3cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    3cfa:	27 e0       	ldi	r18, 0x07	; 7
    3cfc:	09 2d       	mov	r16, r9
    3cfe:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__ftoa_engine>
    3d02:	bc 01       	movw	r22, r24
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	e8 2e       	mov	r14, r24
    3d08:	ff 24       	eor	r15, r15
    3d0a:	c7 01       	movw	r24, r14
    3d0c:	89 70       	andi	r24, 0x09	; 9
    3d0e:	90 70       	andi	r25, 0x00	; 0
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	11 f4       	brne	.+4      	; 0x3d18 <dtoa_prf+0x48>
    3d14:	ad e2       	ldi	r26, 0x2D	; 45
    3d16:	09 c0       	rjmp	.+18     	; 0x3d2a <dtoa_prf+0x5a>
    3d18:	b1 fe       	sbrs	r11, 1
    3d1a:	02 c0       	rjmp	.+4      	; 0x3d20 <dtoa_prf+0x50>
    3d1c:	ab e2       	ldi	r26, 0x2B	; 43
    3d1e:	05 c0       	rjmp	.+10     	; 0x3d2a <dtoa_prf+0x5a>
    3d20:	b0 fc       	sbrc	r11, 0
    3d22:	02 c0       	rjmp	.+4      	; 0x3d28 <dtoa_prf+0x58>
    3d24:	a0 e0       	ldi	r26, 0x00	; 0
    3d26:	01 c0       	rjmp	.+2      	; 0x3d2a <dtoa_prf+0x5a>
    3d28:	a0 e2       	ldi	r26, 0x20	; 32
    3d2a:	e3 fe       	sbrs	r14, 3
    3d2c:	3b c0       	rjmp	.+118    	; 0x3da4 <dtoa_prf+0xd4>
    3d2e:	aa 23       	and	r26, r26
    3d30:	11 f4       	brne	.+4      	; 0x3d36 <dtoa_prf+0x66>
    3d32:	23 e0       	ldi	r18, 0x03	; 3
    3d34:	01 c0       	rjmp	.+2      	; 0x3d38 <dtoa_prf+0x68>
    3d36:	24 e0       	ldi	r18, 0x04	; 4
    3d38:	21 17       	cp	r18, r17
    3d3a:	10 f0       	brcs	.+4      	; 0x3d40 <dtoa_prf+0x70>
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	02 c0       	rjmp	.+4      	; 0x3d44 <dtoa_prf+0x74>
    3d40:	12 1b       	sub	r17, r18
    3d42:	21 2f       	mov	r18, r17
    3d44:	eb 2c       	mov	r14, r11
    3d46:	b4 fe       	sbrs	r11, 4
    3d48:	02 c0       	rjmp	.+4      	; 0x3d4e <dtoa_prf+0x7e>
    3d4a:	32 2f       	mov	r19, r18
    3d4c:	0a c0       	rjmp	.+20     	; 0x3d62 <dtoa_prf+0x92>
    3d4e:	f6 01       	movw	r30, r12
    3d50:	32 2f       	mov	r19, r18
    3d52:	80 e2       	ldi	r24, 0x20	; 32
    3d54:	02 c0       	rjmp	.+4      	; 0x3d5a <dtoa_prf+0x8a>
    3d56:	81 93       	st	Z+, r24
    3d58:	31 50       	subi	r19, 0x01	; 1
    3d5a:	33 23       	and	r19, r19
    3d5c:	e1 f7       	brne	.-8      	; 0x3d56 <dtoa_prf+0x86>
    3d5e:	c2 0e       	add	r12, r18
    3d60:	d1 1c       	adc	r13, r1
    3d62:	aa 23       	and	r26, r26
    3d64:	19 f0       	breq	.+6      	; 0x3d6c <dtoa_prf+0x9c>
    3d66:	f6 01       	movw	r30, r12
    3d68:	a1 93       	st	Z+, r26
    3d6a:	6f 01       	movw	r12, r30
    3d6c:	f6 01       	movw	r30, r12
    3d6e:	31 96       	adiw	r30, 0x01	; 1
    3d70:	e2 fe       	sbrs	r14, 2
    3d72:	05 c0       	rjmp	.+10     	; 0x3d7e <dtoa_prf+0xae>
    3d74:	9e e4       	ldi	r25, 0x4E	; 78
    3d76:	d6 01       	movw	r26, r12
    3d78:	9c 93       	st	X, r25
    3d7a:	81 e4       	ldi	r24, 0x41	; 65
    3d7c:	04 c0       	rjmp	.+8      	; 0x3d86 <dtoa_prf+0xb6>
    3d7e:	9e e6       	ldi	r25, 0x6E	; 110
    3d80:	d6 01       	movw	r26, r12
    3d82:	9c 93       	st	X, r25
    3d84:	81 e6       	ldi	r24, 0x61	; 97
    3d86:	11 96       	adiw	r26, 0x01	; 1
    3d88:	8c 93       	st	X, r24
    3d8a:	91 83       	std	Z+1, r25	; 0x01
    3d8c:	32 96       	adiw	r30, 0x02	; 2
    3d8e:	df 01       	movw	r26, r30
    3d90:	83 2f       	mov	r24, r19
    3d92:	90 e2       	ldi	r25, 0x20	; 32
    3d94:	02 c0       	rjmp	.+4      	; 0x3d9a <dtoa_prf+0xca>
    3d96:	9d 93       	st	X+, r25
    3d98:	81 50       	subi	r24, 0x01	; 1
    3d9a:	88 23       	and	r24, r24
    3d9c:	e1 f7       	brne	.-8      	; 0x3d96 <dtoa_prf+0xc6>
    3d9e:	e3 0f       	add	r30, r19
    3da0:	f1 1d       	adc	r31, r1
    3da2:	40 c0       	rjmp	.+128    	; 0x3e24 <dtoa_prf+0x154>
    3da4:	e2 fe       	sbrs	r14, 2
    3da6:	42 c0       	rjmp	.+132    	; 0x3e2c <dtoa_prf+0x15c>
    3da8:	aa 23       	and	r26, r26
    3daa:	11 f4       	brne	.+4      	; 0x3db0 <dtoa_prf+0xe0>
    3dac:	23 e0       	ldi	r18, 0x03	; 3
    3dae:	01 c0       	rjmp	.+2      	; 0x3db2 <dtoa_prf+0xe2>
    3db0:	24 e0       	ldi	r18, 0x04	; 4
    3db2:	21 17       	cp	r18, r17
    3db4:	10 f0       	brcs	.+4      	; 0x3dba <dtoa_prf+0xea>
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	02 c0       	rjmp	.+4      	; 0x3dbe <dtoa_prf+0xee>
    3dba:	12 1b       	sub	r17, r18
    3dbc:	21 2f       	mov	r18, r17
    3dbe:	eb 2c       	mov	r14, r11
    3dc0:	b4 fe       	sbrs	r11, 4
    3dc2:	02 c0       	rjmp	.+4      	; 0x3dc8 <dtoa_prf+0xf8>
    3dc4:	92 2f       	mov	r25, r18
    3dc6:	0a c0       	rjmp	.+20     	; 0x3ddc <dtoa_prf+0x10c>
    3dc8:	f6 01       	movw	r30, r12
    3dca:	92 2f       	mov	r25, r18
    3dcc:	80 e2       	ldi	r24, 0x20	; 32
    3dce:	02 c0       	rjmp	.+4      	; 0x3dd4 <dtoa_prf+0x104>
    3dd0:	81 93       	st	Z+, r24
    3dd2:	91 50       	subi	r25, 0x01	; 1
    3dd4:	99 23       	and	r25, r25
    3dd6:	e1 f7       	brne	.-8      	; 0x3dd0 <dtoa_prf+0x100>
    3dd8:	c2 0e       	add	r12, r18
    3dda:	d1 1c       	adc	r13, r1
    3ddc:	aa 23       	and	r26, r26
    3dde:	19 f0       	breq	.+6      	; 0x3de6 <dtoa_prf+0x116>
    3de0:	f6 01       	movw	r30, r12
    3de2:	a1 93       	st	Z+, r26
    3de4:	6f 01       	movw	r12, r30
    3de6:	f6 01       	movw	r30, r12
    3de8:	31 96       	adiw	r30, 0x01	; 1
    3dea:	e2 fe       	sbrs	r14, 2
    3dec:	08 c0       	rjmp	.+16     	; 0x3dfe <dtoa_prf+0x12e>
    3dee:	89 e4       	ldi	r24, 0x49	; 73
    3df0:	d6 01       	movw	r26, r12
    3df2:	8c 93       	st	X, r24
    3df4:	8e e4       	ldi	r24, 0x4E	; 78
    3df6:	11 96       	adiw	r26, 0x01	; 1
    3df8:	8c 93       	st	X, r24
    3dfa:	86 e4       	ldi	r24, 0x46	; 70
    3dfc:	07 c0       	rjmp	.+14     	; 0x3e0c <dtoa_prf+0x13c>
    3dfe:	89 e6       	ldi	r24, 0x69	; 105
    3e00:	d6 01       	movw	r26, r12
    3e02:	8c 93       	st	X, r24
    3e04:	8e e6       	ldi	r24, 0x6E	; 110
    3e06:	11 96       	adiw	r26, 0x01	; 1
    3e08:	8c 93       	st	X, r24
    3e0a:	86 e6       	ldi	r24, 0x66	; 102
    3e0c:	81 83       	std	Z+1, r24	; 0x01
    3e0e:	32 96       	adiw	r30, 0x02	; 2
    3e10:	df 01       	movw	r26, r30
    3e12:	89 2f       	mov	r24, r25
    3e14:	20 e2       	ldi	r18, 0x20	; 32
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <dtoa_prf+0x14c>
    3e18:	2d 93       	st	X+, r18
    3e1a:	81 50       	subi	r24, 0x01	; 1
    3e1c:	88 23       	and	r24, r24
    3e1e:	e1 f7       	brne	.-8      	; 0x3e18 <dtoa_prf+0x148>
    3e20:	e9 0f       	add	r30, r25
    3e22:	f1 1d       	adc	r31, r1
    3e24:	10 82       	st	Z, r1
    3e26:	2e ef       	ldi	r18, 0xFE	; 254
    3e28:	3f ef       	ldi	r19, 0xFF	; 255
    3e2a:	af c0       	rjmp	.+350    	; 0x3f8a <dtoa_prf+0x2ba>
    3e2c:	16 16       	cp	r1, r22
    3e2e:	17 06       	cpc	r1, r23
    3e30:	1c f0       	brlt	.+6      	; 0x3e38 <dtoa_prf+0x168>
    3e32:	41 e0       	ldi	r20, 0x01	; 1
    3e34:	50 e0       	ldi	r21, 0x00	; 0
    3e36:	03 c0       	rjmp	.+6      	; 0x3e3e <dtoa_prf+0x16e>
    3e38:	ab 01       	movw	r20, r22
    3e3a:	4f 5f       	subi	r20, 0xFF	; 255
    3e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e3e:	aa 20       	and	r10, r10
    3e40:	19 f4       	brne	.+6      	; 0x3e48 <dtoa_prf+0x178>
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	03 c0       	rjmp	.+6      	; 0x3e4e <dtoa_prf+0x17e>
    3e48:	8a 2d       	mov	r24, r10
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	01 96       	adiw	r24, 0x01	; 1
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	aa 23       	and	r26, r26
    3e54:	11 f0       	breq	.+4      	; 0x3e5a <dtoa_prf+0x18a>
    3e56:	21 e0       	ldi	r18, 0x01	; 1
    3e58:	30 e0       	ldi	r19, 0x00	; 0
    3e5a:	24 0f       	add	r18, r20
    3e5c:	35 1f       	adc	r19, r21
    3e5e:	28 0f       	add	r18, r24
    3e60:	39 1f       	adc	r19, r25
    3e62:	81 2f       	mov	r24, r17
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	28 17       	cp	r18, r24
    3e68:	39 07       	cpc	r19, r25
    3e6a:	14 f0       	brlt	.+4      	; 0x3e70 <dtoa_prf+0x1a0>
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	02 c0       	rjmp	.+4      	; 0x3e74 <dtoa_prf+0x1a4>
    3e70:	12 1b       	sub	r17, r18
    3e72:	21 2f       	mov	r18, r17
    3e74:	4b 2d       	mov	r20, r11
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	ca 01       	movw	r24, r20
    3e7a:	80 71       	andi	r24, 0x10	; 16
    3e7c:	90 70       	andi	r25, 0x00	; 0
    3e7e:	b4 fc       	sbrc	r11, 4
    3e80:	0d c0       	rjmp	.+26     	; 0x3e9c <dtoa_prf+0x1cc>
    3e82:	b3 fc       	sbrc	r11, 3
    3e84:	0b c0       	rjmp	.+22     	; 0x3e9c <dtoa_prf+0x1cc>
    3e86:	f6 01       	movw	r30, r12
    3e88:	32 2f       	mov	r19, r18
    3e8a:	40 e2       	ldi	r20, 0x20	; 32
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <dtoa_prf+0x1c2>
    3e8e:	41 93       	st	Z+, r20
    3e90:	31 50       	subi	r19, 0x01	; 1
    3e92:	33 23       	and	r19, r19
    3e94:	e1 f7       	brne	.-8      	; 0x3e8e <dtoa_prf+0x1be>
    3e96:	c2 0e       	add	r12, r18
    3e98:	d1 1c       	adc	r13, r1
    3e9a:	01 c0       	rjmp	.+2      	; 0x3e9e <dtoa_prf+0x1ce>
    3e9c:	32 2f       	mov	r19, r18
    3e9e:	aa 23       	and	r26, r26
    3ea0:	19 f0       	breq	.+6      	; 0x3ea8 <dtoa_prf+0x1d8>
    3ea2:	f6 01       	movw	r30, r12
    3ea4:	a1 93       	st	Z+, r26
    3ea6:	6f 01       	movw	r12, r30
    3ea8:	89 2b       	or	r24, r25
    3eaa:	11 f0       	breq	.+4      	; 0x3eb0 <dtoa_prf+0x1e0>
    3eac:	13 2f       	mov	r17, r19
    3eae:	0a c0       	rjmp	.+20     	; 0x3ec4 <dtoa_prf+0x1f4>
    3eb0:	f6 01       	movw	r30, r12
    3eb2:	13 2f       	mov	r17, r19
    3eb4:	80 e3       	ldi	r24, 0x30	; 48
    3eb6:	02 c0       	rjmp	.+4      	; 0x3ebc <dtoa_prf+0x1ec>
    3eb8:	81 93       	st	Z+, r24
    3eba:	11 50       	subi	r17, 0x01	; 1
    3ebc:	11 23       	and	r17, r17
    3ebe:	e1 f7       	brne	.-8      	; 0x3eb8 <dtoa_prf+0x1e8>
    3ec0:	c3 0e       	add	r12, r19
    3ec2:	d1 1c       	adc	r13, r1
    3ec4:	09 2d       	mov	r16, r9
    3ec6:	06 0f       	add	r16, r22
    3ec8:	ba 80       	ldd	r11, Y+2	; 0x02
    3eca:	90 e1       	ldi	r25, 0x10	; 16
    3ecc:	89 2e       	mov	r8, r25
    3ece:	91 2c       	mov	r9, r1
    3ed0:	8e 20       	and	r8, r14
    3ed2:	9f 20       	and	r9, r15
    3ed4:	e4 fe       	sbrs	r14, 4
    3ed6:	04 c0       	rjmp	.+8      	; 0x3ee0 <dtoa_prf+0x210>
    3ed8:	f1 e3       	ldi	r31, 0x31	; 49
    3eda:	bf 16       	cp	r11, r31
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <dtoa_prf+0x210>
    3ede:	01 50       	subi	r16, 0x01	; 1
    3ee0:	10 16       	cp	r1, r16
    3ee2:	14 f0       	brlt	.+4      	; 0x3ee8 <dtoa_prf+0x218>
    3ee4:	01 e0       	ldi	r16, 0x01	; 1
    3ee6:	03 c0       	rjmp	.+6      	; 0x3eee <dtoa_prf+0x21e>
    3ee8:	09 30       	cpi	r16, 0x09	; 9
    3eea:	08 f0       	brcs	.+2      	; 0x3eee <dtoa_prf+0x21e>
    3eec:	08 e0       	ldi	r16, 0x08	; 8
    3eee:	9b 01       	movw	r18, r22
    3ef0:	77 ff       	sbrs	r23, 7
    3ef2:	02 c0       	rjmp	.+4      	; 0x3ef8 <dtoa_prf+0x228>
    3ef4:	20 e0       	ldi	r18, 0x00	; 0
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	cb 01       	movw	r24, r22
    3efa:	01 96       	adiw	r24, 0x01	; 1
    3efc:	82 1b       	sub	r24, r18
    3efe:	93 0b       	sbc	r25, r19
    3f00:	fe 01       	movw	r30, r28
    3f02:	31 96       	adiw	r30, 0x01	; 1
    3f04:	e8 0f       	add	r30, r24
    3f06:	f9 1f       	adc	r31, r25
    3f08:	8e e2       	ldi	r24, 0x2E	; 46
    3f0a:	f8 2e       	mov	r15, r24
    3f0c:	3b 01       	movw	r6, r22
    3f0e:	60 1a       	sub	r6, r16
    3f10:	71 08       	sbc	r7, r1
    3f12:	8a 2d       	mov	r24, r10
    3f14:	90 e0       	ldi	r25, 0x00	; 0
    3f16:	44 27       	eor	r20, r20
    3f18:	55 27       	eor	r21, r21
    3f1a:	48 1b       	sub	r20, r24
    3f1c:	59 0b       	sbc	r21, r25
    3f1e:	8f ef       	ldi	r24, 0xFF	; 255
    3f20:	2f 3f       	cpi	r18, 0xFF	; 255
    3f22:	38 07       	cpc	r19, r24
    3f24:	19 f4       	brne	.+6      	; 0x3f2c <dtoa_prf+0x25c>
    3f26:	d6 01       	movw	r26, r12
    3f28:	fd 92       	st	X+, r15
    3f2a:	6d 01       	movw	r12, r26
    3f2c:	62 17       	cp	r22, r18
    3f2e:	73 07       	cpc	r23, r19
    3f30:	2c f0       	brlt	.+10     	; 0x3f3c <dtoa_prf+0x26c>
    3f32:	62 16       	cp	r6, r18
    3f34:	73 06       	cpc	r7, r19
    3f36:	14 f4       	brge	.+4      	; 0x3f3c <dtoa_prf+0x26c>
    3f38:	80 81       	ld	r24, Z
    3f3a:	01 c0       	rjmp	.+2      	; 0x3f3e <dtoa_prf+0x26e>
    3f3c:	80 e3       	ldi	r24, 0x30	; 48
    3f3e:	21 50       	subi	r18, 0x01	; 1
    3f40:	30 40       	sbci	r19, 0x00	; 0
    3f42:	31 96       	adiw	r30, 0x01	; 1
    3f44:	24 17       	cp	r18, r20
    3f46:	35 07       	cpc	r19, r21
    3f48:	24 f0       	brlt	.+8      	; 0x3f52 <dtoa_prf+0x282>
    3f4a:	d6 01       	movw	r26, r12
    3f4c:	8d 93       	st	X+, r24
    3f4e:	6d 01       	movw	r12, r26
    3f50:	e6 cf       	rjmp	.-52     	; 0x3f1e <dtoa_prf+0x24e>
    3f52:	26 17       	cp	r18, r22
    3f54:	37 07       	cpc	r19, r23
    3f56:	49 f4       	brne	.+18     	; 0x3f6a <dtoa_prf+0x29a>
    3f58:	b5 e3       	ldi	r27, 0x35	; 53
    3f5a:	bb 15       	cp	r27, r11
    3f5c:	28 f0       	brcs	.+10     	; 0x3f68 <dtoa_prf+0x298>
    3f5e:	bb 16       	cp	r11, r27
    3f60:	21 f4       	brne	.+8      	; 0x3f6a <dtoa_prf+0x29a>
    3f62:	81 14       	cp	r8, r1
    3f64:	91 04       	cpc	r9, r1
    3f66:	09 f4       	brne	.+2      	; 0x3f6a <dtoa_prf+0x29a>
    3f68:	81 e3       	ldi	r24, 0x31	; 49
    3f6a:	f6 01       	movw	r30, r12
    3f6c:	81 93       	st	Z+, r24
    3f6e:	d6 01       	movw	r26, r12
    3f70:	81 2f       	mov	r24, r17
    3f72:	90 e2       	ldi	r25, 0x20	; 32
    3f74:	02 c0       	rjmp	.+4      	; 0x3f7a <dtoa_prf+0x2aa>
    3f76:	9c 93       	st	X, r25
    3f78:	81 50       	subi	r24, 0x01	; 1
    3f7a:	11 96       	adiw	r26, 0x01	; 1
    3f7c:	88 23       	and	r24, r24
    3f7e:	d9 f7       	brne	.-10     	; 0x3f76 <dtoa_prf+0x2a6>
    3f80:	e1 0f       	add	r30, r17
    3f82:	f1 1d       	adc	r31, r1
    3f84:	10 82       	st	Z, r1
    3f86:	20 e0       	ldi	r18, 0x00	; 0
    3f88:	30 e0       	ldi	r19, 0x00	; 0
    3f8a:	c9 01       	movw	r24, r18
    3f8c:	29 96       	adiw	r28, 0x09	; 9
    3f8e:	ee e0       	ldi	r30, 0x0E	; 14
    3f90:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__epilogue_restores__+0x8>

00003f94 <__ftoa_engine>:
    3f94:	28 30       	cpi	r18, 0x08	; 8
    3f96:	08 f0       	brcs	.+2      	; 0x3f9a <__ftoa_engine+0x6>
    3f98:	27 e0       	ldi	r18, 0x07	; 7
    3f9a:	33 27       	eor	r19, r19
    3f9c:	da 01       	movw	r26, r20
    3f9e:	99 0f       	add	r25, r25
    3fa0:	31 1d       	adc	r19, r1
    3fa2:	87 fd       	sbrc	r24, 7
    3fa4:	91 60       	ori	r25, 0x01	; 1
    3fa6:	00 96       	adiw	r24, 0x00	; 0
    3fa8:	61 05       	cpc	r22, r1
    3faa:	71 05       	cpc	r23, r1
    3fac:	39 f4       	brne	.+14     	; 0x3fbc <__ftoa_engine+0x28>
    3fae:	32 60       	ori	r19, 0x02	; 2
    3fb0:	2e 5f       	subi	r18, 0xFE	; 254
    3fb2:	3d 93       	st	X+, r19
    3fb4:	30 e3       	ldi	r19, 0x30	; 48
    3fb6:	2a 95       	dec	r18
    3fb8:	e1 f7       	brne	.-8      	; 0x3fb2 <__ftoa_engine+0x1e>
    3fba:	08 95       	ret
    3fbc:	9f 3f       	cpi	r25, 0xFF	; 255
    3fbe:	30 f0       	brcs	.+12     	; 0x3fcc <__ftoa_engine+0x38>
    3fc0:	80 38       	cpi	r24, 0x80	; 128
    3fc2:	71 05       	cpc	r23, r1
    3fc4:	61 05       	cpc	r22, r1
    3fc6:	09 f0       	breq	.+2      	; 0x3fca <__ftoa_engine+0x36>
    3fc8:	3c 5f       	subi	r19, 0xFC	; 252
    3fca:	3c 5f       	subi	r19, 0xFC	; 252
    3fcc:	3d 93       	st	X+, r19
    3fce:	91 30       	cpi	r25, 0x01	; 1
    3fd0:	08 f0       	brcs	.+2      	; 0x3fd4 <__ftoa_engine+0x40>
    3fd2:	80 68       	ori	r24, 0x80	; 128
    3fd4:	91 1d       	adc	r25, r1
    3fd6:	df 93       	push	r29
    3fd8:	cf 93       	push	r28
    3fda:	1f 93       	push	r17
    3fdc:	0f 93       	push	r16
    3fde:	ff 92       	push	r15
    3fe0:	ef 92       	push	r14
    3fe2:	19 2f       	mov	r17, r25
    3fe4:	98 7f       	andi	r25, 0xF8	; 248
    3fe6:	96 95       	lsr	r25
    3fe8:	e9 2f       	mov	r30, r25
    3fea:	96 95       	lsr	r25
    3fec:	96 95       	lsr	r25
    3fee:	e9 0f       	add	r30, r25
    3ff0:	ff 27       	eor	r31, r31
    3ff2:	e2 55       	subi	r30, 0x52	; 82
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	99 27       	eor	r25, r25
    3ff8:	33 27       	eor	r19, r19
    3ffa:	ee 24       	eor	r14, r14
    3ffc:	ff 24       	eor	r15, r15
    3ffe:	a7 01       	movw	r20, r14
    4000:	e7 01       	movw	r28, r14
    4002:	05 90       	lpm	r0, Z+
    4004:	08 94       	sec
    4006:	07 94       	ror	r0
    4008:	28 f4       	brcc	.+10     	; 0x4014 <__ftoa_engine+0x80>
    400a:	36 0f       	add	r19, r22
    400c:	e7 1e       	adc	r14, r23
    400e:	f8 1e       	adc	r15, r24
    4010:	49 1f       	adc	r20, r25
    4012:	51 1d       	adc	r21, r1
    4014:	66 0f       	add	r22, r22
    4016:	77 1f       	adc	r23, r23
    4018:	88 1f       	adc	r24, r24
    401a:	99 1f       	adc	r25, r25
    401c:	06 94       	lsr	r0
    401e:	a1 f7       	brne	.-24     	; 0x4008 <__ftoa_engine+0x74>
    4020:	05 90       	lpm	r0, Z+
    4022:	07 94       	ror	r0
    4024:	28 f4       	brcc	.+10     	; 0x4030 <__ftoa_engine+0x9c>
    4026:	e7 0e       	add	r14, r23
    4028:	f8 1e       	adc	r15, r24
    402a:	49 1f       	adc	r20, r25
    402c:	56 1f       	adc	r21, r22
    402e:	c1 1d       	adc	r28, r1
    4030:	77 0f       	add	r23, r23
    4032:	88 1f       	adc	r24, r24
    4034:	99 1f       	adc	r25, r25
    4036:	66 1f       	adc	r22, r22
    4038:	06 94       	lsr	r0
    403a:	a1 f7       	brne	.-24     	; 0x4024 <__ftoa_engine+0x90>
    403c:	05 90       	lpm	r0, Z+
    403e:	07 94       	ror	r0
    4040:	28 f4       	brcc	.+10     	; 0x404c <__ftoa_engine+0xb8>
    4042:	f8 0e       	add	r15, r24
    4044:	49 1f       	adc	r20, r25
    4046:	56 1f       	adc	r21, r22
    4048:	c7 1f       	adc	r28, r23
    404a:	d1 1d       	adc	r29, r1
    404c:	88 0f       	add	r24, r24
    404e:	99 1f       	adc	r25, r25
    4050:	66 1f       	adc	r22, r22
    4052:	77 1f       	adc	r23, r23
    4054:	06 94       	lsr	r0
    4056:	a1 f7       	brne	.-24     	; 0x4040 <__ftoa_engine+0xac>
    4058:	05 90       	lpm	r0, Z+
    405a:	07 94       	ror	r0
    405c:	20 f4       	brcc	.+8      	; 0x4066 <__ftoa_engine+0xd2>
    405e:	49 0f       	add	r20, r25
    4060:	56 1f       	adc	r21, r22
    4062:	c7 1f       	adc	r28, r23
    4064:	d8 1f       	adc	r29, r24
    4066:	99 0f       	add	r25, r25
    4068:	66 1f       	adc	r22, r22
    406a:	77 1f       	adc	r23, r23
    406c:	88 1f       	adc	r24, r24
    406e:	06 94       	lsr	r0
    4070:	a9 f7       	brne	.-22     	; 0x405c <__ftoa_engine+0xc8>
    4072:	84 91       	lpm	r24, Z+
    4074:	10 95       	com	r17
    4076:	17 70       	andi	r17, 0x07	; 7
    4078:	41 f0       	breq	.+16     	; 0x408a <__ftoa_engine+0xf6>
    407a:	d6 95       	lsr	r29
    407c:	c7 95       	ror	r28
    407e:	57 95       	ror	r21
    4080:	47 95       	ror	r20
    4082:	f7 94       	ror	r15
    4084:	e7 94       	ror	r14
    4086:	1a 95       	dec	r17
    4088:	c1 f7       	brne	.-16     	; 0x407a <__ftoa_engine+0xe6>
    408a:	e4 e5       	ldi	r30, 0x54	; 84
    408c:	f0 e0       	ldi	r31, 0x00	; 0
    408e:	68 94       	set
    4090:	15 90       	lpm	r1, Z+
    4092:	15 91       	lpm	r17, Z+
    4094:	35 91       	lpm	r19, Z+
    4096:	65 91       	lpm	r22, Z+
    4098:	95 91       	lpm	r25, Z+
    409a:	05 90       	lpm	r0, Z+
    409c:	7f e2       	ldi	r23, 0x2F	; 47
    409e:	73 95       	inc	r23
    40a0:	e1 18       	sub	r14, r1
    40a2:	f1 0a       	sbc	r15, r17
    40a4:	43 0b       	sbc	r20, r19
    40a6:	56 0b       	sbc	r21, r22
    40a8:	c9 0b       	sbc	r28, r25
    40aa:	d0 09       	sbc	r29, r0
    40ac:	c0 f7       	brcc	.-16     	; 0x409e <__ftoa_engine+0x10a>
    40ae:	e1 0c       	add	r14, r1
    40b0:	f1 1e       	adc	r15, r17
    40b2:	43 1f       	adc	r20, r19
    40b4:	56 1f       	adc	r21, r22
    40b6:	c9 1f       	adc	r28, r25
    40b8:	d0 1d       	adc	r29, r0
    40ba:	7e f4       	brtc	.+30     	; 0x40da <__ftoa_engine+0x146>
    40bc:	70 33       	cpi	r23, 0x30	; 48
    40be:	11 f4       	brne	.+4      	; 0x40c4 <__ftoa_engine+0x130>
    40c0:	8a 95       	dec	r24
    40c2:	e6 cf       	rjmp	.-52     	; 0x4090 <__ftoa_engine+0xfc>
    40c4:	e8 94       	clt
    40c6:	01 50       	subi	r16, 0x01	; 1
    40c8:	30 f0       	brcs	.+12     	; 0x40d6 <__ftoa_engine+0x142>
    40ca:	08 0f       	add	r16, r24
    40cc:	0a f4       	brpl	.+2      	; 0x40d0 <__ftoa_engine+0x13c>
    40ce:	00 27       	eor	r16, r16
    40d0:	02 17       	cp	r16, r18
    40d2:	08 f4       	brcc	.+2      	; 0x40d6 <__ftoa_engine+0x142>
    40d4:	20 2f       	mov	r18, r16
    40d6:	23 95       	inc	r18
    40d8:	02 2f       	mov	r16, r18
    40da:	7a 33       	cpi	r23, 0x3A	; 58
    40dc:	28 f0       	brcs	.+10     	; 0x40e8 <__ftoa_engine+0x154>
    40de:	79 e3       	ldi	r23, 0x39	; 57
    40e0:	7d 93       	st	X+, r23
    40e2:	2a 95       	dec	r18
    40e4:	e9 f7       	brne	.-6      	; 0x40e0 <__ftoa_engine+0x14c>
    40e6:	10 c0       	rjmp	.+32     	; 0x4108 <__ftoa_engine+0x174>
    40e8:	7d 93       	st	X+, r23
    40ea:	2a 95       	dec	r18
    40ec:	89 f6       	brne	.-94     	; 0x4090 <__ftoa_engine+0xfc>
    40ee:	06 94       	lsr	r0
    40f0:	97 95       	ror	r25
    40f2:	67 95       	ror	r22
    40f4:	37 95       	ror	r19
    40f6:	17 95       	ror	r17
    40f8:	17 94       	ror	r1
    40fa:	e1 18       	sub	r14, r1
    40fc:	f1 0a       	sbc	r15, r17
    40fe:	43 0b       	sbc	r20, r19
    4100:	56 0b       	sbc	r21, r22
    4102:	c9 0b       	sbc	r28, r25
    4104:	d0 09       	sbc	r29, r0
    4106:	98 f0       	brcs	.+38     	; 0x412e <__ftoa_engine+0x19a>
    4108:	23 95       	inc	r18
    410a:	7e 91       	ld	r23, -X
    410c:	73 95       	inc	r23
    410e:	7a 33       	cpi	r23, 0x3A	; 58
    4110:	08 f0       	brcs	.+2      	; 0x4114 <__ftoa_engine+0x180>
    4112:	70 e3       	ldi	r23, 0x30	; 48
    4114:	7c 93       	st	X, r23
    4116:	20 13       	cpse	r18, r16
    4118:	b8 f7       	brcc	.-18     	; 0x4108 <__ftoa_engine+0x174>
    411a:	7e 91       	ld	r23, -X
    411c:	70 61       	ori	r23, 0x10	; 16
    411e:	7d 93       	st	X+, r23
    4120:	30 f0       	brcs	.+12     	; 0x412e <__ftoa_engine+0x19a>
    4122:	83 95       	inc	r24
    4124:	71 e3       	ldi	r23, 0x31	; 49
    4126:	7d 93       	st	X+, r23
    4128:	70 e3       	ldi	r23, 0x30	; 48
    412a:	2a 95       	dec	r18
    412c:	e1 f7       	brne	.-8      	; 0x4126 <__ftoa_engine+0x192>
    412e:	11 24       	eor	r1, r1
    4130:	ef 90       	pop	r14
    4132:	ff 90       	pop	r15
    4134:	0f 91       	pop	r16
    4136:	1f 91       	pop	r17
    4138:	cf 91       	pop	r28
    413a:	df 91       	pop	r29
    413c:	99 27       	eor	r25, r25
    413e:	87 fd       	sbrc	r24, 7
    4140:	90 95       	com	r25
    4142:	08 95       	ret

00004144 <strrev>:
    4144:	dc 01       	movw	r26, r24
    4146:	fc 01       	movw	r30, r24
    4148:	67 2f       	mov	r22, r23
    414a:	71 91       	ld	r23, Z+
    414c:	77 23       	and	r23, r23
    414e:	e1 f7       	brne	.-8      	; 0x4148 <strrev+0x4>
    4150:	32 97       	sbiw	r30, 0x02	; 2
    4152:	04 c0       	rjmp	.+8      	; 0x415c <strrev+0x18>
    4154:	7c 91       	ld	r23, X
    4156:	6d 93       	st	X+, r22
    4158:	70 83       	st	Z, r23
    415a:	62 91       	ld	r22, -Z
    415c:	ae 17       	cp	r26, r30
    415e:	bf 07       	cpc	r27, r31
    4160:	c8 f3       	brcs	.-14     	; 0x4154 <strrev+0x10>
    4162:	08 95       	ret

00004164 <__udivmodhi4>:
    4164:	aa 1b       	sub	r26, r26
    4166:	bb 1b       	sub	r27, r27
    4168:	51 e1       	ldi	r21, 0x11	; 17
    416a:	07 c0       	rjmp	.+14     	; 0x417a <__udivmodhi4_ep>

0000416c <__udivmodhi4_loop>:
    416c:	aa 1f       	adc	r26, r26
    416e:	bb 1f       	adc	r27, r27
    4170:	a6 17       	cp	r26, r22
    4172:	b7 07       	cpc	r27, r23
    4174:	10 f0       	brcs	.+4      	; 0x417a <__udivmodhi4_ep>
    4176:	a6 1b       	sub	r26, r22
    4178:	b7 0b       	sbc	r27, r23

0000417a <__udivmodhi4_ep>:
    417a:	88 1f       	adc	r24, r24
    417c:	99 1f       	adc	r25, r25
    417e:	5a 95       	dec	r21
    4180:	a9 f7       	brne	.-22     	; 0x416c <__udivmodhi4_loop>
    4182:	80 95       	com	r24
    4184:	90 95       	com	r25
    4186:	bc 01       	movw	r22, r24
    4188:	cd 01       	movw	r24, r26
    418a:	08 95       	ret

0000418c <_exit>:
    418c:	f8 94       	cli

0000418e <__stop_program>:
    418e:	ff cf       	rjmp	.-2      	; 0x418e <__stop_program>
